import{S as Ym,i as $m,s as Gm,R as Ik,a as u,z as Fm,O as Um,h as s,c as d,A as Jm,b as i,B as zm,T as Vm,U as Jv,g as Kv,d as Qv,C as Km,V as zv,E as Qm,k as o,r as a,l,m as p,u as n,p as r,G as e,H as Xm,I as Zm,J as t1}from"./index.bc8fed38.js";import{P as e1}from"./post_layout.75190885.js";function s1(at){let b,T,U,C,J,h,R,Te,Vt,zl,Vl,Jn,We,Kl,zn,Ie,Ql,Vn,rt,Xl,Kt,Zl,tp,Kn,ut,dt,ns,ep,Qn,kt,sp,os,ap,np,Xn,Qt,Xv=`<code class="language-bash"><span class="token function">npm</span> create svelte@latest <span class="token operator">&lt;</span>project_name<span class="token operator">></span>
<span class="token builtin class-name">cd</span> <span class="token operator">&lt;</span>project_name<span class="token operator">></span>
<span class="token function">npm</span> <span class="token function">install</span>
<span class="token function">npm</span> run dev -- <span class="token parameter variable">--open</span></code>`,Zn,nt,op,ls,lp,pp,ps,cp,to,ft,ip,cs,rp,up,eo,P,dp,is,kp,fp,rs,hp,vp,us,mp,yp,ds,wp,bp,ks,gp,Ep,so,ht,vt,fs,_p,ao,Xt,Zv='<code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> <span class="token parameter variable">-D</span> mdsvex</code>',no,V,Dp,hs,Op,Cp,vs,Pp,xp,oo,Zt,tm=`<code class="language-javascript"><span class="token keyword">const</span> config <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
	<span class="token literal-property property">extensions</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'.svelte'</span><span class="token punctuation">,</span> <span class="token string">'.md'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
	<span class="token literal-property property">preprocess</span><span class="token operator">:</span> <span class="token punctuation">[</span>
		<span class="token function">vitePreprocess</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>

		<span class="token function">mdsvex</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
			<span class="token literal-property property">extensions</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'.md'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
			<span class="token literal-property property">layout</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
				<span class="token literal-property property">blog</span><span class="token operator">:</span> <span class="token string">'./src/routes/blog/post_layout.svelte'</span>
			<span class="token punctuation">&#125;</span>
		<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
	<span class="token punctuation">]</span><span class="token punctuation">,</span>
	<span class="token comment">// rest of the config</span></code>`,lo,He,jp,po,D,Ap,ms,Tp,Wp,ys,Ip,Hp,ws,Sp,Rp,bs,Lp,qp,gs,Mp,Np,Es,Bp,Yp,co,te,em=`<code class="language-svelte"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">
	<span class="token keyword">import</span> PostHeader <span class="token keyword">from</span> <span class="token string">'$lib/PostHeader.svelte'</span><span class="token punctuation">;</span>
	<span class="token keyword">import</span> Bio <span class="token keyword">from</span> <span class="token string">'$lib/Bio.svelte'</span><span class="token punctuation">;</span>
	<span class="token comment">// if i don't add the exports here, i can't access title and created as props</span>
	<span class="token keyword">export</span> <span class="token keyword">let</span> title<span class="token punctuation">;</span>
	<span class="token keyword">export</span> <span class="token keyword">let</span> created<span class="token punctuation">;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>PostHeader</span> <span class="token language-javascript"><span class="token punctuation">&#123;</span>title<span class="token punctuation">&#125;</span></span> <span class="token language-javascript"><span class="token punctuation">&#123;</span>created<span class="token punctuation">&#125;</span></span> <span class="token punctuation">/></span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>slot</span> <span class="token punctuation">/></span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Browse more posts<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hr</span> <span class="token punctuation">/></span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">></span></span>About me<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Bio</span> <span class="token punctuation">/></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code>`,io,L,_s,$p,Gp,Ds,Fp,Up,Os,Jp,zp,Cs,Vp,Kp,ro,x,Qp,Ps,Xp,Zp,xs,tc,ec,js,sc,ac,As,nc,oc,Ts,lc,pc,uo,W,cc,Ws,ic,rc,Is,uc,dc,Hs,kc,fc,Ss,hc,vc,ko,mt,yt,Rs,mc,fo,Se,yc,ho,K,wc,Ls,bc,gc,qs,Ec,_c,vo,v,Dc,Ms,Oc,Cc,Ns,Pc,xc,Bs,jc,Ac,Ys,Tc,Wc,$s,Ic,Hc,Gs,Sc,Rc,Fs,Lc,qc,Us,Mc,Nc,Js,Bc,Yc,zs,$c,Gc,mo,ee,sm=`<code class="language-typescript"><span class="token comment">// src/routes/api/posts/+server.ts file</span>
<span class="token keyword">import</span> <span class="token punctuation">&#123;</span> json <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'@sveltejs/kit'</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token keyword">type</span> <span class="token punctuation">&#123;</span> RequestHandler <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'@sveltejs/kit'</span><span class="token punctuation">;</span>

<span class="token keyword">interface</span> <span class="token class-name">Post</span> <span class="token punctuation">&#123;</span>
	created<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
	title<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
	slug<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">function</span> <span class="token function">dateSort</span><span class="token punctuation">(</span>a<span class="token operator">:</span> Post<span class="token punctuation">,</span> b<span class="token operator">:</span> Post<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token comment">// have to use getTime to satisfy typescript</span>
	<span class="token comment">// And if i make this file a js file, the endpoint is not detected since</span>
	<span class="token comment">// it's a typescript svelte project</span>
	<span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span>created<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>created<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token constant">GET</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">const</span> modules <span class="token operator">=</span> <span class="token keyword">import</span><span class="token punctuation">.</span>meta<span class="token punctuation">.</span><span class="token function">glob</span><span class="token punctuation">(</span><span class="token string">'../../blog/*.md'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">const</span> posts<span class="token operator">:</span> <span class="token builtin">Array</span><span class="token operator">&lt;</span>Post<span class="token operator">></span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

	<span class="token keyword">await</span> <span class="token builtin">Promise</span><span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span>
		Object<span class="token punctuation">.</span><span class="token function">entries</span><span class="token punctuation">(</span>modules<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">[</span>_<span class="token punctuation">,</span> module<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
			<span class="token keyword">const</span> <span class="token punctuation">&#123;</span> metadata <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">module</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

			posts<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>metadata<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
	<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token comment">// Newest first</span>
	posts<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>dateSort<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">return</span> <span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
		posts<span class="token operator">:</span> posts
	<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span> satisfies RequestHandler<span class="token punctuation">;</span></code>`,yo,Re,Fc,wo,wt,z,Uc,Vs,Jc,zc,Ks,Vc,Kc,Qs,Qc,Xc,Zc,se,ti,Xs,ei,si,bo,m,ai,Zs,ni,oi,ta,li,pi,ea,ci,ii,sa,ri,ui,aa,di,ki,na,fi,hi,oa,vi,mi,la,yi,wi,pa,bi,gi,go,ae,am=`<code class="language-typescript"><span class="token comment">// src/routes/+page.ts file</span>
<span class="token keyword">export</span> <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">load</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> fetch <span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">const</span> response <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">'/api/posts'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">const</span> <span class="token punctuation">&#123;</span> posts <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token keyword">await</span> response<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">return</span> <span class="token punctuation">&#123;</span>
		posts
	<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code>`,Eo,Le,Ei,_o,qe,_i,Do,ne,nm=`<code class="language-undefined">---
title: Make a blog with svelte kit and host on github
date: &#39;2021-05-18&#39;
slug: &#39;2021-05-81-make-blog-with-sveltekit&#39;
---</code>`,Oo,Me,Di,Co,oe,om=`<code class="language-json"><span class="token punctuation">&#123;</span>
	title<span class="token operator">:</span> Make a blog with svelte kit and host on github<span class="token punctuation">,</span>
	date<span class="token operator">:</span> '<span class="token number">2021</span><span class="token number">-05</span><span class="token number">-18</span>'<span class="token punctuation">,</span>
	slug<span class="token operator">:</span> '<span class="token number">2021</span><span class="token number">-05</span><span class="token number">-81</span>-make-blog-with-sveltekit'<span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span></code>`,Po,Ne,Oi,xo,le,lm=`<code class="language-html">&#123;#each posts as post&#125;
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>prefetch<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>blog/&#123;post.metadata.slug&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>&#123;post.metadata.title&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>
&#123;/each&#125;</code>`,jo,bt,Ci,ca,Pi,xi,Ao,pe,pm=`<code class="language-svelte"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ts<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">
	<span class="token keyword">import</span> type <span class="token punctuation">&#123;</span> PageData <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'./$types'</span><span class="token punctuation">;</span>

	<span class="token keyword">export</span> <span class="token keyword">let</span> <span class="token literal-property property">data</span><span class="token operator">:</span> PageData<span class="token punctuation">;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>Blog posts<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>posts<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
		<span class="token each"><span class="token punctuation">&#123;</span><span class="token keyword">#each</span> <span class="token language-javascript">data<span class="token punctuation">.</span>posts </span><span class="token keyword">as</span> <span class="token language-javascript">post<span class="token punctuation">&#125;</span></span></span>
			<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>
				<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>prefetch<span class="token punctuation">"</span></span> <span class="token attr-name">href="blog</span>/<span class="token language-javascript"><span class="token punctuation">&#123;</span>post<span class="token punctuation">.</span>slug<span class="token punctuation">&#125;</span></span><span class="token attr-name">"</span><span class="token punctuation">></span></span>
					<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>
						<span class="token language-javascript"><span class="token punctuation">&#123;</span>post<span class="token punctuation">.</span>title<span class="token punctuation">&#125;</span></span>
					<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>
				<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>
				<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>date<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
					<span class="token language-javascript"><span class="token punctuation">&#123;</span>post<span class="token punctuation">.</span>created<span class="token punctuation">&#125;</span></span>
				<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
			<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>
		<span class="token each"><span class="token punctuation">&#123;</span><span class="token keyword">/each</span><span class="token punctuation">&#125;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code>`,To,gt,Et,ia,ji,Wo,Q,Ai,ra,Ti,Wi,Ii,Io,ce,cm=`<code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>main</span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">max-width</span><span class="token punctuation">:</span> 42rem<span class="token punctuation">;</span><span class="token property">margin</span><span class="token punctuation">:</span>auto</span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>logo logo-big<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>header-link<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> unstack.in <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>slot</span> <span class="token punctuation">/></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>main</span><span class="token punctuation">></span></span></code>`,Ho,ie,Hi,re,Si,So,_t,Dt,ua,Ri,Ro,Be,Li,Lo,N,qi,da,Mi,Ni,ka,Bi,Yi,fa,$i,Gi,qo,ot,Fi,ha,Ui,Ji,va,zi,Mo,ue,im=`<code class="language-javascript"><span class="token comment">// in svelte.config.js file somewhere</span>
<span class="token function">mdsvex</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
	<span class="token literal-property property">extensions</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'.md'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
	<span class="token literal-property property">layout</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
		<span class="token literal-property property">blog</span><span class="token operator">:</span> <span class="token string">'./src/routes/blog/post_layout.svelte'</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code>`,No,Ot,Vi,ma,Ki,Qi,Bo,de,rm=`<code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">
	<span class="token keyword">import</span> PostHeader <span class="token keyword">from</span> <span class="token string">'$lib/PostHeader.svelte'</span><span class="token punctuation">;</span>
	<span class="token comment">// if i don't add the exports here, i can't access title and date as props</span>
	<span class="token keyword">export</span> <span class="token keyword">let</span> title<span class="token punctuation">;</span>
	<span class="token keyword">export</span> <span class="token keyword">let</span> date<span class="token punctuation">;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>PostHeader</span> <span class="token attr-name">&#123;title&#125;</span> <span class="token attr-name">&#123;date&#125;</span> <span class="token punctuation">/></span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>slot</span> <span class="token punctuation">/></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code>`,Yo,Ye,Xi,$o,lt,Zi,ya,tr,er,ke,sr,Go,Ct,Pt,wa,ar,Fo,g,nr,ba,or,lr,ga,pr,cr,Ea,ir,rr,_a,ur,dr,Da,kr,fr,Oa,hr,vr,Ca,mr,yr,Uo,fe,um=`<code class="language-undefined">src
	routes
		blog
			blog-post-title
				+page.md
			asinine-personal-details-post
				+page.md
			very-basic-trick-but-my-god-its-popular
				+page.md
			super-complicated-post-no-one-wants-to-read
				+page.md
			more-about-myself-me-me-me-me
				+page.md</code>`,Jo,X,wr,Pa,br,gr,xa,Er,_r,zo,$e,Dr,Vo,Ge,Or,Ko,xt,jt,ja,Cr,Qo,Fe,Pr,Xo,At,Aa,xr,jr,Ta,Ar,Zo,q,Wa,Tr,Wr,Ia,Ir,Hr,Ha,Sr,Rr,Sa,Lr,qr,tl,k,Ra,Mr,Nr,La,Br,Yr,qa,$r,Gr,Ma,Fr,Ur,Na,Jr,zr,Ba,Vr,Kr,Ya,Qr,Xr,$a,Zr,tu,Ga,eu,su,Fa,au,nu,Ua,ou,lu,Ja,pu,cu,za,iu,ru,Va,uu,du,Ka,ku,fu,Qa,hu,vu,el,he,dm=`<code class="language-typescript"><span class="token comment">// /src/blog/[slug]/+page.ts file</span>
<span class="token keyword">function</span> <span class="token function">load</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> params <span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>params<span class="token punctuation">.</span>slug<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// will print whatever comes after /blog/ in the url</span>
<span class="token punctuation">&#125;</span></code>`,sl,Z,mu,Xa,yu,wu,Za,bu,gu,al,ve,km=`<code class="language-typescript"><span class="token keyword">import</span> <span class="token keyword">type</span> <span class="token punctuation">&#123;</span> PageLoad <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'./$types'</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">const</span> load <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">&#123;</span> params <span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">const</span> <span class="token punctuation">&#123;</span> slug <span class="token punctuation">&#125;</span> <span class="token operator">=</span> params<span class="token punctuation">;</span>
	<span class="token keyword">try</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">const</span> post <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">&#96;</span><span class="token string">/src/routes/blog/post-</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>slug<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">.md</span><span class="token template-punctuation string">&#96;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">return</span> <span class="token punctuation">&#123;</span>
			content<span class="token operator">:</span> post<span class="token punctuation">.</span>default
		<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span> <span class="token punctuation">&#123;</span>
			error<span class="token operator">:</span> <span class="token string">'Could not load page'</span>
		<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span> satisfies PageLoad<span class="token punctuation">;</span></code>`,nl,Tt,Eu,tn,_u,Du,ol,y,Ou,en,Cu,Pu,sn,xu,ju,an,Au,Tu,nn,Wu,Iu,on,Hu,Su,ln,Ru,Lu,pn,qu,Mu,cn,Nu,Bu,rn,Yu,$u,ll,Wt,Gu,un,Fu,Uu,pl,me,fm=`<code class="language-svelte"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ts<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">
	<span class="token keyword">import</span> type <span class="token punctuation">&#123;</span> PageData <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'./$types'</span><span class="token punctuation">;</span>
	<span class="token keyword">export</span> <span class="token keyword">let</span> <span class="token literal-property property">data</span><span class="token operator">:</span> PageData<span class="token punctuation">;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">svelte:</span>component</span> <span class="token attr-name">this=</span><span class="token language-javascript"><span class="token punctuation">&#123;</span>data<span class="token punctuation">.</span>content<span class="token punctuation">&#125;</span></span> <span class="token punctuation">/></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code>`,cl,Ue,Ju,il,It,Ht,dn,zu,rl,St,Vu,ye,Ku,Qu,ul,we,Xu,be,Zu,dl,Rt,Lt,kn,td,kl,Je,ed,fl,ge,hm='<code class="language-bash"><span class="token function">npm</span> i <span class="token parameter variable">-D</span> @sveltejs/adapter-static@next</code>',hl,ze,sd,vl,Ee,vm=`<code class="language-javascript"><span class="token keyword">import</span> staticAdapter <span class="token keyword">from</span> <span class="token string">'@sveltejs/adapter-static'</span><span class="token punctuation">;</span>

<span class="token comment">/** @type &#123;import('@sveltejs/kit').Config&#125; */</span>
<span class="token keyword">const</span> config <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
	<span class="token literal-property property">extensions</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'.svelte'</span><span class="token punctuation">,</span> <span class="token operator">...</span>mdsvexConfig<span class="token punctuation">.</span>extensions<span class="token punctuation">]</span><span class="token punctuation">,</span>
	<span class="token comment">// Consult https://github.com/sveltejs/svelte-preprocess</span>
	<span class="token comment">// for more information about preprocessors</span>
	<span class="token literal-property property">preprocess</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token function">mdsvex</span><span class="token punctuation">(</span>mdsvexConfig<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">preprocess</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>

	<span class="token literal-property property">kit</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
		<span class="token literal-property property">adapter</span><span class="token operator">:</span> <span class="token function">staticAdapter</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
			<span class="token comment">// default options are shown</span>
			<span class="token literal-property property">pages</span><span class="token operator">:</span> <span class="token string">'build'</span><span class="token punctuation">,</span>
			<span class="token literal-property property">assets</span><span class="token operator">:</span> <span class="token string">'build'</span><span class="token punctuation">,</span>
			<span class="token literal-property property">fallback</span><span class="token operator">:</span> <span class="token keyword">null</span>
		<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code>`,ml,qt,Mt,fn,ad,yl,Nt,nd,hn,od,ld,wl,_e,mm=`<code class="language-undefined">npm run build
cd build
npx serve</code>`,bl,B,pd,vn,cd,id,mn,rd,ud,yn,dd,kd,gl,Bt,Yt,wn,fd,El,$t,hd,bn,vd,md,_l,pt,gn,yd,wd,En,bd,gd,Dl,De,ym='<code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> <span class="token parameter variable">-D</span> gh-pages</code>',Ol,Ve,Ed,Cl,Oe,wm=`<code class="language-json"><span class="token property">"scripts"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
	<span class="token property">"deploy"</span><span class="token operator">:</span> <span class="token string">"npm run build &amp;&amp; gh-pages -b master -d build -t"</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
</code>`,Pl,Y,_d,_n,Dd,Od,Dn,Cd,Pd,On,xd,jd,xl,Ce,Cn,Ad,Td,jl,tt,Gt,Pn,Wd,xn,Id,Hd,Al,j,Sd,jn,Rd,Ld,An,qd,Md,Tn,Nd,Bd,Pe,Yd,$d,xe,Gd,Fd,Tl,I,Ud,Wn,Jd,zd,In,Vd,Kd,Hn,Qd,Xd,Sn,Zd,tk,Wl,O,ek,Rn,sk,ak,Ln,nk,ok,qn,lk,pk,Mn,ck,ik,Nn,rk,uk,Bn,dk,kk,Il,Ke,fk,Hl,je,hk,Ae,vk,Qe;const mk=at[1].default,M=Qm(mk,at,at[2],null);return{c(){b=o("p"),T=a("After reading this post, you should be able to make a blog using svelte kit, and host it on github or any other hosting service of your choice. You can write your posts as markdown files."),U=u(),C=o("p"),J=a("This post assumes that you know what svelte is and also what hosting a static site means. You can read more about svelte here - "),h=o("a"),R=a("https://svelte.dev."),Te=a(" And more about svelte kit here - "),Vt=o("a"),zl=a("https://kit.svelte.dev"),Vl=a("."),Jn=u(),We=o("p"),Kl=a("I recently moved by teeny tiny unmaintained blog from gatsby to svelte kit. Removing gatsby removed a lot of complexity which comes with gatsby. I no longer understood what was going on under the hood and was too scared to upgrade gatsby."),zn=u(),Ie=o("p"),Ql=a("Switching to svelte-kit was relatively straight forward except for a few quirks. The quirks mainly had to do with rendering markdown as html and figuring out how to publish the final site through github."),Vn=u(),rt=o("p"),Xl=a("If you don’t want to read the whole article, you can checkout the final code here - "),Kt=o("a"),Zl=a("https://github.com/mukeshsoni/mukeshsoni.github.io/tree/svelte"),tp=a("."),Kn=u(),ut=o("h3"),dt=o("a"),ns=o("span"),ep=a("Step 1 - Setup svelte kit template"),Qn=u(),kt=o("p"),sp=a("You can get started with svelte kit template using their "),os=o("code"),ap=a("npm init"),np=a(" command -"),Xn=u(),Qt=o("pre"),Zn=u(),nt=o("p"),op=a("When you run "),ls=o("code"),lp=a("npm create svelte@latest <your_project_name>"),pp=a(", you will be asked a set of questions. E.g. Do you want to enable typescript in this project? Once you answer all the questions, the command will create a set of files in the "),ps=o("your_project_name"),cp=a("folder. Think of the command as a helper which chooses the right template for you."),to=u(),ft=o("p"),ip=a("Once the "),cs=o("code"),rp=a("create"),up=a(" command creates the files, you can go inside the folder and install the npm dependencies. The create command does not install the dependencies. It only specifies the list of dependencies in the package.json file."),eo=u(),P=o("p"),dp=a("After the dependencies are installed, you can invoke the "),is=o("code"),kp=a("dev"),fp=a(" script which is already defined in your "),rs=o("code"),hp=a("package.json"),vp=a(" file by the "),us=o("code"),mp=a("create"),yp=a(" command - "),ds=o("code"),wp=a("npm run dev -- --open"),bp=a(". This should start a localhost server on port 5273. Whatever port it starts the server on will be shown on the terminal. "),ks=o("code"),gp=a("sveltekit"),Ep=a(" uses vite for building and serving the site."),so=u(),ht=o("h3"),vt=o("a"),fs=o("span"),_p=a("Step 2 - Add mdsvex to convert markdown files to html"),ao=u(),Xt=o("pre"),no=u(),V=o("p"),Dp=a("Add "),hs=o("code"),Op=a("mdsvex"),Cp=a(" preprocessor to your "),vs=o("code"),Pp=a("svelte.config.js"),xp=a(" file -"),oo=u(),Zt=o("pre"),lo=u(),He=o("p"),jp=a("You will have to restart the dev server for mdsvex preprocessor to kick in."),po=u(),D=o("p"),Ap=a("We have also added link to blog post layout in "),ms=o("code"),Tp=a("layout"),Wp=a(" option passed to "),ys=o("code"),Ip=a("mdsvex"),Hp=a(" function. This tells "),ws=o("code"),Sp=a("mdsvex"),Rp=a(" to use the "),bs=o("code"),Lp=a("post_layout.svelte"),qp=a(" layout for all the stuff rendered inside "),gs=o("code"),Mp=a("blog"),Np=a(" route. My "),Es=o("code"),Bp=a("post_layout.svelte"),Yp=a(" file looks like this -"),co=u(),te=o("pre"),io=u(),L=o("p"),_s=o("code"),$p=a("PostHeader"),Gp=a(" and "),Ds=o("code"),Fp=a("Bio"),Up=a(" are regular svelte component which are present inside "),Os=o("code"),Jp=a("src/lib"),zp=a(" folder. "),Cs=o("code"),Vp=a("<slot/>"),Kp=a(" is where the content of our markdown file will be put."),ro=u(),x=o("p"),Qp=a("Try adding a markdown file called "),Ps=o("code"),Xp=a("+page.md"),Zp=a(" somewhere in your "),xs=o("code"),tc=a("routes"),ec=a(" folder and going to the route pointed by the folder inside the "),js=o("code"),sc=a("routes"),ac=a(" folder. E.g. Add a file "),As=o("code"),nc=a("src/routes/my-awesome-post/+page.md"),oc=a(" and put some content in there. You should be able to view that content on "),Ts=o("code"),lc=a("localhost:5173/my-awesome-post"),pc=a("."),uo=u(),W=o("p"),cc=a("Note that simply adding a markdown file with any name will not work. "),Ws=o("code"),ic=a("sveltekit"),rc=a(" after "),Is=o("code"),uc=a("v1.0.0"),dc=a(" only treats files starting with "),Hs=o("code"),kc=a("+page"),fc=a(" or "),Ss=o("code"),hc=a("+server"),vc=a(" for routing purposes. This will give us some problem when trying to render our blog posts dynamically."),ko=u(),mt=o("h3"),yt=o("a"),Rs=o("span"),mc=a("Step 3 - Show a list of all blog posts on home page"),fo=u(),Se=o("p"),yc=a("We want to collect all our markdown files and show the list of blog posts on the home page or on some other path, so that our users can browse the super amazing content we publish."),ho=u(),K=o("p"),wc=a("We will create an api endpoint to get the list of posts. We will use "),Ls=o("code"),bc=a("import.meta.glob"),gc=a(" to get the metadata for each of the markdown files. . If we try to get the metadata using a glob pattern in our "),qs=o("code"),Ec=a("routes/+page.svelte"),_c=a(" file, it will load all the blog posts upfront too. Which might be a disaster if we have too many blogs posts or our posts are heavy."),vo=u(),v=o("p"),Dc=a(`So we create an endpoint which returns the metadata for blogs in
`),Ms=o("code"),Oc=a("/src/routes/api/posts/+server.ts"),Cc=a(" file. Just like sveltekit automatically treats any file called "),Ns=o("code"),Pc=a("+page.svelte"),xc=a(" as a route file when it’s inside the "),Bs=o("code"),jc=a("routes"),Ac=a(" folder, it treats "),Ys=o("code"),Tc=a("+server.ts"),Wc=a(" (or "),$s=o("code"),Ic=a("+server.js"),Hc=a(") file as a server endpoint. We can define a function inside this file which might then respond to a "),Gs=o("code"),Sc=a("GET"),Rc=a(" or "),Fs=o("code"),Lc=a("POST"),qc=a(" or "),Us=o("code"),Mc=a("DELETE"),Nc=a(" or "),Js=o("code"),Bc=a("UPDATE"),Yc=a(" http request. In our case we need it to respond to a "),zs=o("code"),$c=a("GET"),Gc=a(" request."),mo=u(),ee=o("pre"),yo=u(),Re=o("p"),Fc=a("A few things to keep in mind for the above endpoint -"),wo=u(),wt=o("ul"),z=o("li"),Uc=a("We don’t return our object directly but whatever "),Vs=o("code"),Jc=a("json"),zc=a(" function exposed by sveltekit returns. If you look at the docs, it will tell you to return "),Ks=o("code"),Vc=a("new Response('your response')"),Kc=a(". But that doesn’t work for a json response. The "),Qs=o("code"),Qc=a("json"),Xc=a(" utility makes sure that the right headers are set for json response type."),Zc=u(),se=o("li"),ti=a("We make sure that our GET function adheres to "),Xs=o("code"),ei=a("RequestHandler"),si=a(" type which helps us catch any type related bugs."),bo=u(),m=o("p"),ai=a("We will now fetch these posts using the endpoint we created. We create a "),Zs=o("code"),ni=a("+page.ts"),oi=a(" file inside "),ta=o("code"),li=a("routes"),pi=a(" folder, which is executed by sveltekit on both server and client before it renders "),ea=o("code"),ci=a("+page.svelte"),ii=a(" file. The "),sa=o("code"),ri=a("+page.ts"),ui=a(" file will export a "),aa=o("code"),di=a("load"),ki=a(" function which can return whatever it likes. Whatever is returned from the "),na=o("code"),fi=a("load"),hi=a(" function can then be accessed in "),oa=o("code"),vi=a("+page.svelte"),mi=a(" as a variable named "),la=o("code"),yi=a("data"),wi=a(" by exporting it - "),pa=o("code"),bi=a("export let data"),gi=a("."),go=u(),ae=o("pre"),Eo=u(),Le=o("p"),Ei=a(`Does having an endpoint mean that we need a server too? Ans - No. When we run
the build script, which runs the static adapter, the endpoint is called and the
post metadata is resolved before the final output is produced.`),_o=u(),qe=o("p"),_i=a("Now, posts should have the list of posts with their metadata, as defined by you at the top of each post. E.g. If you have this at the top of a post -"),Do=u(),ne=o("pre"),Oo=u(),Me=o("p"),Di=a("That post’s metadata would be an object and look like this"),Co=u(),oe=o("pre"),Po=u(),Ne=o("p"),Oi=a("You can then render whatever metadata you want to."),xo=u(),le=o("pre"),jo=u(),bt=o("p"),Ci=a("Inside "),ca=o("code"),Pi=a("+page.svelte"),xi=a(" file"),Ao=u(),pe=o("pre"),To=u(),gt=o("h3"),Et=o("a"),ia=o("span"),ji=a("Step 4 - Add a layout component for the blog"),Wo=u(),Q=o("p"),Ai=a("If you have a header which you want to show for each page in the blog/site, you can add that as a layout component. For e.g. adding "),ra=o("code"),Ti=a("routes/+layout.svelte"),Wi=a(" file, with a "),M&&M.c(),Ii=a(" component in it, will wrap every route content inside this layout component. Example layout component -"),Io=u(),ce=o("pre"),Ho=u(),ie=o("p"),Hi=a("You can read more about svelte kit layout components here - "),re=o("a"),Si=a("https://kit.svelte.dev/docs/routing#layout"),So=u(),_t=o("h3"),Dt=o("a"),ua=o("span"),Ri=a("Step 5 - Add a layout component for individual blog posts"),Ro=u(),Be=o("p"),Li=a("This was trickier than i thought. At least my first attempt. And when i found the solution, it was not as tricky as i thought. At least not as tricky as trying to read this paragraph."),Lo=u(),N=o("p"),qi=a("I thought i would utilize svelte-kit’s layout capability, with "),da=o("code"),Mi=a("+layout.svelte"),Ni=a(" file in the blog folder. But I wanted the layout component for blog post to take care of the post title. My first attempt was to use the "),ka=o("code"),Bi=a("load"),Yi=a(" function provided by "),fa=o("code"),$i=a("svelte-kit"),Gi=a(" and then fetching the metadata for the post by importing that file. That worked during development but didn’t work with static adapter. Since i was importing file dynamically, it needed a server."),qo=u(),ot=o("p"),Fi=a("Then i found out about layouts in mdsvex. All i had to do was add a svelte component somewhere, say "),ha=o("code"),Ui=a("src/routes/blog"),Ji=a(" folder, and then point mdsvex to that file. That is done in "),va=o("code"),zi=a("mdsvex.config.cjs"),Mo=u(),ue=o("pre"),No=u(),Ot=o("p"),Vi=a("And the "),ma=o("code"),Ki=a("post_layout.svelte"),Qi=a(" component looked like this"),Bo=u(),de=o("pre"),Yo=u(),Ye=o("p"),Xi=a("Now all my blog posts had a title and date at the top. The layout component also enabled styling the container for each post, if i wanted to."),$o=u(),lt=o("p"),Zi=a("More about "),ya=o("code"),tr=a("mdsvex"),er=a(" layout components here - "),ke=o("a"),sr=a("https://mdsvex.pngwn.io/docs#layouts"),Go=u(),Ct=o("h3"),Pt=o("a"),wa=o("span"),ar=a("Step 6 - Rendering individual blog post"),Fo=u(),g=o("p"),nr=a("Let’s say we have 20 odd blog posts on our blog. Each in their own markdown file. And we want to render them on a route like "),ba=o("code"),or=a("<my-site>.com/blog/blog-post-title"),lr=a(". We cannot just create a file named "),ga=o("code"),pr=a("blog-post-title.md"),cr=a(" inside "),Ea=o("code"),ir=a("src/routes/blog/"),rr=a(" folder and be done. Because those files will not be treated as routes by "),_a=o("code"),ur=a("sveltekit"),dr=a(". Remember, "),Da=o("code"),kr=a("sveltekit"),fr=a(" only treats a file as a route if it starts with "),Oa=o("code"),hr=a("+page"),vr=a(". So one way to render our blog posts would be to create one folder per blog post and then create a "),Ca=o("code"),mr=a("+page.md"),yr=a(" file inside each of those folders which then contains the post content. E.g."),Uo=u(),fe=o("pre"),Jo=u(),X=o("p"),wr=a("Now we should be able to access "),Pa=o("code"),br=a("localhost:5173/blog/blog-post-title"),gr=a(" or "),xa=o("code"),Er=a("localhost:5173/blog/asinite-personal-details-post"),_r=a("."),zo=u(),$e=o("p"),Dr=a("I actually like this technique since most of us don’t write too many posts. I would bet most of us write less than 10 blog posts in our life time. And this is a perfectly file way to render those mostly asinine posts."),Vo=u(),Ge=o("p"),Or=a("But we are certainly taking this much pain to render a super duper simple blog post because we like writing posts. We are doing it because we want to have some fun :). Let’s look at another way to render the same blog posts in a more dynamic way."),Ko=u(),xt=o("h4"),jt=o("a"),ja=o("span"),Cr=a("Step 6.2 - Rendering blog post dynamically"),Qo=u(),Fe=o("p"),Pr=a("Here’s what we want to do -"),Xo=u(),At=o("ul"),Aa=o("li"),xr=a("Put all our post related markdown files in one folder"),jr=u(),Ta=o("li"),Ar=a("Write a script which then dynamically looks for the required file from the url, picks it up and renders it."),Zo=u(),q=o("p"),Wa=o("code"),Tr=a("sveltekit"),Wr=a(" supports something called dynamic routes for scenarios where we don’t have fixed routes like "),Ia=o("code"),Ir=a("/about"),Hr=a(" or "),Ha=o("code"),Sr=a("/home"),Rr=a(" etc. We want our "),Sa=o("code"),Lr=a("/blog/blog-title"),qr=a(" routes to automagically pick the right content."),tl=u(),k=o("p"),Ra=o("code"),Mr=a("sveltekit"),Nr=a(" allows us to create a folder whose name looks like this "),La=o("code"),Br=a("[some-name]"),Yr=a(" inside the "),qa=o("code"),$r=a("routes"),Gr=a(" folder. When "),Ma=o("code"),Fr=a("sveltekit"),Ur=a(" comes across such a folder, it will then forwards all request coming to that path, to the "),Na=o("code"),Jr=a("+page.svelte"),zr=a(" file inside that folder. E.g. if we create a folder like "),Ba=o("code"),Vr=a("src/routes/blog/[slug]/"),Kr=a(" then "),Ya=o("code"),Qr=a("sveltekit"),Xr=a(" will render the "),$a=o("code"),Zr=a("+page.svelte"),tu=a(" file inside "),Ga=o("code"),eu=a("src/routes/blog/[slug]/"),su=a(" folder for request to "),Fa=o("code"),au=a("/blog/abc"),nu=a(" or "),Ua=o("code"),ou=a("/blog/new-post"),lu=a(". It will use the name "),Ja=o("code"),pu=a("slug"),cu=a(" inside the square brackets ("),za=o("code"),iu=a("[]"),ru=a(") to pass as params property to "),Va=o("code"),uu=a("load"),du=a(" function in "),Ka=o("code"),ku=a("+page.ts"),fu=a(" file inside "),Qa=o("code"),hu=a("[slug]"),vu=a(" folder. E.g."),el=u(),he=o("pre"),sl=u(),Z=o("p"),mu=a("We will now use the "),Xa=o("code"),yu=a("load"),wu=a(" function in "),Za=o("code"),bu=a("+page.ts"),gu=a(" to load the blog post asked for"),al=u(),ve=o("pre"),nl=u(),Tt=o("p"),Eu=a("We use "),tn=o("code"),_u=a("import"),Du=a(" to import the intended blog post. If we don’t file it in our file system, we return an error and hopefully also render an error page."),ol=u(),y=o("p"),Ou=a("When use use "),en=o("code"),Cu=a("import"),Pu=a(" to get our "),sn=o("code"),xu=a("md"),ju=a(" file, it is automatically passed through "),an=o("code"),Au=a("mdsvex"),Tu=a(" which then returns a svelte component for the imported "),nn=o("code"),Wu=a("md"),Iu=a(" file. We return that svelte component as "),on=o("code"),Hu=a("content"),Su=a(" property from whatever object is returned from "),ln=o("code"),Ru=a("load"),Lu=a(" function. This "),pn=o("code"),qu=a("svelte"),Mu=a(" component returned by "),cn=o("code"),Nu=a("import"),Bu=a(" cannot be render directly. We need to use "),rn=o("code"),Yu=a("<svelte:compoennt>"),$u=a(" directive to render a svelte component dynamically."),ll=u(),Wt=o("p"),Gu=a("We do that inside "),un=o("code"),Fu=a("src/blog/[slug]/+page.svelte"),Uu=a(" file -"),pl=u(),me=o("pre"),cl=u(),Ue=o("p"),Ju=a("Now we should be in a good place to render all our blog posts dynamically. Not that it matters."),il=u(),It=o("h3"),Ht=o("a"),dn=o("span"),zu=a("Step 7 - Hosting the blog on github"),rl=u(),St=o("p"),Vu=a("Github allows static site hosting in 2 ways - either as a user site or as a project site. You can read more about github hosting "),ye=o("a"),Ku=a("here"),Qu=a(". I have my site hosted as a user site. Which meant i had to push the output of the static adapter to my master branch. But what is this static adapter thingy?"),ul=u(),we=o("p"),Xu=a("svelte kit provides various adapters to convert your site in ways which are suited for your deployment environemnt. In our case, we want the site to be hosted on github (or netlify etc.) as a static site. No server. Just html pages with some css and js. For that, we use the "),be=o("a"),Zu=a("svelte-kit static adapter"),dl=u(),Rt=o("h4"),Lt=o("a"),kn=o("span"),td=a("Install svelte static adapter"),kl=u(),Je=o("p"),ed=a("We can install the static adapter from npm."),fl=u(),ge=o("pre"),hl=u(),ze=o("p"),sd=a("We then have to change the svelte config to tell it to use static adapter -"),vl=u(),Ee=o("pre"),ml=u(),qt=o("h4"),Mt=o("a"),fn=o("span"),ad=a("Generate content to host as static site"),yl=u(),Nt=o("p"),nd=a("Once we have setup the static adapter, calling "),hn=o("code"),od=a("npm run build"),ld=a(" on the terminal should generate the build folder."),wl=u(),_e=o("pre"),bl=u(),B=o("p"),pd=a("We can test the build by going inside the build folder and using "),vn=o("code"),cd=a("serve"),id=a(" or any other server to serve the files. "),mn=o("code"),rd=a("serve"),ud=a(" starts a server on "),yn=o("code"),dd=a("localhost:5000"),kd=a(" by default."),gl=u(),Bt=o("h4"),Yt=o("a"),wn=o("span"),fd=a("Install gh-pages and deploy site"),El=u(),$t=o("p"),hd=a("Now that we have the built files, we have to push them to the master branch, for user site, or to the "),bn=o("code"),vd=a("gh-pages"),md=a(" branch for a project site. Once we update the branch and push to github, github will then deploy the files for us and we should be able to see our site come alive."),_l=u(),pt=o("p"),gn=o("code"),yd=a("gh-pages"),wd=a(" is a handy tool to push the contents of any folder to any other branch in your repository. Installing "),En=o("code"),bd=a("gh-pages"),gd=a(" is straight forward with npm."),Dl=u(),De=o("pre"),Ol=u(),Ve=o("p"),Ed=a("I then added an npm script to make deployment easy -"),Cl=u(),Oe=o("pre"),Pl=u(),Y=o("p"),_d=a("If you are deploying a project site, you can remove the "),_n=o("code"),Dd=a("-b master"),Od=a(" flag from gh-pages command. "),Dn=o("code"),Cd=a("gh-pages"),Pd=a(" pushes to "),On=o("code"),xd=a("gh-pages"),jd=a(" branch by default."),xl=u(),Ce=o("p"),Cn=o("code"),Ad=a("gh-pages"),Td=a(" will also push the branch to remote. So if all goes well, you should be able to see your site live after some time."),jl=u(),tt=o("h4"),Gt=o("a"),Pn=o("span"),Wd=a("Fixing _apps/"),xn=o("em"),Id=a(".js and _apps/"),Hd=a(".css paths returning 404 on the deployed site"),Al=u(),j=o("p"),Sd=a("After you deploy your site by pushing the github branch, you will probably see your site looking a little different to what it looks on your development environment. That’s because some of the js and css is missing. If you open the devtools and then the network tab, a number of js and css files might be returning 404. All of those would be serving files from inside the "),jn=o("code"),Rd=a("__app"),Ld=a(" folder. That is because github does not deploy the "),An=o("code"),qd=a("__app"),Md=a(" folder. All folders starting with an "),Tn=o("code"),Nd=a("_"),Bd=a(" are to be ignored for sites built with "),Pe=o("a"),Yd=a("jekyll"),$d=a(". Read more about it "),xe=o("a"),Gd=a("here"),Fd=a("."),Tl=u(),I=o("p"),Ud=a("To get around the problem, we have to add an empty file named "),Wn=o("code"),Jd=a(".nojekyll"),zd=a(" to our static folder. "),In=o("code"),Vd=a("npm run build"),Kd=a(" will then copy that file to the "),Hn=o("code"),Qd=a("build"),Xd=a(" folder and "),Sn=o("code"),Zd=a("gh-pages"),tk=a(" will then push that file to the required github branch."),Wl=u(),O=o("p"),ek=a("You might find that it still doesn’t work. Mainly because "),Rn=o("code"),sk=a("gh-pages"),ak=a(" is not pushing the "),Ln=o("code"),nk=a(".nojekyll"),ok=a(" file to the github branch, because "),qn=o("code"),lk=a("gh-pages"),pk=a(" tool ignores all files starting with a "),Mn=o("code"),ck=a("."),ik=a(" (dot). We can tell the "),Nn=o("code"),rk=a("gh-pages"),uk=a(" tool to also push dot files from the build folder by using the "),Bn=o("code"),dk=a("-t"),kk=a(" flag. If you copied the deploy command from above, it’s already there."),Il=u(),Ke=o("p"),fk=a("That is it! Go ahead and add a lot of blog posts as markdown files and deploy to your site. I am kidding. Building the blog with svelte kit was fun though."),Hl=u(),je=o("p"),hk=a("Link to final code - "),Ae=o("a"),vk=a("https://github.com/mukeshsoni/mukeshsoni.github.io/tree/svelte"),this.h()},l(t){b=l(t,"P",{});var c=p(b);T=n(c,"After reading this post, you should be able to make a blog using svelte kit, and host it on github or any other hosting service of your choice. You can write your posts as markdown files."),c.forEach(s),U=d(t),C=l(t,"P",{});var Xe=p(C);J=n(Xe,"This post assumes that you know what svelte is and also what hosting a static site means. You can read more about svelte here - "),h=l(Xe,"A",{href:!0,rel:!0});var Hk=p(h);R=n(Hk,"https://svelte.dev."),Hk.forEach(s),Te=n(Xe," And more about svelte kit here - "),Vt=l(Xe,"A",{href:!0,rel:!0});var Sk=p(Vt);zl=n(Sk,"https://kit.svelte.dev"),Sk.forEach(s),Vl=n(Xe,"."),Xe.forEach(s),Jn=d(t),We=l(t,"P",{});var Rk=p(We);Kl=n(Rk,"I recently moved by teeny tiny unmaintained blog from gatsby to svelte kit. Removing gatsby removed a lot of complexity which comes with gatsby. I no longer understood what was going on under the hood and was too scared to upgrade gatsby."),Rk.forEach(s),zn=d(t),Ie=l(t,"P",{});var Lk=p(Ie);Ql=n(Lk,"Switching to svelte-kit was relatively straight forward except for a few quirks. The quirks mainly had to do with rendering markdown as html and figuring out how to publish the final site through github."),Lk.forEach(s),Vn=d(t),rt=l(t,"P",{});var Sl=p(rt);Xl=n(Sl,"If you don’t want to read the whole article, you can checkout the final code here - "),Kt=l(Sl,"A",{href:!0,rel:!0});var qk=p(Kt);Zl=n(qk,"https://github.com/mukeshsoni/mukeshsoni.github.io/tree/svelte"),qk.forEach(s),tp=n(Sl,"."),Sl.forEach(s),Kn=d(t),ut=l(t,"H3",{id:!0});var yk=p(ut);dt=l(yk,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var Mk=p(dt);ns=l(Mk,"SPAN",{class:!0}),p(ns).forEach(s),Mk.forEach(s),ep=n(yk,"Step 1 - Setup svelte kit template"),yk.forEach(s),Qn=d(t),kt=l(t,"P",{});var Rl=p(kt);sp=n(Rl,"You can get started with svelte kit template using their "),os=l(Rl,"CODE",{});var Nk=p(os);ap=n(Nk,"npm init"),Nk.forEach(s),np=n(Rl," command -"),Rl.forEach(s),Xn=d(t),Qt=l(t,"PRE",{class:!0});var bm=p(Qt);bm.forEach(s),Zn=d(t),nt=l(t,"P",{});var Yn=p(nt);op=n(Yn,"When you run "),ls=l(Yn,"CODE",{});var Bk=p(ls);lp=n(Bk,"npm create svelte@latest <your_project_name>"),Bk.forEach(s),pp=n(Yn,", you will be asked a set of questions. E.g. Do you want to enable typescript in this project? Once you answer all the questions, the command will create a set of files in the "),ps=l(Yn,"YOUR_PROJECT_NAME",{});var Yk=p(ps);cp=n(Yk,"folder. Think of the command as a helper which chooses the right template for you."),Yk.forEach(s),Yn.forEach(s),to=d(t),ft=l(t,"P",{});var Ll=p(ft);ip=n(Ll,"Once the "),cs=l(Ll,"CODE",{});var $k=p(cs);rp=n($k,"create"),$k.forEach(s),up=n(Ll," command creates the files, you can go inside the folder and install the npm dependencies. The create command does not install the dependencies. It only specifies the list of dependencies in the package.json file."),Ll.forEach(s),eo=d(t),P=l(t,"P",{});var $=p(P);dp=n($,"After the dependencies are installed, you can invoke the "),is=l($,"CODE",{});var Gk=p(is);kp=n(Gk,"dev"),Gk.forEach(s),fp=n($," script which is already defined in your "),rs=l($,"CODE",{});var Fk=p(rs);hp=n(Fk,"package.json"),Fk.forEach(s),vp=n($," file by the "),us=l($,"CODE",{});var Uk=p(us);mp=n(Uk,"create"),Uk.forEach(s),yp=n($," command - "),ds=l($,"CODE",{});var Jk=p(ds);wp=n(Jk,"npm run dev -- --open"),Jk.forEach(s),bp=n($,". This should start a localhost server on port 5273. Whatever port it starts the server on will be shown on the terminal. "),ks=l($,"CODE",{});var zk=p(ks);gp=n(zk,"sveltekit"),zk.forEach(s),Ep=n($," uses vite for building and serving the site."),$.forEach(s),so=d(t),ht=l(t,"H3",{id:!0});var wk=p(ht);vt=l(wk,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var Vk=p(vt);fs=l(Vk,"SPAN",{class:!0}),p(fs).forEach(s),Vk.forEach(s),_p=n(wk,"Step 2 - Add mdsvex to convert markdown files to html"),wk.forEach(s),ao=d(t),Xt=l(t,"PRE",{class:!0});var gm=p(Xt);gm.forEach(s),no=d(t),V=l(t,"P",{});var Ze=p(V);Dp=n(Ze,"Add "),hs=l(Ze,"CODE",{});var Kk=p(hs);Op=n(Kk,"mdsvex"),Kk.forEach(s),Cp=n(Ze," preprocessor to your "),vs=l(Ze,"CODE",{});var Qk=p(vs);Pp=n(Qk,"svelte.config.js"),Qk.forEach(s),xp=n(Ze," file -"),Ze.forEach(s),oo=d(t),Zt=l(t,"PRE",{class:!0});var Em=p(Zt);Em.forEach(s),lo=d(t),He=l(t,"P",{});var Xk=p(He);jp=n(Xk,"You will have to restart the dev server for mdsvex preprocessor to kick in."),Xk.forEach(s),po=d(t),D=l(t,"P",{});var H=p(D);Ap=n(H,"We have also added link to blog post layout in "),ms=l(H,"CODE",{});var Zk=p(ms);Tp=n(Zk,"layout"),Zk.forEach(s),Wp=n(H," option passed to "),ys=l(H,"CODE",{});var tf=p(ys);Ip=n(tf,"mdsvex"),tf.forEach(s),Hp=n(H," function. This tells "),ws=l(H,"CODE",{});var ef=p(ws);Sp=n(ef,"mdsvex"),ef.forEach(s),Rp=n(H," to use the "),bs=l(H,"CODE",{});var sf=p(bs);Lp=n(sf,"post_layout.svelte"),sf.forEach(s),qp=n(H," layout for all the stuff rendered inside "),gs=l(H,"CODE",{});var af=p(gs);Mp=n(af,"blog"),af.forEach(s),Np=n(H," route. My "),Es=l(H,"CODE",{});var nf=p(Es);Bp=n(nf,"post_layout.svelte"),nf.forEach(s),Yp=n(H," file looks like this -"),H.forEach(s),co=d(t),te=l(t,"PRE",{class:!0});var _m=p(te);_m.forEach(s),io=d(t),L=l(t,"P",{});var ct=p(L);_s=l(ct,"CODE",{});var of=p(_s);$p=n(of,"PostHeader"),of.forEach(s),Gp=n(ct," and "),Ds=l(ct,"CODE",{});var lf=p(Ds);Fp=n(lf,"Bio"),lf.forEach(s),Up=n(ct," are regular svelte component which are present inside "),Os=l(ct,"CODE",{});var pf=p(Os);Jp=n(pf,"src/lib"),pf.forEach(s),zp=n(ct," folder. "),Cs=l(ct,"CODE",{});var cf=p(Cs);Vp=n(cf,"<slot/>"),cf.forEach(s),Kp=n(ct," is where the content of our markdown file will be put."),ct.forEach(s),ro=d(t),x=l(t,"P",{});var G=p(x);Qp=n(G,"Try adding a markdown file called "),Ps=l(G,"CODE",{});var rf=p(Ps);Xp=n(rf,"+page.md"),rf.forEach(s),Zp=n(G," somewhere in your "),xs=l(G,"CODE",{});var uf=p(xs);tc=n(uf,"routes"),uf.forEach(s),ec=n(G," folder and going to the route pointed by the folder inside the "),js=l(G,"CODE",{});var df=p(js);sc=n(df,"routes"),df.forEach(s),ac=n(G," folder. E.g. Add a file "),As=l(G,"CODE",{});var kf=p(As);nc=n(kf,"src/routes/my-awesome-post/+page.md"),kf.forEach(s),oc=n(G," and put some content in there. You should be able to view that content on "),Ts=l(G,"CODE",{});var ff=p(Ts);lc=n(ff,"localhost:5173/my-awesome-post"),ff.forEach(s),pc=n(G,"."),G.forEach(s),uo=d(t),W=l(t,"P",{});var et=p(W);cc=n(et,"Note that simply adding a markdown file with any name will not work. "),Ws=l(et,"CODE",{});var hf=p(Ws);ic=n(hf,"sveltekit"),hf.forEach(s),rc=n(et," after "),Is=l(et,"CODE",{});var vf=p(Is);uc=n(vf,"v1.0.0"),vf.forEach(s),dc=n(et," only treats files starting with "),Hs=l(et,"CODE",{});var mf=p(Hs);kc=n(mf,"+page"),mf.forEach(s),fc=n(et," or "),Ss=l(et,"CODE",{});var yf=p(Ss);hc=n(yf,"+server"),yf.forEach(s),vc=n(et," for routing purposes. This will give us some problem when trying to render our blog posts dynamically."),et.forEach(s),ko=d(t),mt=l(t,"H3",{id:!0});var bk=p(mt);yt=l(bk,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var wf=p(yt);Rs=l(wf,"SPAN",{class:!0}),p(Rs).forEach(s),wf.forEach(s),mc=n(bk,"Step 3 - Show a list of all blog posts on home page"),bk.forEach(s),fo=d(t),Se=l(t,"P",{});var bf=p(Se);yc=n(bf,"We want to collect all our markdown files and show the list of blog posts on the home page or on some other path, so that our users can browse the super amazing content we publish."),bf.forEach(s),ho=d(t),K=l(t,"P",{});var ts=p(K);wc=n(ts,"We will create an api endpoint to get the list of posts. We will use "),Ls=l(ts,"CODE",{});var gf=p(Ls);bc=n(gf,"import.meta.glob"),gf.forEach(s),gc=n(ts," to get the metadata for each of the markdown files. . If we try to get the metadata using a glob pattern in our "),qs=l(ts,"CODE",{});var Ef=p(qs);Ec=n(Ef,"routes/+page.svelte"),Ef.forEach(s),_c=n(ts," file, it will load all the blog posts upfront too. Which might be a disaster if we have too many blogs posts or our posts are heavy."),ts.forEach(s),vo=d(t),v=l(t,"P",{});var w=p(v);Dc=n(w,`So we create an endpoint which returns the metadata for blogs in
`),Ms=l(w,"CODE",{});var _f=p(Ms);Oc=n(_f,"/src/routes/api/posts/+server.ts"),_f.forEach(s),Cc=n(w," file. Just like sveltekit automatically treats any file called "),Ns=l(w,"CODE",{});var Df=p(Ns);Pc=n(Df,"+page.svelte"),Df.forEach(s),xc=n(w," as a route file when it’s inside the "),Bs=l(w,"CODE",{});var Of=p(Bs);jc=n(Of,"routes"),Of.forEach(s),Ac=n(w," folder, it treats "),Ys=l(w,"CODE",{});var Cf=p(Ys);Tc=n(Cf,"+server.ts"),Cf.forEach(s),Wc=n(w," (or "),$s=l(w,"CODE",{});var Pf=p($s);Ic=n(Pf,"+server.js"),Pf.forEach(s),Hc=n(w,") file as a server endpoint. We can define a function inside this file which might then respond to a "),Gs=l(w,"CODE",{});var xf=p(Gs);Sc=n(xf,"GET"),xf.forEach(s),Rc=n(w," or "),Fs=l(w,"CODE",{});var jf=p(Fs);Lc=n(jf,"POST"),jf.forEach(s),qc=n(w," or "),Us=l(w,"CODE",{});var Af=p(Us);Mc=n(Af,"DELETE"),Af.forEach(s),Nc=n(w," or "),Js=l(w,"CODE",{});var Tf=p(Js);Bc=n(Tf,"UPDATE"),Tf.forEach(s),Yc=n(w," http request. In our case we need it to respond to a "),zs=l(w,"CODE",{});var Wf=p(zs);$c=n(Wf,"GET"),Wf.forEach(s),Gc=n(w," request."),w.forEach(s),mo=d(t),ee=l(t,"PRE",{class:!0});var Dm=p(ee);Dm.forEach(s),yo=d(t),Re=l(t,"P",{});var If=p(Re);Fc=n(If,"A few things to keep in mind for the above endpoint -"),If.forEach(s),wo=d(t),wt=l(t,"UL",{});var ql=p(wt);z=l(ql,"LI",{});var Ft=p(z);Uc=n(Ft,"We don’t return our object directly but whatever "),Vs=l(Ft,"CODE",{});var Hf=p(Vs);Jc=n(Hf,"json"),Hf.forEach(s),zc=n(Ft," function exposed by sveltekit returns. If you look at the docs, it will tell you to return "),Ks=l(Ft,"CODE",{});var Sf=p(Ks);Vc=n(Sf,"new Response('your response')"),Sf.forEach(s),Kc=n(Ft,". But that doesn’t work for a json response. The "),Qs=l(Ft,"CODE",{});var Rf=p(Qs);Qc=n(Rf,"json"),Rf.forEach(s),Xc=n(Ft," utility makes sure that the right headers are set for json response type."),Ft.forEach(s),Zc=d(ql),se=l(ql,"LI",{});var Ml=p(se);ti=n(Ml,"We make sure that our GET function adheres to "),Xs=l(Ml,"CODE",{});var Lf=p(Xs);ei=n(Lf,"RequestHandler"),Lf.forEach(s),si=n(Ml," type which helps us catch any type related bugs."),Ml.forEach(s),ql.forEach(s),bo=d(t),m=l(t,"P",{});var E=p(m);ai=n(E,"We will now fetch these posts using the endpoint we created. We create a "),Zs=l(E,"CODE",{});var qf=p(Zs);ni=n(qf,"+page.ts"),qf.forEach(s),oi=n(E," file inside "),ta=l(E,"CODE",{});var Mf=p(ta);li=n(Mf,"routes"),Mf.forEach(s),pi=n(E," folder, which is executed by sveltekit on both server and client before it renders "),ea=l(E,"CODE",{});var Nf=p(ea);ci=n(Nf,"+page.svelte"),Nf.forEach(s),ii=n(E," file. The "),sa=l(E,"CODE",{});var Bf=p(sa);ri=n(Bf,"+page.ts"),Bf.forEach(s),ui=n(E," file will export a "),aa=l(E,"CODE",{});var Yf=p(aa);di=n(Yf,"load"),Yf.forEach(s),ki=n(E," function which can return whatever it likes. Whatever is returned from the "),na=l(E,"CODE",{});var $f=p(na);fi=n($f,"load"),$f.forEach(s),hi=n(E," function can then be accessed in "),oa=l(E,"CODE",{});var Gf=p(oa);vi=n(Gf,"+page.svelte"),Gf.forEach(s),mi=n(E," as a variable named "),la=l(E,"CODE",{});var Ff=p(la);yi=n(Ff,"data"),Ff.forEach(s),wi=n(E," by exporting it - "),pa=l(E,"CODE",{});var Uf=p(pa);bi=n(Uf,"export let data"),Uf.forEach(s),gi=n(E,"."),E.forEach(s),go=d(t),ae=l(t,"PRE",{class:!0});var Om=p(ae);Om.forEach(s),Eo=d(t),Le=l(t,"P",{});var Jf=p(Le);Ei=n(Jf,`Does having an endpoint mean that we need a server too? Ans - No. When we run
the build script, which runs the static adapter, the endpoint is called and the
post metadata is resolved before the final output is produced.`),Jf.forEach(s),_o=d(t),qe=l(t,"P",{});var zf=p(qe);_i=n(zf,"Now, posts should have the list of posts with their metadata, as defined by you at the top of each post. E.g. If you have this at the top of a post -"),zf.forEach(s),Do=d(t),ne=l(t,"PRE",{class:!0});var Cm=p(ne);Cm.forEach(s),Oo=d(t),Me=l(t,"P",{});var Vf=p(Me);Di=n(Vf,"That post’s metadata would be an object and look like this"),Vf.forEach(s),Co=d(t),oe=l(t,"PRE",{class:!0});var Pm=p(oe);Pm.forEach(s),Po=d(t),Ne=l(t,"P",{});var Kf=p(Ne);Oi=n(Kf,"You can then render whatever metadata you want to."),Kf.forEach(s),xo=d(t),le=l(t,"PRE",{class:!0});var xm=p(le);xm.forEach(s),jo=d(t),bt=l(t,"P",{});var Nl=p(bt);Ci=n(Nl,"Inside "),ca=l(Nl,"CODE",{});var Qf=p(ca);Pi=n(Qf,"+page.svelte"),Qf.forEach(s),xi=n(Nl," file"),Nl.forEach(s),Ao=d(t),pe=l(t,"PRE",{class:!0});var jm=p(pe);jm.forEach(s),To=d(t),gt=l(t,"H3",{id:!0});var gk=p(gt);Et=l(gk,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var Xf=p(Et);ia=l(Xf,"SPAN",{class:!0}),p(ia).forEach(s),Xf.forEach(s),ji=n(gk,"Step 4 - Add a layout component for the blog"),gk.forEach(s),Wo=d(t),Q=l(t,"P",{});var es=p(Q);Ai=n(es,"If you have a header which you want to show for each page in the blog/site, you can add that as a layout component. For e.g. adding "),ra=l(es,"CODE",{});var Zf=p(ra);Ti=n(Zf,"routes/+layout.svelte"),Zf.forEach(s),Wi=n(es," file, with a "),M&&M.l(es),Ii=n(es," component in it, will wrap every route content inside this layout component. Example layout component -"),es.forEach(s),Io=d(t),ce=l(t,"PRE",{class:!0});var Am=p(ce);Am.forEach(s),Ho=d(t),ie=l(t,"P",{});var Ek=p(ie);Hi=n(Ek,"You can read more about svelte kit layout components here - "),re=l(Ek,"A",{href:!0,rel:!0});var th=p(re);Si=n(th,"https://kit.svelte.dev/docs/routing#layout"),th.forEach(s),Ek.forEach(s),So=d(t),_t=l(t,"H3",{id:!0});var _k=p(_t);Dt=l(_k,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var eh=p(Dt);ua=l(eh,"SPAN",{class:!0}),p(ua).forEach(s),eh.forEach(s),Ri=n(_k,"Step 5 - Add a layout component for individual blog posts"),_k.forEach(s),Ro=d(t),Be=l(t,"P",{});var sh=p(Be);Li=n(sh,"This was trickier than i thought. At least my first attempt. And when i found the solution, it was not as tricky as i thought. At least not as tricky as trying to read this paragraph."),sh.forEach(s),Lo=d(t),N=l(t,"P",{});var Ut=p(N);qi=n(Ut,"I thought i would utilize svelte-kit’s layout capability, with "),da=l(Ut,"CODE",{});var ah=p(da);Mi=n(ah,"+layout.svelte"),ah.forEach(s),Ni=n(Ut," file in the blog folder. But I wanted the layout component for blog post to take care of the post title. My first attempt was to use the "),ka=l(Ut,"CODE",{});var nh=p(ka);Bi=n(nh,"load"),nh.forEach(s),Yi=n(Ut," function provided by "),fa=l(Ut,"CODE",{});var oh=p(fa);$i=n(oh,"svelte-kit"),oh.forEach(s),Gi=n(Ut," and then fetching the metadata for the post by importing that file. That worked during development but didn’t work with static adapter. Since i was importing file dynamically, it needed a server."),Ut.forEach(s),qo=d(t),ot=l(t,"P",{});var $n=p(ot);Fi=n($n,"Then i found out about layouts in mdsvex. All i had to do was add a svelte component somewhere, say "),ha=l($n,"CODE",{});var lh=p(ha);Ui=n(lh,"src/routes/blog"),lh.forEach(s),Ji=n($n," folder, and then point mdsvex to that file. That is done in "),va=l($n,"CODE",{});var ph=p(va);zi=n(ph,"mdsvex.config.cjs"),ph.forEach(s),$n.forEach(s),Mo=d(t),ue=l(t,"PRE",{class:!0});var Tm=p(ue);Tm.forEach(s),No=d(t),Ot=l(t,"P",{});var Bl=p(Ot);Vi=n(Bl,"And the "),ma=l(Bl,"CODE",{});var ch=p(ma);Ki=n(ch,"post_layout.svelte"),ch.forEach(s),Qi=n(Bl," component looked like this"),Bl.forEach(s),Bo=d(t),de=l(t,"PRE",{class:!0});var Wm=p(de);Wm.forEach(s),Yo=d(t),Ye=l(t,"P",{});var ih=p(Ye);Xi=n(ih,"Now all my blog posts had a title and date at the top. The layout component also enabled styling the container for each post, if i wanted to."),ih.forEach(s),$o=d(t),lt=l(t,"P",{});var Gn=p(lt);Zi=n(Gn,"More about "),ya=l(Gn,"CODE",{});var rh=p(ya);tr=n(rh,"mdsvex"),rh.forEach(s),er=n(Gn," layout components here - "),ke=l(Gn,"A",{href:!0,rel:!0});var uh=p(ke);sr=n(uh,"https://mdsvex.pngwn.io/docs#layouts"),uh.forEach(s),Gn.forEach(s),Go=d(t),Ct=l(t,"H3",{id:!0});var Dk=p(Ct);Pt=l(Dk,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var dh=p(Pt);wa=l(dh,"SPAN",{class:!0}),p(wa).forEach(s),dh.forEach(s),ar=n(Dk,"Step 6 - Rendering individual blog post"),Dk.forEach(s),Fo=d(t),g=l(t,"P",{});var A=p(g);nr=n(A,"Let’s say we have 20 odd blog posts on our blog. Each in their own markdown file. And we want to render them on a route like "),ba=l(A,"CODE",{});var kh=p(ba);or=n(kh,"<my-site>.com/blog/blog-post-title"),kh.forEach(s),lr=n(A,". We cannot just create a file named "),ga=l(A,"CODE",{});var fh=p(ga);pr=n(fh,"blog-post-title.md"),fh.forEach(s),cr=n(A," inside "),Ea=l(A,"CODE",{});var hh=p(Ea);ir=n(hh,"src/routes/blog/"),hh.forEach(s),rr=n(A," folder and be done. Because those files will not be treated as routes by "),_a=l(A,"CODE",{});var vh=p(_a);ur=n(vh,"sveltekit"),vh.forEach(s),dr=n(A,". Remember, "),Da=l(A,"CODE",{});var mh=p(Da);kr=n(mh,"sveltekit"),mh.forEach(s),fr=n(A," only treats a file as a route if it starts with "),Oa=l(A,"CODE",{});var yh=p(Oa);hr=n(yh,"+page"),yh.forEach(s),vr=n(A,". So one way to render our blog posts would be to create one folder per blog post and then create a "),Ca=l(A,"CODE",{});var wh=p(Ca);mr=n(wh,"+page.md"),wh.forEach(s),yr=n(A," file inside each of those folders which then contains the post content. E.g."),A.forEach(s),Uo=d(t),fe=l(t,"PRE",{class:!0});var Im=p(fe);Im.forEach(s),Jo=d(t),X=l(t,"P",{});var ss=p(X);wr=n(ss,"Now we should be able to access "),Pa=l(ss,"CODE",{});var bh=p(Pa);br=n(bh,"localhost:5173/blog/blog-post-title"),bh.forEach(s),gr=n(ss," or "),xa=l(ss,"CODE",{});var gh=p(xa);Er=n(gh,"localhost:5173/blog/asinite-personal-details-post"),gh.forEach(s),_r=n(ss,"."),ss.forEach(s),zo=d(t),$e=l(t,"P",{});var Eh=p($e);Dr=n(Eh,"I actually like this technique since most of us don’t write too many posts. I would bet most of us write less than 10 blog posts in our life time. And this is a perfectly file way to render those mostly asinine posts."),Eh.forEach(s),Vo=d(t),Ge=l(t,"P",{});var _h=p(Ge);Or=n(_h,"But we are certainly taking this much pain to render a super duper simple blog post because we like writing posts. We are doing it because we want to have some fun :). Let’s look at another way to render the same blog posts in a more dynamic way."),_h.forEach(s),Ko=d(t),xt=l(t,"H4",{id:!0});var Ok=p(xt);jt=l(Ok,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var Dh=p(jt);ja=l(Dh,"SPAN",{class:!0}),p(ja).forEach(s),Dh.forEach(s),Cr=n(Ok,"Step 6.2 - Rendering blog post dynamically"),Ok.forEach(s),Qo=d(t),Fe=l(t,"P",{});var Oh=p(Fe);Pr=n(Oh,"Here’s what we want to do -"),Oh.forEach(s),Xo=d(t),At=l(t,"UL",{});var Yl=p(At);Aa=l(Yl,"LI",{});var Ch=p(Aa);xr=n(Ch,"Put all our post related markdown files in one folder"),Ch.forEach(s),jr=d(Yl),Ta=l(Yl,"LI",{});var Ph=p(Ta);Ar=n(Ph,"Write a script which then dynamically looks for the required file from the url, picks it up and renders it."),Ph.forEach(s),Yl.forEach(s),Zo=d(t),q=l(t,"P",{});var it=p(q);Wa=l(it,"CODE",{});var xh=p(Wa);Tr=n(xh,"sveltekit"),xh.forEach(s),Wr=n(it," supports something called dynamic routes for scenarios where we don’t have fixed routes like "),Ia=l(it,"CODE",{});var jh=p(Ia);Ir=n(jh,"/about"),jh.forEach(s),Hr=n(it," or "),Ha=l(it,"CODE",{});var Ah=p(Ha);Sr=n(Ah,"/home"),Ah.forEach(s),Rr=n(it," etc. We want our "),Sa=l(it,"CODE",{});var Th=p(Sa);Lr=n(Th,"/blog/blog-title"),Th.forEach(s),qr=n(it," routes to automagically pick the right content."),it.forEach(s),tl=d(t),k=l(t,"P",{});var f=p(k);Ra=l(f,"CODE",{});var Wh=p(Ra);Mr=n(Wh,"sveltekit"),Wh.forEach(s),Nr=n(f," allows us to create a folder whose name looks like this "),La=l(f,"CODE",{});var Ih=p(La);Br=n(Ih,"[some-name]"),Ih.forEach(s),Yr=n(f," inside the "),qa=l(f,"CODE",{});var Hh=p(qa);$r=n(Hh,"routes"),Hh.forEach(s),Gr=n(f," folder. When "),Ma=l(f,"CODE",{});var Sh=p(Ma);Fr=n(Sh,"sveltekit"),Sh.forEach(s),Ur=n(f," comes across such a folder, it will then forwards all request coming to that path, to the "),Na=l(f,"CODE",{});var Rh=p(Na);Jr=n(Rh,"+page.svelte"),Rh.forEach(s),zr=n(f," file inside that folder. E.g. if we create a folder like "),Ba=l(f,"CODE",{});var Lh=p(Ba);Vr=n(Lh,"src/routes/blog/[slug]/"),Lh.forEach(s),Kr=n(f," then "),Ya=l(f,"CODE",{});var qh=p(Ya);Qr=n(qh,"sveltekit"),qh.forEach(s),Xr=n(f," will render the "),$a=l(f,"CODE",{});var Mh=p($a);Zr=n(Mh,"+page.svelte"),Mh.forEach(s),tu=n(f," file inside "),Ga=l(f,"CODE",{});var Nh=p(Ga);eu=n(Nh,"src/routes/blog/[slug]/"),Nh.forEach(s),su=n(f," folder for request to "),Fa=l(f,"CODE",{});var Bh=p(Fa);au=n(Bh,"/blog/abc"),Bh.forEach(s),nu=n(f," or "),Ua=l(f,"CODE",{});var Yh=p(Ua);ou=n(Yh,"/blog/new-post"),Yh.forEach(s),lu=n(f,". It will use the name "),Ja=l(f,"CODE",{});var $h=p(Ja);pu=n($h,"slug"),$h.forEach(s),cu=n(f," inside the square brackets ("),za=l(f,"CODE",{});var Gh=p(za);iu=n(Gh,"[]"),Gh.forEach(s),ru=n(f,") to pass as params property to "),Va=l(f,"CODE",{});var Fh=p(Va);uu=n(Fh,"load"),Fh.forEach(s),du=n(f," function in "),Ka=l(f,"CODE",{});var Uh=p(Ka);ku=n(Uh,"+page.ts"),Uh.forEach(s),fu=n(f," file inside "),Qa=l(f,"CODE",{});var Jh=p(Qa);hu=n(Jh,"[slug]"),Jh.forEach(s),vu=n(f," folder. E.g."),f.forEach(s),el=d(t),he=l(t,"PRE",{class:!0});var Hm=p(he);Hm.forEach(s),sl=d(t),Z=l(t,"P",{});var as=p(Z);mu=n(as,"We will now use the "),Xa=l(as,"CODE",{});var zh=p(Xa);yu=n(zh,"load"),zh.forEach(s),wu=n(as," function in "),Za=l(as,"CODE",{});var Vh=p(Za);bu=n(Vh,"+page.ts"),Vh.forEach(s),gu=n(as," to load the blog post asked for"),as.forEach(s),al=d(t),ve=l(t,"PRE",{class:!0});var Sm=p(ve);Sm.forEach(s),nl=d(t),Tt=l(t,"P",{});var $l=p(Tt);Eu=n($l,"We use "),tn=l($l,"CODE",{});var Kh=p(tn);_u=n(Kh,"import"),Kh.forEach(s),Du=n($l," to import the intended blog post. If we don’t file it in our file system, we return an error and hopefully also render an error page."),$l.forEach(s),ol=d(t),y=l(t,"P",{});var _=p(y);Ou=n(_,"When use use "),en=l(_,"CODE",{});var Qh=p(en);Cu=n(Qh,"import"),Qh.forEach(s),Pu=n(_," to get our "),sn=l(_,"CODE",{});var Xh=p(sn);xu=n(Xh,"md"),Xh.forEach(s),ju=n(_," file, it is automatically passed through "),an=l(_,"CODE",{});var Zh=p(an);Au=n(Zh,"mdsvex"),Zh.forEach(s),Tu=n(_," which then returns a svelte component for the imported "),nn=l(_,"CODE",{});var tv=p(nn);Wu=n(tv,"md"),tv.forEach(s),Iu=n(_," file. We return that svelte component as "),on=l(_,"CODE",{});var ev=p(on);Hu=n(ev,"content"),ev.forEach(s),Su=n(_," property from whatever object is returned from "),ln=l(_,"CODE",{});var sv=p(ln);Ru=n(sv,"load"),sv.forEach(s),Lu=n(_," function. This "),pn=l(_,"CODE",{});var av=p(pn);qu=n(av,"svelte"),av.forEach(s),Mu=n(_," component returned by "),cn=l(_,"CODE",{});var nv=p(cn);Nu=n(nv,"import"),nv.forEach(s),Bu=n(_," cannot be render directly. We need to use "),rn=l(_,"CODE",{});var ov=p(rn);Yu=n(ov,"<svelte:compoennt>"),ov.forEach(s),$u=n(_," directive to render a svelte component dynamically."),_.forEach(s),ll=d(t),Wt=l(t,"P",{});var Gl=p(Wt);Gu=n(Gl,"We do that inside "),un=l(Gl,"CODE",{});var lv=p(un);Fu=n(lv,"src/blog/[slug]/+page.svelte"),lv.forEach(s),Uu=n(Gl," file -"),Gl.forEach(s),pl=d(t),me=l(t,"PRE",{class:!0});var Rm=p(me);Rm.forEach(s),cl=d(t),Ue=l(t,"P",{});var pv=p(Ue);Ju=n(pv,"Now we should be in a good place to render all our blog posts dynamically. Not that it matters."),pv.forEach(s),il=d(t),It=l(t,"H3",{id:!0});var Ck=p(It);Ht=l(Ck,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var cv=p(Ht);dn=l(cv,"SPAN",{class:!0}),p(dn).forEach(s),cv.forEach(s),zu=n(Ck,"Step 7 - Hosting the blog on github"),Ck.forEach(s),rl=d(t),St=l(t,"P",{});var Fl=p(St);Vu=n(Fl,"Github allows static site hosting in 2 ways - either as a user site or as a project site. You can read more about github hosting "),ye=l(Fl,"A",{href:!0,rel:!0});var iv=p(ye);Ku=n(iv,"here"),iv.forEach(s),Qu=n(Fl,". I have my site hosted as a user site. Which meant i had to push the output of the static adapter to my master branch. But what is this static adapter thingy?"),Fl.forEach(s),ul=d(t),we=l(t,"P",{});var Pk=p(we);Xu=n(Pk,"svelte kit provides various adapters to convert your site in ways which are suited for your deployment environemnt. In our case, we want the site to be hosted on github (or netlify etc.) as a static site. No server. Just html pages with some css and js. For that, we use the "),be=l(Pk,"A",{href:!0,rel:!0});var rv=p(be);Zu=n(rv,"svelte-kit static adapter"),rv.forEach(s),Pk.forEach(s),dl=d(t),Rt=l(t,"H4",{id:!0});var xk=p(Rt);Lt=l(xk,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var uv=p(Lt);kn=l(uv,"SPAN",{class:!0}),p(kn).forEach(s),uv.forEach(s),td=n(xk,"Install svelte static adapter"),xk.forEach(s),kl=d(t),Je=l(t,"P",{});var dv=p(Je);ed=n(dv,"We can install the static adapter from npm."),dv.forEach(s),fl=d(t),ge=l(t,"PRE",{class:!0});var Lm=p(ge);Lm.forEach(s),hl=d(t),ze=l(t,"P",{});var kv=p(ze);sd=n(kv,"We then have to change the svelte config to tell it to use static adapter -"),kv.forEach(s),vl=d(t),Ee=l(t,"PRE",{class:!0});var qm=p(Ee);qm.forEach(s),ml=d(t),qt=l(t,"H4",{id:!0});var jk=p(qt);Mt=l(jk,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var fv=p(Mt);fn=l(fv,"SPAN",{class:!0}),p(fn).forEach(s),fv.forEach(s),ad=n(jk,"Generate content to host as static site"),jk.forEach(s),yl=d(t),Nt=l(t,"P",{});var Ul=p(Nt);nd=n(Ul,"Once we have setup the static adapter, calling "),hn=l(Ul,"CODE",{});var hv=p(hn);od=n(hv,"npm run build"),hv.forEach(s),ld=n(Ul," on the terminal should generate the build folder."),Ul.forEach(s),wl=d(t),_e=l(t,"PRE",{class:!0});var Mm=p(_e);Mm.forEach(s),bl=d(t),B=l(t,"P",{});var Jt=p(B);pd=n(Jt,"We can test the build by going inside the build folder and using "),vn=l(Jt,"CODE",{});var vv=p(vn);cd=n(vv,"serve"),vv.forEach(s),id=n(Jt," or any other server to serve the files. "),mn=l(Jt,"CODE",{});var mv=p(mn);rd=n(mv,"serve"),mv.forEach(s),ud=n(Jt," starts a server on "),yn=l(Jt,"CODE",{});var yv=p(yn);dd=n(yv,"localhost:5000"),yv.forEach(s),kd=n(Jt," by default."),Jt.forEach(s),gl=d(t),Bt=l(t,"H4",{id:!0});var Ak=p(Bt);Yt=l(Ak,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var wv=p(Yt);wn=l(wv,"SPAN",{class:!0}),p(wn).forEach(s),wv.forEach(s),fd=n(Ak,"Install gh-pages and deploy site"),Ak.forEach(s),El=d(t),$t=l(t,"P",{});var Jl=p($t);hd=n(Jl,"Now that we have the built files, we have to push them to the master branch, for user site, or to the "),bn=l(Jl,"CODE",{});var bv=p(bn);vd=n(bv,"gh-pages"),bv.forEach(s),md=n(Jl," branch for a project site. Once we update the branch and push to github, github will then deploy the files for us and we should be able to see our site come alive."),Jl.forEach(s),_l=d(t),pt=l(t,"P",{});var Fn=p(pt);gn=l(Fn,"CODE",{});var gv=p(gn);yd=n(gv,"gh-pages"),gv.forEach(s),wd=n(Fn," is a handy tool to push the contents of any folder to any other branch in your repository. Installing "),En=l(Fn,"CODE",{});var Ev=p(En);bd=n(Ev,"gh-pages"),Ev.forEach(s),gd=n(Fn," is straight forward with npm."),Fn.forEach(s),Dl=d(t),De=l(t,"PRE",{class:!0});var Nm=p(De);Nm.forEach(s),Ol=d(t),Ve=l(t,"P",{});var _v=p(Ve);Ed=n(_v,"I then added an npm script to make deployment easy -"),_v.forEach(s),Cl=d(t),Oe=l(t,"PRE",{class:!0});var Bm=p(Oe);Bm.forEach(s),Pl=d(t),Y=l(t,"P",{});var zt=p(Y);_d=n(zt,"If you are deploying a project site, you can remove the "),_n=l(zt,"CODE",{});var Dv=p(_n);Dd=n(Dv,"-b master"),Dv.forEach(s),Od=n(zt," flag from gh-pages command. "),Dn=l(zt,"CODE",{});var Ov=p(Dn);Cd=n(Ov,"gh-pages"),Ov.forEach(s),Pd=n(zt," pushes to "),On=l(zt,"CODE",{});var Cv=p(On);xd=n(Cv,"gh-pages"),Cv.forEach(s),jd=n(zt," branch by default."),zt.forEach(s),xl=d(t),Ce=l(t,"P",{});var Tk=p(Ce);Cn=l(Tk,"CODE",{});var Pv=p(Cn);Ad=n(Pv,"gh-pages"),Pv.forEach(s),Td=n(Tk," will also push the branch to remote. So if all goes well, you should be able to see your site live after some time."),Tk.forEach(s),jl=d(t),tt=l(t,"H4",{id:!0});var Un=p(tt);Gt=l(Un,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var xv=p(Gt);Pn=l(xv,"SPAN",{class:!0}),p(Pn).forEach(s),xv.forEach(s),Wd=n(Un,"Fixing _apps/"),xn=l(Un,"EM",{});var jv=p(xn);Id=n(jv,".js and _apps/"),jv.forEach(s),Hd=n(Un,".css paths returning 404 on the deployed site"),Un.forEach(s),Al=d(t),j=l(t,"P",{});var F=p(j);Sd=n(F,"After you deploy your site by pushing the github branch, you will probably see your site looking a little different to what it looks on your development environment. That’s because some of the js and css is missing. If you open the devtools and then the network tab, a number of js and css files might be returning 404. All of those would be serving files from inside the "),jn=l(F,"CODE",{});var Av=p(jn);Rd=n(Av,"__app"),Av.forEach(s),Ld=n(F," folder. That is because github does not deploy the "),An=l(F,"CODE",{});var Tv=p(An);qd=n(Tv,"__app"),Tv.forEach(s),Md=n(F," folder. All folders starting with an "),Tn=l(F,"CODE",{});var Wv=p(Tn);Nd=n(Wv,"_"),Wv.forEach(s),Bd=n(F," are to be ignored for sites built with "),Pe=l(F,"A",{href:!0,rel:!0});var Iv=p(Pe);Yd=n(Iv,"jekyll"),Iv.forEach(s),$d=n(F,". Read more about it "),xe=l(F,"A",{href:!0,rel:!0});var Hv=p(xe);Gd=n(Hv,"here"),Hv.forEach(s),Fd=n(F,"."),F.forEach(s),Tl=d(t),I=l(t,"P",{});var st=p(I);Ud=n(st,"To get around the problem, we have to add an empty file named "),Wn=l(st,"CODE",{});var Sv=p(Wn);Jd=n(Sv,".nojekyll"),Sv.forEach(s),zd=n(st," to our static folder. "),In=l(st,"CODE",{});var Rv=p(In);Vd=n(Rv,"npm run build"),Rv.forEach(s),Kd=n(st," will then copy that file to the "),Hn=l(st,"CODE",{});var Lv=p(Hn);Qd=n(Lv,"build"),Lv.forEach(s),Xd=n(st," folder and "),Sn=l(st,"CODE",{});var qv=p(Sn);Zd=n(qv,"gh-pages"),qv.forEach(s),tk=n(st," will then push that file to the required github branch."),st.forEach(s),Wl=d(t),O=l(t,"P",{});var S=p(O);ek=n(S,"You might find that it still doesn’t work. Mainly because "),Rn=l(S,"CODE",{});var Mv=p(Rn);sk=n(Mv,"gh-pages"),Mv.forEach(s),ak=n(S," is not pushing the "),Ln=l(S,"CODE",{});var Nv=p(Ln);nk=n(Nv,".nojekyll"),Nv.forEach(s),ok=n(S," file to the github branch, because "),qn=l(S,"CODE",{});var Bv=p(qn);lk=n(Bv,"gh-pages"),Bv.forEach(s),pk=n(S," tool ignores all files starting with a "),Mn=l(S,"CODE",{});var Yv=p(Mn);ck=n(Yv,"."),Yv.forEach(s),ik=n(S," (dot). We can tell the "),Nn=l(S,"CODE",{});var $v=p(Nn);rk=n($v,"gh-pages"),$v.forEach(s),uk=n(S," tool to also push dot files from the build folder by using the "),Bn=l(S,"CODE",{});var Gv=p(Bn);dk=n(Gv,"-t"),Gv.forEach(s),kk=n(S," flag. If you copied the deploy command from above, it’s already there."),S.forEach(s),Il=d(t),Ke=l(t,"P",{});var Fv=p(Ke);fk=n(Fv,"That is it! Go ahead and add a lot of blog posts as markdown files and deploy to your site. I am kidding. Building the blog with svelte kit was fun though."),Fv.forEach(s),Hl=d(t),je=l(t,"P",{});var Wk=p(je);hk=n(Wk,"Link to final code - "),Ae=l(Wk,"A",{href:!0,rel:!0});var Uv=p(Ae);vk=n(Uv,"https://github.com/mukeshsoni/mukeshsoni.github.io/tree/svelte"),Uv.forEach(s),Wk.forEach(s),this.h()},h(){r(h,"href","https://svelte.dev."),r(h,"rel","nofollow"),r(Vt,"href","https://kit.svelte.dev"),r(Vt,"rel","nofollow"),r(Kt,"href","https://github.com/mukeshsoni/mukeshsoni.github.io/tree/svelte"),r(Kt,"rel","nofollow"),r(ns,"class","icon icon-link"),r(dt,"aria-hidden","true"),r(dt,"tabindex","-1"),r(dt,"href","#step-1---setup-svelte-kit-template"),r(ut,"id","step-1---setup-svelte-kit-template"),r(Qt,"class","language-bash"),r(fs,"class","icon icon-link"),r(vt,"aria-hidden","true"),r(vt,"tabindex","-1"),r(vt,"href","#step-2---add-mdsvex-to-convert-markdown-files-to-html"),r(ht,"id","step-2---add-mdsvex-to-convert-markdown-files-to-html"),r(Xt,"class","language-bash"),r(Zt,"class","language-javascript"),r(te,"class","language-svelte"),r(Rs,"class","icon icon-link"),r(yt,"aria-hidden","true"),r(yt,"tabindex","-1"),r(yt,"href","#step-3---show-a-list-of-all-blog-posts-on-home-page"),r(mt,"id","step-3---show-a-list-of-all-blog-posts-on-home-page"),r(ee,"class","language-typescript"),r(ae,"class","language-typescript"),r(ne,"class","language-undefined"),r(oe,"class","language-json"),r(le,"class","language-html"),r(pe,"class","language-svelte"),r(ia,"class","icon icon-link"),r(Et,"aria-hidden","true"),r(Et,"tabindex","-1"),r(Et,"href","#step-4---add-a-layout-component-for-the-blog"),r(gt,"id","step-4---add-a-layout-component-for-the-blog"),r(ce,"class","language-html"),r(re,"href","https://kit.svelte.dev/docs/routing#layout"),r(re,"rel","nofollow"),r(ua,"class","icon icon-link"),r(Dt,"aria-hidden","true"),r(Dt,"tabindex","-1"),r(Dt,"href","#step-5---add-a-layout-component-for-individual-blog-posts"),r(_t,"id","step-5---add-a-layout-component-for-individual-blog-posts"),r(ue,"class","language-javascript"),r(de,"class","language-html"),r(ke,"href","https://mdsvex.pngwn.io/docs#layouts"),r(ke,"rel","nofollow"),r(wa,"class","icon icon-link"),r(Pt,"aria-hidden","true"),r(Pt,"tabindex","-1"),r(Pt,"href","#step-6---rendering-individual-blog-post"),r(Ct,"id","step-6---rendering-individual-blog-post"),r(fe,"class","language-undefined"),r(ja,"class","icon icon-link"),r(jt,"aria-hidden","true"),r(jt,"tabindex","-1"),r(jt,"href","#step-62---rendering-blog-post-dynamically"),r(xt,"id","step-62---rendering-blog-post-dynamically"),r(he,"class","language-typescript"),r(ve,"class","language-typescript"),r(me,"class","language-svelte"),r(dn,"class","icon icon-link"),r(Ht,"aria-hidden","true"),r(Ht,"tabindex","-1"),r(Ht,"href","#step-7---hosting-the-blog-on-github"),r(It,"id","step-7---hosting-the-blog-on-github"),r(ye,"href","https://docs.github.com/en/pages/getting-started-with-github-pages/about-github-pages"),r(ye,"rel","nofollow"),r(be,"href","https://github.com/sveltejs/kit/tree/master/packages/adapter-static"),r(be,"rel","nofollow"),r(kn,"class","icon icon-link"),r(Lt,"aria-hidden","true"),r(Lt,"tabindex","-1"),r(Lt,"href","#install-svelte-static-adapter"),r(Rt,"id","install-svelte-static-adapter"),r(ge,"class","language-bash"),r(Ee,"class","language-javascript"),r(fn,"class","icon icon-link"),r(Mt,"aria-hidden","true"),r(Mt,"tabindex","-1"),r(Mt,"href","#generate-content-to-host-as-static-site"),r(qt,"id","generate-content-to-host-as-static-site"),r(_e,"class","language-undefined"),r(wn,"class","icon icon-link"),r(Yt,"aria-hidden","true"),r(Yt,"tabindex","-1"),r(Yt,"href","#install-gh-pages-and-deploy-site"),r(Bt,"id","install-gh-pages-and-deploy-site"),r(De,"class","language-bash"),r(Oe,"class","language-json"),r(Pn,"class","icon icon-link"),r(Gt,"aria-hidden","true"),r(Gt,"tabindex","-1"),r(Gt,"href","#fixing-_appsjs-and-_appscss-paths-returning-404-on-the-deployed-site"),r(tt,"id","fixing-_appsjs-and-_appscss-paths-returning-404-on-the-deployed-site"),r(Pe,"href","https://jekyllrb.com/docs/"),r(Pe,"rel","nofollow"),r(xe,"href","https://github.blog/2009-12-29-bypassing-jekyll-on-github-pages/"),r(xe,"rel","nofollow"),r(Ae,"href","https://github.com/mukeshsoni/mukeshsoni.github.io/tree/svelte"),r(Ae,"rel","nofollow")},m(t,c){i(t,b,c),e(b,T),i(t,U,c),i(t,C,c),e(C,J),e(C,h),e(h,R),e(C,Te),e(C,Vt),e(Vt,zl),e(C,Vl),i(t,Jn,c),i(t,We,c),e(We,Kl),i(t,zn,c),i(t,Ie,c),e(Ie,Ql),i(t,Vn,c),i(t,rt,c),e(rt,Xl),e(rt,Kt),e(Kt,Zl),e(rt,tp),i(t,Kn,c),i(t,ut,c),e(ut,dt),e(dt,ns),e(ut,ep),i(t,Qn,c),i(t,kt,c),e(kt,sp),e(kt,os),e(os,ap),e(kt,np),i(t,Xn,c),i(t,Qt,c),Qt.innerHTML=Xv,i(t,Zn,c),i(t,nt,c),e(nt,op),e(nt,ls),e(ls,lp),e(nt,pp),e(nt,ps),e(ps,cp),i(t,to,c),i(t,ft,c),e(ft,ip),e(ft,cs),e(cs,rp),e(ft,up),i(t,eo,c),i(t,P,c),e(P,dp),e(P,is),e(is,kp),e(P,fp),e(P,rs),e(rs,hp),e(P,vp),e(P,us),e(us,mp),e(P,yp),e(P,ds),e(ds,wp),e(P,bp),e(P,ks),e(ks,gp),e(P,Ep),i(t,so,c),i(t,ht,c),e(ht,vt),e(vt,fs),e(ht,_p),i(t,ao,c),i(t,Xt,c),Xt.innerHTML=Zv,i(t,no,c),i(t,V,c),e(V,Dp),e(V,hs),e(hs,Op),e(V,Cp),e(V,vs),e(vs,Pp),e(V,xp),i(t,oo,c),i(t,Zt,c),Zt.innerHTML=tm,i(t,lo,c),i(t,He,c),e(He,jp),i(t,po,c),i(t,D,c),e(D,Ap),e(D,ms),e(ms,Tp),e(D,Wp),e(D,ys),e(ys,Ip),e(D,Hp),e(D,ws),e(ws,Sp),e(D,Rp),e(D,bs),e(bs,Lp),e(D,qp),e(D,gs),e(gs,Mp),e(D,Np),e(D,Es),e(Es,Bp),e(D,Yp),i(t,co,c),i(t,te,c),te.innerHTML=em,i(t,io,c),i(t,L,c),e(L,_s),e(_s,$p),e(L,Gp),e(L,Ds),e(Ds,Fp),e(L,Up),e(L,Os),e(Os,Jp),e(L,zp),e(L,Cs),e(Cs,Vp),e(L,Kp),i(t,ro,c),i(t,x,c),e(x,Qp),e(x,Ps),e(Ps,Xp),e(x,Zp),e(x,xs),e(xs,tc),e(x,ec),e(x,js),e(js,sc),e(x,ac),e(x,As),e(As,nc),e(x,oc),e(x,Ts),e(Ts,lc),e(x,pc),i(t,uo,c),i(t,W,c),e(W,cc),e(W,Ws),e(Ws,ic),e(W,rc),e(W,Is),e(Is,uc),e(W,dc),e(W,Hs),e(Hs,kc),e(W,fc),e(W,Ss),e(Ss,hc),e(W,vc),i(t,ko,c),i(t,mt,c),e(mt,yt),e(yt,Rs),e(mt,mc),i(t,fo,c),i(t,Se,c),e(Se,yc),i(t,ho,c),i(t,K,c),e(K,wc),e(K,Ls),e(Ls,bc),e(K,gc),e(K,qs),e(qs,Ec),e(K,_c),i(t,vo,c),i(t,v,c),e(v,Dc),e(v,Ms),e(Ms,Oc),e(v,Cc),e(v,Ns),e(Ns,Pc),e(v,xc),e(v,Bs),e(Bs,jc),e(v,Ac),e(v,Ys),e(Ys,Tc),e(v,Wc),e(v,$s),e($s,Ic),e(v,Hc),e(v,Gs),e(Gs,Sc),e(v,Rc),e(v,Fs),e(Fs,Lc),e(v,qc),e(v,Us),e(Us,Mc),e(v,Nc),e(v,Js),e(Js,Bc),e(v,Yc),e(v,zs),e(zs,$c),e(v,Gc),i(t,mo,c),i(t,ee,c),ee.innerHTML=sm,i(t,yo,c),i(t,Re,c),e(Re,Fc),i(t,wo,c),i(t,wt,c),e(wt,z),e(z,Uc),e(z,Vs),e(Vs,Jc),e(z,zc),e(z,Ks),e(Ks,Vc),e(z,Kc),e(z,Qs),e(Qs,Qc),e(z,Xc),e(wt,Zc),e(wt,se),e(se,ti),e(se,Xs),e(Xs,ei),e(se,si),i(t,bo,c),i(t,m,c),e(m,ai),e(m,Zs),e(Zs,ni),e(m,oi),e(m,ta),e(ta,li),e(m,pi),e(m,ea),e(ea,ci),e(m,ii),e(m,sa),e(sa,ri),e(m,ui),e(m,aa),e(aa,di),e(m,ki),e(m,na),e(na,fi),e(m,hi),e(m,oa),e(oa,vi),e(m,mi),e(m,la),e(la,yi),e(m,wi),e(m,pa),e(pa,bi),e(m,gi),i(t,go,c),i(t,ae,c),ae.innerHTML=am,i(t,Eo,c),i(t,Le,c),e(Le,Ei),i(t,_o,c),i(t,qe,c),e(qe,_i),i(t,Do,c),i(t,ne,c),ne.innerHTML=nm,i(t,Oo,c),i(t,Me,c),e(Me,Di),i(t,Co,c),i(t,oe,c),oe.innerHTML=om,i(t,Po,c),i(t,Ne,c),e(Ne,Oi),i(t,xo,c),i(t,le,c),le.innerHTML=lm,i(t,jo,c),i(t,bt,c),e(bt,Ci),e(bt,ca),e(ca,Pi),e(bt,xi),i(t,Ao,c),i(t,pe,c),pe.innerHTML=pm,i(t,To,c),i(t,gt,c),e(gt,Et),e(Et,ia),e(gt,ji),i(t,Wo,c),i(t,Q,c),e(Q,Ai),e(Q,ra),e(ra,Ti),e(Q,Wi),M&&M.m(Q,null),e(Q,Ii),i(t,Io,c),i(t,ce,c),ce.innerHTML=cm,i(t,Ho,c),i(t,ie,c),e(ie,Hi),e(ie,re),e(re,Si),i(t,So,c),i(t,_t,c),e(_t,Dt),e(Dt,ua),e(_t,Ri),i(t,Ro,c),i(t,Be,c),e(Be,Li),i(t,Lo,c),i(t,N,c),e(N,qi),e(N,da),e(da,Mi),e(N,Ni),e(N,ka),e(ka,Bi),e(N,Yi),e(N,fa),e(fa,$i),e(N,Gi),i(t,qo,c),i(t,ot,c),e(ot,Fi),e(ot,ha),e(ha,Ui),e(ot,Ji),e(ot,va),e(va,zi),i(t,Mo,c),i(t,ue,c),ue.innerHTML=im,i(t,No,c),i(t,Ot,c),e(Ot,Vi),e(Ot,ma),e(ma,Ki),e(Ot,Qi),i(t,Bo,c),i(t,de,c),de.innerHTML=rm,i(t,Yo,c),i(t,Ye,c),e(Ye,Xi),i(t,$o,c),i(t,lt,c),e(lt,Zi),e(lt,ya),e(ya,tr),e(lt,er),e(lt,ke),e(ke,sr),i(t,Go,c),i(t,Ct,c),e(Ct,Pt),e(Pt,wa),e(Ct,ar),i(t,Fo,c),i(t,g,c),e(g,nr),e(g,ba),e(ba,or),e(g,lr),e(g,ga),e(ga,pr),e(g,cr),e(g,Ea),e(Ea,ir),e(g,rr),e(g,_a),e(_a,ur),e(g,dr),e(g,Da),e(Da,kr),e(g,fr),e(g,Oa),e(Oa,hr),e(g,vr),e(g,Ca),e(Ca,mr),e(g,yr),i(t,Uo,c),i(t,fe,c),fe.innerHTML=um,i(t,Jo,c),i(t,X,c),e(X,wr),e(X,Pa),e(Pa,br),e(X,gr),e(X,xa),e(xa,Er),e(X,_r),i(t,zo,c),i(t,$e,c),e($e,Dr),i(t,Vo,c),i(t,Ge,c),e(Ge,Or),i(t,Ko,c),i(t,xt,c),e(xt,jt),e(jt,ja),e(xt,Cr),i(t,Qo,c),i(t,Fe,c),e(Fe,Pr),i(t,Xo,c),i(t,At,c),e(At,Aa),e(Aa,xr),e(At,jr),e(At,Ta),e(Ta,Ar),i(t,Zo,c),i(t,q,c),e(q,Wa),e(Wa,Tr),e(q,Wr),e(q,Ia),e(Ia,Ir),e(q,Hr),e(q,Ha),e(Ha,Sr),e(q,Rr),e(q,Sa),e(Sa,Lr),e(q,qr),i(t,tl,c),i(t,k,c),e(k,Ra),e(Ra,Mr),e(k,Nr),e(k,La),e(La,Br),e(k,Yr),e(k,qa),e(qa,$r),e(k,Gr),e(k,Ma),e(Ma,Fr),e(k,Ur),e(k,Na),e(Na,Jr),e(k,zr),e(k,Ba),e(Ba,Vr),e(k,Kr),e(k,Ya),e(Ya,Qr),e(k,Xr),e(k,$a),e($a,Zr),e(k,tu),e(k,Ga),e(Ga,eu),e(k,su),e(k,Fa),e(Fa,au),e(k,nu),e(k,Ua),e(Ua,ou),e(k,lu),e(k,Ja),e(Ja,pu),e(k,cu),e(k,za),e(za,iu),e(k,ru),e(k,Va),e(Va,uu),e(k,du),e(k,Ka),e(Ka,ku),e(k,fu),e(k,Qa),e(Qa,hu),e(k,vu),i(t,el,c),i(t,he,c),he.innerHTML=dm,i(t,sl,c),i(t,Z,c),e(Z,mu),e(Z,Xa),e(Xa,yu),e(Z,wu),e(Z,Za),e(Za,bu),e(Z,gu),i(t,al,c),i(t,ve,c),ve.innerHTML=km,i(t,nl,c),i(t,Tt,c),e(Tt,Eu),e(Tt,tn),e(tn,_u),e(Tt,Du),i(t,ol,c),i(t,y,c),e(y,Ou),e(y,en),e(en,Cu),e(y,Pu),e(y,sn),e(sn,xu),e(y,ju),e(y,an),e(an,Au),e(y,Tu),e(y,nn),e(nn,Wu),e(y,Iu),e(y,on),e(on,Hu),e(y,Su),e(y,ln),e(ln,Ru),e(y,Lu),e(y,pn),e(pn,qu),e(y,Mu),e(y,cn),e(cn,Nu),e(y,Bu),e(y,rn),e(rn,Yu),e(y,$u),i(t,ll,c),i(t,Wt,c),e(Wt,Gu),e(Wt,un),e(un,Fu),e(Wt,Uu),i(t,pl,c),i(t,me,c),me.innerHTML=fm,i(t,cl,c),i(t,Ue,c),e(Ue,Ju),i(t,il,c),i(t,It,c),e(It,Ht),e(Ht,dn),e(It,zu),i(t,rl,c),i(t,St,c),e(St,Vu),e(St,ye),e(ye,Ku),e(St,Qu),i(t,ul,c),i(t,we,c),e(we,Xu),e(we,be),e(be,Zu),i(t,dl,c),i(t,Rt,c),e(Rt,Lt),e(Lt,kn),e(Rt,td),i(t,kl,c),i(t,Je,c),e(Je,ed),i(t,fl,c),i(t,ge,c),ge.innerHTML=hm,i(t,hl,c),i(t,ze,c),e(ze,sd),i(t,vl,c),i(t,Ee,c),Ee.innerHTML=vm,i(t,ml,c),i(t,qt,c),e(qt,Mt),e(Mt,fn),e(qt,ad),i(t,yl,c),i(t,Nt,c),e(Nt,nd),e(Nt,hn),e(hn,od),e(Nt,ld),i(t,wl,c),i(t,_e,c),_e.innerHTML=mm,i(t,bl,c),i(t,B,c),e(B,pd),e(B,vn),e(vn,cd),e(B,id),e(B,mn),e(mn,rd),e(B,ud),e(B,yn),e(yn,dd),e(B,kd),i(t,gl,c),i(t,Bt,c),e(Bt,Yt),e(Yt,wn),e(Bt,fd),i(t,El,c),i(t,$t,c),e($t,hd),e($t,bn),e(bn,vd),e($t,md),i(t,_l,c),i(t,pt,c),e(pt,gn),e(gn,yd),e(pt,wd),e(pt,En),e(En,bd),e(pt,gd),i(t,Dl,c),i(t,De,c),De.innerHTML=ym,i(t,Ol,c),i(t,Ve,c),e(Ve,Ed),i(t,Cl,c),i(t,Oe,c),Oe.innerHTML=wm,i(t,Pl,c),i(t,Y,c),e(Y,_d),e(Y,_n),e(_n,Dd),e(Y,Od),e(Y,Dn),e(Dn,Cd),e(Y,Pd),e(Y,On),e(On,xd),e(Y,jd),i(t,xl,c),i(t,Ce,c),e(Ce,Cn),e(Cn,Ad),e(Ce,Td),i(t,jl,c),i(t,tt,c),e(tt,Gt),e(Gt,Pn),e(tt,Wd),e(tt,xn),e(xn,Id),e(tt,Hd),i(t,Al,c),i(t,j,c),e(j,Sd),e(j,jn),e(jn,Rd),e(j,Ld),e(j,An),e(An,qd),e(j,Md),e(j,Tn),e(Tn,Nd),e(j,Bd),e(j,Pe),e(Pe,Yd),e(j,$d),e(j,xe),e(xe,Gd),e(j,Fd),i(t,Tl,c),i(t,I,c),e(I,Ud),e(I,Wn),e(Wn,Jd),e(I,zd),e(I,In),e(In,Vd),e(I,Kd),e(I,Hn),e(Hn,Qd),e(I,Xd),e(I,Sn),e(Sn,Zd),e(I,tk),i(t,Wl,c),i(t,O,c),e(O,ek),e(O,Rn),e(Rn,sk),e(O,ak),e(O,Ln),e(Ln,nk),e(O,ok),e(O,qn),e(qn,lk),e(O,pk),e(O,Mn),e(Mn,ck),e(O,ik),e(O,Nn),e(Nn,rk),e(O,uk),e(O,Bn),e(Bn,dk),e(O,kk),i(t,Il,c),i(t,Ke,c),e(Ke,fk),i(t,Hl,c),i(t,je,c),e(je,hk),e(je,Ae),e(Ae,vk),Qe=!0},p(t,c){M&&M.p&&(!Qe||c&4)&&Xm(M,mk,t,t[2],Qe?t1(mk,t[2],c,null):Zm(t[2]),null)},i(t){Qe||(Kv(M,t),Qe=!0)},o(t){Qv(M,t),Qe=!1},d(t){t&&s(b),t&&s(U),t&&s(C),t&&s(Jn),t&&s(We),t&&s(zn),t&&s(Ie),t&&s(Vn),t&&s(rt),t&&s(Kn),t&&s(ut),t&&s(Qn),t&&s(kt),t&&s(Xn),t&&s(Qt),t&&s(Zn),t&&s(nt),t&&s(to),t&&s(ft),t&&s(eo),t&&s(P),t&&s(so),t&&s(ht),t&&s(ao),t&&s(Xt),t&&s(no),t&&s(V),t&&s(oo),t&&s(Zt),t&&s(lo),t&&s(He),t&&s(po),t&&s(D),t&&s(co),t&&s(te),t&&s(io),t&&s(L),t&&s(ro),t&&s(x),t&&s(uo),t&&s(W),t&&s(ko),t&&s(mt),t&&s(fo),t&&s(Se),t&&s(ho),t&&s(K),t&&s(vo),t&&s(v),t&&s(mo),t&&s(ee),t&&s(yo),t&&s(Re),t&&s(wo),t&&s(wt),t&&s(bo),t&&s(m),t&&s(go),t&&s(ae),t&&s(Eo),t&&s(Le),t&&s(_o),t&&s(qe),t&&s(Do),t&&s(ne),t&&s(Oo),t&&s(Me),t&&s(Co),t&&s(oe),t&&s(Po),t&&s(Ne),t&&s(xo),t&&s(le),t&&s(jo),t&&s(bt),t&&s(Ao),t&&s(pe),t&&s(To),t&&s(gt),t&&s(Wo),t&&s(Q),M&&M.d(t),t&&s(Io),t&&s(ce),t&&s(Ho),t&&s(ie),t&&s(So),t&&s(_t),t&&s(Ro),t&&s(Be),t&&s(Lo),t&&s(N),t&&s(qo),t&&s(ot),t&&s(Mo),t&&s(ue),t&&s(No),t&&s(Ot),t&&s(Bo),t&&s(de),t&&s(Yo),t&&s(Ye),t&&s($o),t&&s(lt),t&&s(Go),t&&s(Ct),t&&s(Fo),t&&s(g),t&&s(Uo),t&&s(fe),t&&s(Jo),t&&s(X),t&&s(zo),t&&s($e),t&&s(Vo),t&&s(Ge),t&&s(Ko),t&&s(xt),t&&s(Qo),t&&s(Fe),t&&s(Xo),t&&s(At),t&&s(Zo),t&&s(q),t&&s(tl),t&&s(k),t&&s(el),t&&s(he),t&&s(sl),t&&s(Z),t&&s(al),t&&s(ve),t&&s(nl),t&&s(Tt),t&&s(ol),t&&s(y),t&&s(ll),t&&s(Wt),t&&s(pl),t&&s(me),t&&s(cl),t&&s(Ue),t&&s(il),t&&s(It),t&&s(rl),t&&s(St),t&&s(ul),t&&s(we),t&&s(dl),t&&s(Rt),t&&s(kl),t&&s(Je),t&&s(fl),t&&s(ge),t&&s(hl),t&&s(ze),t&&s(vl),t&&s(Ee),t&&s(ml),t&&s(qt),t&&s(yl),t&&s(Nt),t&&s(wl),t&&s(_e),t&&s(bl),t&&s(B),t&&s(gl),t&&s(Bt),t&&s(El),t&&s($t),t&&s(_l),t&&s(pt),t&&s(Dl),t&&s(De),t&&s(Ol),t&&s(Ve),t&&s(Cl),t&&s(Oe),t&&s(Pl),t&&s(Y),t&&s(xl),t&&s(Ce),t&&s(jl),t&&s(tt),t&&s(Al),t&&s(j),t&&s(Tl),t&&s(I),t&&s(Wl),t&&s(O),t&&s(Il),t&&s(Ke),t&&s(Hl),t&&s(je)}}}function a1(at){let b,T,U;const C=[at[0],Vv];let J={$$slots:{default:[s1]},$$scope:{ctx:at}};for(let h=0;h<C.length;h+=1)J=Ik(J,C[h]);return T=new e1({props:J}),{c(){b=u(),Fm(T.$$.fragment),this.h()},l(h){Um("svelte-b5ev1l",document.head).forEach(s),b=d(h),Jm(T.$$.fragment,h),this.h()},h(){document.title="Make a blog with svelte kit and host on github (Updated on Feb 7 - 2023)"},m(h,R){i(h,b,R),zm(T,h,R),U=!0},p(h,[R]){const Te=R&1?Vm(C,[R&1&&Jv(h[0]),R&0&&Jv(Vv)]):{};R&4&&(Te.$$scope={dirty:R,ctx:h}),T.$set(Te)},i(h){U||(Kv(T.$$.fragment,h),U=!0)},o(h){Qv(T.$$.fragment,h),U=!1},d(h){h&&s(b),Km(T,h)}}}const Vv={title:"Make a blog with svelte kit and host on github (Updated on Feb 7 - 2023)",created:"2021-05-18",slug:"2021-05-81-make-blog-with-sveltekit"};function n1(at,b,T){let{$$slots:U={},$$scope:C}=b;return at.$$set=J=>{T(0,b=Ik(Ik({},b),zv(J))),"$$scope"in J&&T(2,C=J.$$scope)},b=zv(b),[b,U,C]}class p1 extends Ym{constructor(b){super(),$m(this,b,n1,a1,Gm,{})}}export{p1 as default,Vv as metadata};
