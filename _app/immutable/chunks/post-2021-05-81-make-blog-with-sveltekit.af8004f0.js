import{S as q1,i as M1,s as N1,R as bh,a as u,z as Y1,O as B1,h as s,c as d,A as $1,b as i,B as G1,T as U1,U as $v,g as Fv,d as Jv,C as F1,V as Gv,E as J1,k as o,r as a,l,m as p,u as n,p as r,G as e,H as z1,I as V1,J as K1}from"./index.bc8fed38.js";import{P as Q1}from"./post_layout.75190885.js";function X1(ot){let b,W,z,P,V,k,q,Se,Zt,dp,fp,co,Le,hp,io,Re,kp,ro,ft,mp,te,vp,yp,uo,ht,kt,rs,wp,fo,mt,bp,us,Ep,gp,ho,ee,zv=`<code class="language-bash"><span class="token function">npm</span> create svelte@latest <span class="token operator">&lt;</span>project_name<span class="token operator">></span>
<span class="token builtin class-name">cd</span> <span class="token operator">&lt;</span>project_name<span class="token operator">></span>
<span class="token function">npm</span> <span class="token function">install</span>
<span class="token function">npm</span> run dev -- <span class="token parameter variable">--open</span></code>`,ko,lt,_p,ds,Dp,Op,fs,Cp,mo,vt,Pp,hs,xp,jp,vo,x,Tp,ks,Ap,Ip,ms,Wp,Hp,vs,Sp,Lp,ys,Rp,qp,ws,Mp,Np,yo,yt,wt,bs,Yp,wo,se,Vv='<code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> <span class="token parameter variable">-D</span> mdsvex</code>',bo,Q,Bp,Es,$p,Gp,gs,Up,Fp,Eo,ae,Kv=`<code class="language-javascript"><span class="token keyword">const</span> config <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
	<span class="token literal-property property">extensions</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'.svelte'</span><span class="token punctuation">,</span> <span class="token string">'.md'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
	<span class="token literal-property property">preprocess</span><span class="token operator">:</span> <span class="token punctuation">[</span>
		<span class="token function">vitePreprocess</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>

		<span class="token function">mdsvex</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
			<span class="token literal-property property">extensions</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'.md'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
			<span class="token literal-property property">layout</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
				<span class="token literal-property property">blog</span><span class="token operator">:</span> <span class="token string">'./src/routes/blog/post_layout.svelte'</span>
			<span class="token punctuation">&#125;</span>
		<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
	<span class="token punctuation">]</span><span class="token punctuation">,</span>
	<span class="token comment">// rest of the config</span></code>`,go,qe,Jp,_o,O,zp,_s,Vp,Kp,Ds,Qp,Xp,Os,Zp,tc,Cs,ec,sc,Ps,ac,nc,xs,oc,lc,Do,ne,Qv=`<code class="language-svelte"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">
	<span class="token keyword">import</span> PostHeader <span class="token keyword">from</span> <span class="token string">'$lib/PostHeader.svelte'</span><span class="token punctuation">;</span>
	<span class="token keyword">import</span> Bio <span class="token keyword">from</span> <span class="token string">'$lib/Bio.svelte'</span><span class="token punctuation">;</span>
	<span class="token comment">// if i don't add the exports here, i can't access title and created as props</span>
	<span class="token keyword">export</span> <span class="token keyword">let</span> title<span class="token punctuation">;</span>
	<span class="token keyword">export</span> <span class="token keyword">let</span> created<span class="token punctuation">;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>PostHeader</span> <span class="token language-javascript"><span class="token punctuation">&#123;</span>title<span class="token punctuation">&#125;</span></span> <span class="token language-javascript"><span class="token punctuation">&#123;</span>created<span class="token punctuation">&#125;</span></span> <span class="token punctuation">/></span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>slot</span> <span class="token punctuation">/></span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Browse more posts<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hr</span> <span class="token punctuation">/></span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">></span></span>About me<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Bio</span> <span class="token punctuation">/></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code>`,Oo,M,js,pc,cc,Ts,ic,rc,As,uc,dc,Is,fc,hc,Co,j,kc,Ws,mc,vc,Hs,yc,wc,Ss,bc,Ec,Ls,gc,_c,Rs,Dc,Oc,Po,H,Cc,qs,Pc,xc,Ms,jc,Tc,Ns,Ac,Ic,Ys,Wc,Hc,xo,bt,Et,Bs,Sc,jo,Me,Lc,To,X,Rc,$s,qc,Mc,Gs,Nc,Yc,Ao,m,Bc,Us,$c,Gc,Fs,Uc,Fc,Js,Jc,zc,zs,Vc,Kc,Vs,Qc,Xc,Ks,Zc,ti,Qs,ei,si,Xs,ai,ni,Zs,oi,li,ta,pi,ci,Io,oe,Xv=`<code class="language-typescript"><span class="token comment">// src/routes/api/posts/+server.ts file</span>
<span class="token keyword">import</span> <span class="token punctuation">&#123;</span> json <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'@sveltejs/kit'</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token keyword">type</span> <span class="token punctuation">&#123;</span> RequestHandler <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'@sveltejs/kit'</span><span class="token punctuation">;</span>

<span class="token keyword">interface</span> <span class="token class-name">Post</span> <span class="token punctuation">&#123;</span>
	created<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
	title<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
	slug<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">function</span> <span class="token function">dateSort</span><span class="token punctuation">(</span>a<span class="token operator">:</span> Post<span class="token punctuation">,</span> b<span class="token operator">:</span> Post<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token comment">// have to use getTime to satisfy typescript</span>
	<span class="token comment">// And if i make this file a js file, the endpoint is not detected since</span>
	<span class="token comment">// it's a typescript svelte project</span>
	<span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span>created<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>created<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token constant">GET</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">const</span> modules <span class="token operator">=</span> <span class="token keyword">import</span><span class="token punctuation">.</span>meta<span class="token punctuation">.</span><span class="token function">glob</span><span class="token punctuation">(</span><span class="token string">'../../blog/*.md'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">const</span> posts<span class="token operator">:</span> <span class="token builtin">Array</span><span class="token operator">&lt;</span>Post<span class="token operator">></span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

	<span class="token keyword">await</span> <span class="token builtin">Promise</span><span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span>
		Object<span class="token punctuation">.</span><span class="token function">entries</span><span class="token punctuation">(</span>modules<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">[</span>_<span class="token punctuation">,</span> module<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
			<span class="token keyword">const</span> <span class="token punctuation">&#123;</span> metadata <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">module</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

			posts<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>metadata<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
	<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token comment">// Newest first</span>
	posts<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>dateSort<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">return</span> <span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
		posts<span class="token operator">:</span> posts
	<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span> satisfies RequestHandler<span class="token punctuation">;</span></code>`,Wo,Ne,ii,Ho,gt,K,ri,ea,ui,di,sa,fi,hi,aa,ki,mi,vi,le,yi,na,wi,bi,So,v,Ei,oa,gi,_i,la,Di,Oi,pa,Ci,Pi,ca,xi,ji,ia,Ti,Ai,ra,Ii,Wi,ua,Hi,Si,da,Li,Ri,fa,qi,Mi,Lo,pe,Zv=`<code class="language-typescript"><span class="token comment">// src/routes/+page.ts file</span>
<span class="token keyword">export</span> <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">load</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> fetch <span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">const</span> response <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">'/api/posts'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">const</span> <span class="token punctuation">&#123;</span> posts <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token keyword">await</span> response<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">return</span> <span class="token punctuation">&#123;</span>
		posts
	<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code>`,Ro,Ye,Ni,qo,Be,Yi,Mo,ce,t1=`<code class="language-md"><span class="token front-matter-block"><span class="token punctuation">---</span>
<span class="token front-matter yaml language-yaml">title: Make a blog with svelte kit and host on github
date: '2021-05-18'
slug: '2021-05-81-make-blog-with-sveltekit'</span>
<span class="token punctuation">---</span></span></code>`,No,$e,Bi,Yo,ie,e1=`<code class="language-json"><span class="token punctuation">&#123;</span>
	title<span class="token operator">:</span> Make a blog with svelte kit and host on github<span class="token punctuation">,</span>
	date<span class="token operator">:</span> '<span class="token number">2021</span><span class="token number">-05</span><span class="token number">-18</span>'<span class="token punctuation">,</span>
	slug<span class="token operator">:</span> '<span class="token number">2021</span><span class="token number">-05</span><span class="token number">-81</span>-make-blog-with-sveltekit'<span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span></code>`,Bo,Ge,$i,$o,re,s1=`<code class="language-html">&#123;#each posts as post&#125;
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/blog/&#123;post.metadata.slug&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>&#123;post.metadata.title&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>
&#123;/each&#125;</code>`,Go,_t,Gi,ha,Ui,Fi,Uo,ue,a1=`<code class="language-svelte"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ts<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">
	<span class="token keyword">import</span> type <span class="token punctuation">&#123;</span> PageData <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'./$types'</span><span class="token punctuation">;</span>

	<span class="token keyword">export</span> <span class="token keyword">let</span> <span class="token literal-property property">data</span><span class="token operator">:</span> PageData<span class="token punctuation">;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>Blog posts<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>posts<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
		<span class="token each"><span class="token punctuation">&#123;</span><span class="token keyword">#each</span> <span class="token language-javascript">data<span class="token punctuation">.</span>posts </span><span class="token keyword">as</span> <span class="token language-javascript">post<span class="token punctuation">&#125;</span></span></span>
			<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>
				<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>prefetch<span class="token punctuation">"</span></span> <span class="token attr-name">href="blog</span>/<span class="token language-javascript"><span class="token punctuation">&#123;</span>post<span class="token punctuation">.</span>slug<span class="token punctuation">&#125;</span></span><span class="token attr-name">"</span><span class="token punctuation">></span></span>
					<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>
						<span class="token language-javascript"><span class="token punctuation">&#123;</span>post<span class="token punctuation">.</span>title<span class="token punctuation">&#125;</span></span>
					<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>
				<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>
				<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>date<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
					<span class="token language-javascript"><span class="token punctuation">&#123;</span>post<span class="token punctuation">.</span>created<span class="token punctuation">&#125;</span></span>
				<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
			<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>
		<span class="token each"><span class="token punctuation">&#123;</span><span class="token keyword">/each</span><span class="token punctuation">&#125;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code>`,Fo,Dt,Ot,ka,Ji,Jo,Z,zi,ma,Vi,Ki,Qi,zo,de,n1=`<code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>main</span> <span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>max-width: 42rem;margin:auto<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>logo logo-big<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>header-link<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> unstack.in <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>slot</span> <span class="token punctuation">/></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>main</span><span class="token punctuation">></span></span></code>`,Vo,fe,Xi,he,Zi,Ko,Ct,Pt,va,tr,Qo,Ue,er,Xo,B,sr,ya,ar,nr,wa,or,lr,ba,pr,cr,Zo,pt,ir,Ea,rr,ur,ga,dr,tl,ke,o1=`<code class="language-javascript"><span class="token comment">// in svelte.config.js file somewhere</span>
<span class="token function">mdsvex</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
	<span class="token literal-property property">extensions</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'.md'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
	<span class="token literal-property property">layout</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
		<span class="token literal-property property">blog</span><span class="token operator">:</span> <span class="token string">'./src/routes/blog/post_layout.svelte'</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code>`,el,xt,fr,_a,hr,kr,sl,me,l1=`<code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span>
	import PostHeader from '$lib/PostHeader.svelte';
	// if i don't add the exports here, i can't access title and date as props
	export let title;
	export let date;
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>PostHeader</span> <span class="token attr-name">&#123;title&#125;</span> <span class="token attr-name">&#123;date&#125;</span> <span class="token punctuation">/></span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>slot</span> <span class="token punctuation">/></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code>`,al,Fe,mr,nl,ct,vr,Da,yr,wr,ve,br,ol,jt,Tt,Oa,Er,ll,E,gr,Ca,_r,Dr,Pa,Or,Cr,xa,Pr,xr,ja,jr,Tr,Ta,Ar,Ir,Aa,Wr,Hr,Ia,Sr,Lr,pl,ye,p1=`<code class="language-undefined">src
	routes
		blog
			blog-post-title
				+page.md
			asinine-personal-details-post
				+page.md
			very-basic-trick-but-my-god-its-popular
				+page.md
			super-complicated-post-no-one-wants-to-read
				+page.md
			more-about-myself-me-me-me-me
				+page.md</code>`,cl,tt,Rr,Wa,qr,Mr,Ha,Nr,Yr,il,Je,Br,rl,ze,$r,ul,At,It,Sa,Gr,dl,Ve,Ur,fl,Wt,La,Fr,Jr,Ra,zr,hl,N,qa,Vr,Kr,Ma,Qr,Xr,Na,Zr,tu,Ya,eu,su,kl,f,Ba,au,nu,$a,ou,lu,Ga,pu,cu,Ua,iu,ru,Fa,uu,du,Ja,fu,hu,za,ku,mu,Va,vu,yu,Ka,wu,bu,Qa,Eu,gu,Xa,_u,Du,Za,Ou,Cu,tn,Pu,xu,en,ju,Tu,sn,Au,Iu,an,Wu,Hu,ml,we,c1=`<code class="language-typescript"><span class="token comment">// /src/blog/[slug]/+page.ts file</span>
<span class="token keyword">function</span> <span class="token function">load</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> params <span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>params<span class="token punctuation">.</span>slug<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// will print whatever comes after /blog/ in the url</span>
<span class="token punctuation">&#125;</span></code>`,vl,et,Su,nn,Lu,Ru,on,qu,Mu,yl,be,i1=`<code class="language-typescript"><span class="token keyword">import</span> <span class="token keyword">type</span> <span class="token punctuation">&#123;</span> PageLoad <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'./$types'</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">const</span> load <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">&#123;</span> params <span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">const</span> <span class="token punctuation">&#123;</span> slug <span class="token punctuation">&#125;</span> <span class="token operator">=</span> params<span class="token punctuation">;</span>
	<span class="token comment">// try &#123;</span>
	<span class="token keyword">const</span> post <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">&#96;</span><span class="token string">/src/routes/blog/post-</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>slug<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">.md</span><span class="token template-punctuation string">&#96;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">return</span> <span class="token punctuation">&#123;</span>
		content<span class="token operator">:</span> post<span class="token punctuation">.</span>default
	<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
	<span class="token comment">// &#125; catch (e) &#123;</span>
	<span class="token comment">// 	return &#123;</span>
	<span class="token comment">// 		error: 'Could not load page'</span>
	<span class="token comment">// 	&#125;;</span>
	<span class="token comment">// &#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span> satisfies PageLoad<span class="token punctuation">;</span></code>`,wl,Ht,Nu,ln,Yu,Bu,bl,Ke,$u,El,St,D,Gu,pn,Uu,Fu,cn,Ju,zu,rn,Vu,Ku,un,Qu,Xu,dn,Zu,td,fn,ed,sd,hn,ad,nd,od,it,ld,kn,pd,cd,mn,id,rd,gl,y,ud,vn,dd,fd,yn,hd,kd,wn,md,vd,bn,yd,wd,En,bd,Ed,gn,gd,_d,_n,Dd,Od,Dn,Cd,Pd,On,xd,jd,_l,Lt,Td,Cn,Ad,Id,Dl,Ee,r1=`<code class="language-svelte"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ts<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">
	<span class="token keyword">import</span> type <span class="token punctuation">&#123;</span> PageData <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'./$types'</span><span class="token punctuation">;</span>
	<span class="token keyword">export</span> <span class="token keyword">let</span> <span class="token literal-property property">data</span><span class="token operator">:</span> PageData<span class="token punctuation">;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">svelte:</span>component</span> <span class="token attr-name">this=</span><span class="token language-javascript"><span class="token punctuation">&#123;</span>data<span class="token punctuation">.</span>content<span class="token punctuation">&#125;</span></span> <span class="token punctuation">/></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code>`,Ol,Qe,Wd,Cl,Rt,qt,Pn,Hd,Pl,Mt,Sd,ge,Ld,Rd,xl,_e,qd,De,Md,jl,Nt,Yt,xn,Nd,Tl,Xe,Yd,Al,Oe,u1='<code class="language-bash"><span class="token function">npm</span> i <span class="token parameter variable">-D</span> @sveltejs/adapter-static@next</code>',Il,Ze,Bd,Wl,Ce,d1=`<code class="language-javascript"><span class="token keyword">import</span> staticAdapter <span class="token keyword">from</span> <span class="token string">'@sveltejs/adapter-static'</span><span class="token punctuation">;</span>

<span class="token comment">/** @type &#123;import('@sveltejs/kit').Config&#125; */</span>
<span class="token keyword">const</span> config <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
	<span class="token literal-property property">extensions</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'.svelte'</span><span class="token punctuation">,</span> <span class="token operator">...</span>mdsvexConfig<span class="token punctuation">.</span>extensions<span class="token punctuation">]</span><span class="token punctuation">,</span>
	<span class="token comment">// Consult https://github.com/sveltejs/svelte-preprocess</span>
	<span class="token comment">// for more information about preprocessors</span>
	<span class="token literal-property property">preprocess</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token function">mdsvex</span><span class="token punctuation">(</span>mdsvexConfig<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">preprocess</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>

	<span class="token literal-property property">kit</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
		<span class="token literal-property property">adapter</span><span class="token operator">:</span> <span class="token function">staticAdapter</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
			<span class="token comment">// default options are shown</span>
			<span class="token literal-property property">pages</span><span class="token operator">:</span> <span class="token string">'build'</span><span class="token punctuation">,</span>
			<span class="token literal-property property">assets</span><span class="token operator">:</span> <span class="token string">'build'</span><span class="token punctuation">,</span>
			<span class="token literal-property property">fallback</span><span class="token operator">:</span> <span class="token keyword">null</span>
		<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code>`,Hl,Bt,$t,jn,$d,Sl,Gt,Gd,Tn,Ud,Fd,Ll,Pe,f1=`<code class="language-undefined">npm run build
cd build
npx serve</code>`,Rl,$,Jd,An,zd,Vd,In,Kd,Qd,Wn,Xd,Zd,ql,Ut,Ft,Hn,tf,Ml,Jt,ef,Sn,sf,af,Nl,rt,Ln,nf,of,Rn,lf,pf,Yl,xe,h1='<code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> <span class="token parameter variable">-D</span> gh-pages</code>',Bl,ts,cf,$l,je,k1=`<code class="language-json"><span class="token property">"scripts"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
	<span class="token property">"deploy"</span><span class="token operator">:</span> <span class="token string">"npm run build &amp;&amp; gh-pages -b master -d build -t"</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
</code>`,Gl,G,rf,qn,uf,df,Mn,ff,hf,Nn,kf,mf,Ul,Te,Yn,vf,yf,Fl,st,zt,Bn,wf,$n,bf,Ef,Jl,T,gf,Gn,_f,Df,Un,Of,Cf,Fn,Pf,xf,Ae,jf,Tf,Ie,Af,If,zl,S,Wf,Jn,Hf,Sf,zn,Lf,Rf,Vn,qf,Mf,Kn,Nf,Yf,Vl,C,Bf,Qn,$f,Gf,Xn,Uf,Ff,Zn,Jf,zf,to,Vf,Kf,eo,Qf,Xf,so,Zf,th,Kl,es,eh,Ql,We,sh,He,ah,ss;const nh=ot[1].default,Y=J1(nh,ot,ot[2],null);return{c(){b=o("p"),W=a("After reading this post, you should be able to make a blog using svelte kit, and host it on github or any other hosting service of your choice. You can write your posts as markdown files."),z=u(),P=o("p"),V=a("This post assumes that you know what svelte is and also what hosting a static site means. You can read more about svelte here - "),k=o("a"),q=a("https://svelte.dev."),Se=a(" And more about svelte kit here - "),Zt=o("a"),dp=a("https://kit.svelte.dev"),fp=a("."),co=u(),Le=o("p"),hp=a("I recently moved by teeny tiny unmaintained blog from gatsby to svelte kit. Removing gatsby removed a lot of complexity which comes with gatsby. I no longer understood what was going on under the hood and was too scared to upgrade gatsby."),io=u(),Re=o("p"),kp=a("Switching to svelte-kit was relatively straight forward except for a few quirks. The quirks mainly had to do with rendering markdown as html and figuring out how to publish the final site through github."),ro=u(),ft=o("p"),mp=a("If you don’t want to read the whole article, you can checkout the final code here - "),te=o("a"),vp=a("https://github.com/mukeshsoni/mukeshsoni.github.io/tree/svelte"),yp=a("."),uo=u(),ht=o("h3"),kt=o("a"),rs=o("span"),wp=a("Step 1 - Setup svelte kit template"),fo=u(),mt=o("p"),bp=a("You can get started with svelte kit template using their "),us=o("code"),Ep=a("npm init"),gp=a(" command -"),ho=u(),ee=o("pre"),ko=u(),lt=o("p"),_p=a("When you run "),ds=o("code"),Dp=a("npm create svelte@latest <your_project_name>"),Op=a(", you will be asked a set of questions. E.g. Do you want to enable typescript in this project? Once you answer all the questions, the command will create a set of files in the "),fs=o("your_project_name"),Cp=a("folder. Think of the command as a helper which chooses the right template for you."),mo=u(),vt=o("p"),Pp=a("Once the "),hs=o("code"),xp=a("create"),jp=a(" command creates the files, you can go inside the folder and install the npm dependencies. The create command does not install the dependencies. It only specifies the list of dependencies in the package.json file."),vo=u(),x=o("p"),Tp=a("After the dependencies are installed, you can invoke the "),ks=o("code"),Ap=a("dev"),Ip=a(" script which is already defined in your "),ms=o("code"),Wp=a("package.json"),Hp=a(" file by the "),vs=o("code"),Sp=a("create"),Lp=a(" command - "),ys=o("code"),Rp=a("npm run dev -- --open"),qp=a(". This should start a localhost server on port 5273. Whatever port it starts the server on will be shown on the terminal. "),ws=o("code"),Mp=a("sveltekit"),Np=a(" uses vite for building and serving the site."),yo=u(),yt=o("h3"),wt=o("a"),bs=o("span"),Yp=a("Step 2 - Add mdsvex to convert markdown files to html"),wo=u(),se=o("pre"),bo=u(),Q=o("p"),Bp=a("Add "),Es=o("code"),$p=a("mdsvex"),Gp=a(" preprocessor to your "),gs=o("code"),Up=a("svelte.config.js"),Fp=a(" file -"),Eo=u(),ae=o("pre"),go=u(),qe=o("p"),Jp=a("You will have to restart the dev server for mdsvex preprocessor to kick in."),_o=u(),O=o("p"),zp=a("We have also added link to blog post layout in "),_s=o("code"),Vp=a("layout"),Kp=a(" option passed to "),Ds=o("code"),Qp=a("mdsvex"),Xp=a(" function. This tells "),Os=o("code"),Zp=a("mdsvex"),tc=a(" to use the "),Cs=o("code"),ec=a("post_layout.svelte"),sc=a(" layout for all the stuff rendered inside "),Ps=o("code"),ac=a("blog"),nc=a(" route. My "),xs=o("code"),oc=a("post_layout.svelte"),lc=a(" file looks like this -"),Do=u(),ne=o("pre"),Oo=u(),M=o("p"),js=o("code"),pc=a("PostHeader"),cc=a(" and "),Ts=o("code"),ic=a("Bio"),rc=a(" are regular svelte component which are present inside "),As=o("code"),uc=a("src/lib"),dc=a(" folder. "),Is=o("code"),fc=a("<slot/>"),hc=a(" is where the content of our markdown file will be put."),Co=u(),j=o("p"),kc=a("Try adding a markdown file called "),Ws=o("code"),mc=a("+page.md"),vc=a(" somewhere in your "),Hs=o("code"),yc=a("routes"),wc=a(" folder and going to the route pointed by the folder inside the "),Ss=o("code"),bc=a("routes"),Ec=a(" folder. E.g. Add a file "),Ls=o("code"),gc=a("src/routes/my-awesome-post/+page.md"),_c=a(" and put some content in there. You should be able to view that content on "),Rs=o("code"),Dc=a("localhost:5173/my-awesome-post"),Oc=a("."),Po=u(),H=o("p"),Cc=a("Note that simply adding a markdown file with any name will not work. "),qs=o("code"),Pc=a("sveltekit"),xc=a(" after "),Ms=o("code"),jc=a("v1.0.0"),Tc=a(" only treats files starting with "),Ns=o("code"),Ac=a("+page"),Ic=a(" or "),Ys=o("code"),Wc=a("+server"),Hc=a(" for routing purposes. This will give us some problem when trying to render our blog posts dynamically."),xo=u(),bt=o("h3"),Et=o("a"),Bs=o("span"),Sc=a("Step 3 - Show a list of all blog posts on home page"),jo=u(),Me=o("p"),Lc=a("We want to collect all our markdown files and show the list of blog posts on the home page or on some other path, so that our users can browse the super amazing content we publish."),To=u(),X=o("p"),Rc=a("We will create an api endpoint to get the list of posts. We will use "),$s=o("code"),qc=a("import.meta.glob"),Mc=a(" to get the metadata for each of the markdown files. . If we try to get the metadata using a glob pattern in our "),Gs=o("code"),Nc=a("routes/+page.svelte"),Yc=a(" file, it will load all the blog posts upfront too. Which might be a disaster if we have too many blogs posts or our posts are heavy."),Ao=u(),m=o("p"),Bc=a(`So we create an endpoint which returns the metadata for blogs in
`),Us=o("code"),$c=a("/src/routes/api/posts/+server.ts"),Gc=a(" file. Just like sveltekit automatically treats any file called "),Fs=o("code"),Uc=a("+page.svelte"),Fc=a(" as a route file when it’s inside the "),Js=o("code"),Jc=a("routes"),zc=a(" folder, it treats "),zs=o("code"),Vc=a("+server.ts"),Kc=a(" (or "),Vs=o("code"),Qc=a("+server.js"),Xc=a(") file as a server endpoint. We can define a function inside this file which might then respond to a "),Ks=o("code"),Zc=a("GET"),ti=a(" or "),Qs=o("code"),ei=a("POST"),si=a(" or "),Xs=o("code"),ai=a("DELETE"),ni=a(" or "),Zs=o("code"),oi=a("UPDATE"),li=a(" http request. In our case we need it to respond to a "),ta=o("code"),pi=a("GET"),ci=a(" request."),Io=u(),oe=o("pre"),Wo=u(),Ne=o("p"),ii=a("A few things to keep in mind for the above endpoint -"),Ho=u(),gt=o("ul"),K=o("li"),ri=a("We don’t return our object directly but whatever "),ea=o("code"),ui=a("json"),di=a(" function exposed by sveltekit returns. If you look at the docs, it will tell you to return "),sa=o("code"),fi=a("new Response('your response')"),hi=a(". But that doesn’t work for a json response. The "),aa=o("code"),ki=a("json"),mi=a(" utility makes sure that the right headers are set for json response type."),vi=u(),le=o("li"),yi=a("We make sure that our GET function adheres to "),na=o("code"),wi=a("RequestHandler"),bi=a(" type which helps us catch any type related bugs."),So=u(),v=o("p"),Ei=a("We will now fetch these posts using the endpoint we created. We create a "),oa=o("code"),gi=a("+page.ts"),_i=a(" file inside "),la=o("code"),Di=a("routes"),Oi=a(" folder, which is executed by sveltekit on both server and client before it renders "),pa=o("code"),Ci=a("+page.svelte"),Pi=a(" file. The "),ca=o("code"),xi=a("+page.ts"),ji=a(" file will export a "),ia=o("code"),Ti=a("load"),Ai=a(" function which can return whatever it likes. Whatever is returned from the "),ra=o("code"),Ii=a("load"),Wi=a(" function can then be accessed in "),ua=o("code"),Hi=a("+page.svelte"),Si=a(" as a variable named "),da=o("code"),Li=a("data"),Ri=a(" by exporting it - "),fa=o("code"),qi=a("export let data"),Mi=a("."),Lo=u(),pe=o("pre"),Ro=u(),Ye=o("p"),Ni=a(`Does having an endpoint mean that we need a server too? Ans - No. When we run
the build script, which runs the static adapter, the endpoint is called and the
post metadata is resolved before the final output is produced.`),qo=u(),Be=o("p"),Yi=a("Now, posts should have the list of posts with their metadata, as defined by you at the top of each post. E.g. If you have this at the top of a post -"),Mo=u(),ce=o("pre"),No=u(),$e=o("p"),Bi=a("That post’s metadata would be an object and look like this"),Yo=u(),ie=o("pre"),Bo=u(),Ge=o("p"),$i=a("You can then render whatever metadata you want to."),$o=u(),re=o("pre"),Go=u(),_t=o("p"),Gi=a("Inside "),ha=o("code"),Ui=a("+page.svelte"),Fi=a(" file"),Uo=u(),ue=o("pre"),Fo=u(),Dt=o("h3"),Ot=o("a"),ka=o("span"),Ji=a("Step 4 - Add a layout component for the blog"),Jo=u(),Z=o("p"),zi=a("If you have a header which you want to show for each page in the blog/site, you can add that as a layout component. For e.g. adding "),ma=o("code"),Vi=a("routes/+layout.svelte"),Ki=a(" file, with a "),Y&&Y.c(),Qi=a(" component in it, will wrap every route content inside this layout component. Example layout component -"),zo=u(),de=o("pre"),Vo=u(),fe=o("p"),Xi=a("You can read more about svelte kit layout components here - "),he=o("a"),Zi=a("https://kit.svelte.dev/docs/routing#layout"),Ko=u(),Ct=o("h3"),Pt=o("a"),va=o("span"),tr=a("Step 5 - Add a layout component for individual blog posts"),Qo=u(),Ue=o("p"),er=a("This was trickier than i thought. At least my first attempt. And when i found the solution, it was not as tricky as i thought. At least not as tricky as trying to read this paragraph."),Xo=u(),B=o("p"),sr=a("I thought i would utilize svelte-kit’s layout capability, with "),ya=o("code"),ar=a("+layout.svelte"),nr=a(" file in the blog folder. But I wanted the layout component for blog post to take care of the post title. My first attempt was to use the "),wa=o("code"),or=a("load"),lr=a(" function provided by "),ba=o("code"),pr=a("svelte-kit"),cr=a(" and then fetching the metadata for the post by importing that file. That worked during development but didn’t work with static adapter. Since i was importing file dynamically, it needed a server."),Zo=u(),pt=o("p"),ir=a("Then i found out about layouts in mdsvex. All i had to do was add a svelte component somewhere, say "),Ea=o("code"),rr=a("src/routes/blog"),ur=a(" folder, and then point mdsvex to that file. That is done in "),ga=o("code"),dr=a("mdsvex.config.cjs"),tl=u(),ke=o("pre"),el=u(),xt=o("p"),fr=a("And the "),_a=o("code"),hr=a("post_layout.svelte"),kr=a(" component looked like this"),sl=u(),me=o("pre"),al=u(),Fe=o("p"),mr=a("Now all my blog posts had a title and date at the top. The layout component also enabled styling the container for each post, if i wanted to."),nl=u(),ct=o("p"),vr=a("More about "),Da=o("code"),yr=a("mdsvex"),wr=a(" layout components here - "),ve=o("a"),br=a("https://mdsvex.pngwn.io/docs#layouts"),ol=u(),jt=o("h3"),Tt=o("a"),Oa=o("span"),Er=a("Step 6 - Rendering individual blog post"),ll=u(),E=o("p"),gr=a("Let’s say we have 20 odd blog posts on our blog. Each in their own markdown file. And we want to render them on a route like "),Ca=o("code"),_r=a("<my-site>.com/blog/blog-post-title"),Dr=a(". We cannot just create a file named "),Pa=o("code"),Or=a("blog-post-title.md"),Cr=a(" inside "),xa=o("code"),Pr=a("src/routes/blog/"),xr=a(" folder and be done. Because those files will not be treated as routes by "),ja=o("code"),jr=a("sveltekit"),Tr=a(". Remember, "),Ta=o("code"),Ar=a("sveltekit"),Ir=a(" only treats a file as a route if it starts with "),Aa=o("code"),Wr=a("+page"),Hr=a(". So one way to render our blog posts would be to create one folder per blog post and then create a "),Ia=o("code"),Sr=a("+page.md"),Lr=a(" file inside each of those folders which then contains the post content. E.g."),pl=u(),ye=o("pre"),cl=u(),tt=o("p"),Rr=a("Now we should be able to access "),Wa=o("code"),qr=a("localhost:5173/blog/blog-post-title"),Mr=a(" or "),Ha=o("code"),Nr=a("localhost:5173/blog/asinite-personal-details-post"),Yr=a("."),il=u(),Je=o("p"),Br=a("I actually like this technique since most of us don’t write too many posts. I would bet most of us write less than 10 blog posts in our life time. And this is a perfectly file way to render those mostly asinine posts."),rl=u(),ze=o("p"),$r=a("But we are certainly taking this much pain to render a super duper simple blog post because we like writing posts. We are doing it because we want to have some fun :). Let’s look at another way to render the same blog posts in a more dynamic way."),ul=u(),At=o("h4"),It=o("a"),Sa=o("span"),Gr=a("Step 6.2 - Rendering blog post dynamically"),dl=u(),Ve=o("p"),Ur=a("Here’s what we want to do -"),fl=u(),Wt=o("ul"),La=o("li"),Fr=a("Put all our post related markdown files in one folder"),Jr=u(),Ra=o("li"),zr=a("Write a script which then dynamically looks for the required file from the url, picks it up and renders it."),hl=u(),N=o("p"),qa=o("code"),Vr=a("sveltekit"),Kr=a(" supports something called dynamic routes for scenarios where we don’t have fixed routes like "),Ma=o("code"),Qr=a("/about"),Xr=a(" or "),Na=o("code"),Zr=a("/home"),tu=a(" etc. We want our "),Ya=o("code"),eu=a("/blog/blog-title"),su=a(" routes to automagically pick the right content."),kl=u(),f=o("p"),Ba=o("code"),au=a("sveltekit"),nu=a(" allows us to create a folder whose name looks like this "),$a=o("code"),ou=a("[some-name]"),lu=a(" inside the "),Ga=o("code"),pu=a("routes"),cu=a(" folder. When "),Ua=o("code"),iu=a("sveltekit"),ru=a(" comes across such a folder, it will then forwards all request coming to that path, to the "),Fa=o("code"),uu=a("+page.svelte"),du=a(" file inside that folder. E.g. if we create a folder like "),Ja=o("code"),fu=a("src/routes/blog/[slug]/"),hu=a(" then "),za=o("code"),ku=a("sveltekit"),mu=a(" will render the "),Va=o("code"),vu=a("+page.svelte"),yu=a(" file inside "),Ka=o("code"),wu=a("src/routes/blog/[slug]/"),bu=a(" folder for request to "),Qa=o("code"),Eu=a("/blog/abc"),gu=a(" or "),Xa=o("code"),_u=a("/blog/new-post"),Du=a(". It will use the name "),Za=o("code"),Ou=a("slug"),Cu=a(" inside the square brackets ("),tn=o("code"),Pu=a("[]"),xu=a(") to pass as params property to "),en=o("code"),ju=a("load"),Tu=a(" function in "),sn=o("code"),Au=a("+page.ts"),Iu=a(" file inside "),an=o("code"),Wu=a("[slug]"),Hu=a(" folder. E.g."),ml=u(),we=o("pre"),vl=u(),et=o("p"),Su=a("We will now use the "),nn=o("code"),Lu=a("load"),Ru=a(" function in "),on=o("code"),qu=a("+page.ts"),Mu=a(" to load the blog post asked for"),yl=u(),be=o("pre"),wl=u(),Ht=o("p"),Nu=a("We use "),ln=o("code"),Yu=a("import"),Bu=a(" to import the intended blog post. If we don’t file it in our file system, we return an error and hopefully also render an error page."),bl=u(),Ke=o("p"),$u=a("A few things to note above -"),El=u(),St=o("ul"),D=o("li"),Gu=a("One very weird thing happened when i had the "),pn=o("code"),Uu=a("import"),Fu=a(" for the "),cn=o("code"),Ju=a("md"),zu=a(" file for the "),rn=o("code"),Vu=a("slug"),Ku=a(" inside a try-catch block. The "),un=o("code"),Qu=a("adapter-static"),Xu=a(" could not figure out that it needed to prerender the "),dn=o("code"),Zu=a("md"),td=a(" file and would try to load the "),fn=o("code"),ed=a("md"),sd=a(" file from the route with a "),hn=o("code"),ad=a("GET"),nd=a(" request. That would fail with a 404 http code. I removed the try-catch as seen in code above, and adapter-static started doing it’s work perfectly."),od=u(),it=o("li"),ld=a("You will see in the above import is that i have a "),kn=o("code"),pd=a("post-"),cd=a(" prefix before the "),mn=o("code"),id=a("${slug}.md"),rd=a(" part of the file name for the blog post. We need that because otherwise vite complains that it’s not able to resolve the dynamic import. It needs some prefix to narrow down the list of files to look at inside the folder."),gl=u(),y=o("p"),ud=a("When use use "),vn=o("code"),dd=a("import"),fd=a(" to get our "),yn=o("code"),hd=a("md"),kd=a(" file, it is automatically passed through "),wn=o("code"),md=a("mdsvex"),vd=a(" which then returns a svelte component for the imported "),bn=o("code"),yd=a("md"),wd=a(" file. We return that svelte component as "),En=o("code"),bd=a("content"),Ed=a(" property from whatever object is returned from "),gn=o("code"),gd=a("load"),_d=a(" function. This "),_n=o("code"),Dd=a("svelte"),Od=a(" component returned by "),Dn=o("code"),Cd=a("import"),Pd=a(" cannot be render directly. We need to use "),On=o("code"),xd=a("<svelte:compoennt>"),jd=a(" directive to render a svelte component dynamically."),_l=u(),Lt=o("p"),Td=a("We do that inside "),Cn=o("code"),Ad=a("src/blog/[slug]/+page.svelte"),Id=a(" file -"),Dl=u(),Ee=o("pre"),Ol=u(),Qe=o("p"),Wd=a("Now we should be in a good place to render all our blog posts dynamically. Not that it matters."),Cl=u(),Rt=o("h3"),qt=o("a"),Pn=o("span"),Hd=a("Step 7 - Hosting the blog on github"),Pl=u(),Mt=o("p"),Sd=a("Github allows static site hosting in 2 ways - either as a user site or as a project site. You can read more about github hosting "),ge=o("a"),Ld=a("here"),Rd=a(". I have my site hosted as a user site. Which meant i had to push the output of the static adapter to my master branch. But what is this static adapter thingy?"),xl=u(),_e=o("p"),qd=a("svelte kit provides various adapters to convert your site in ways which are suited for your deployment environemnt. In our case, we want the site to be hosted on github (or netlify etc.) as a static site. No server. Just html pages with some css and js. For that, we use the "),De=o("a"),Md=a("svelte-kit static adapter"),jl=u(),Nt=o("h4"),Yt=o("a"),xn=o("span"),Nd=a("Install svelte static adapter"),Tl=u(),Xe=o("p"),Yd=a("We can install the static adapter from npm."),Al=u(),Oe=o("pre"),Il=u(),Ze=o("p"),Bd=a("We then have to change the svelte config to tell it to use static adapter -"),Wl=u(),Ce=o("pre"),Hl=u(),Bt=o("h4"),$t=o("a"),jn=o("span"),$d=a("Generate content to host as static site"),Sl=u(),Gt=o("p"),Gd=a("Once we have setup the static adapter, calling "),Tn=o("code"),Ud=a("npm run build"),Fd=a(" on the terminal should generate the build folder."),Ll=u(),Pe=o("pre"),Rl=u(),$=o("p"),Jd=a("We can test the build by going inside the build folder and using "),An=o("code"),zd=a("serve"),Vd=a(" or any other server to serve the files. "),In=o("code"),Kd=a("serve"),Qd=a(" starts a server on "),Wn=o("code"),Xd=a("localhost:5000"),Zd=a(" by default."),ql=u(),Ut=o("h4"),Ft=o("a"),Hn=o("span"),tf=a("Install gh-pages and deploy site"),Ml=u(),Jt=o("p"),ef=a("Now that we have the built files, we have to push them to the master branch, for user site, or to the "),Sn=o("code"),sf=a("gh-pages"),af=a(" branch for a project site. Once we update the branch and push to github, github will then deploy the files for us and we should be able to see our site come alive."),Nl=u(),rt=o("p"),Ln=o("code"),nf=a("gh-pages"),of=a(" is a handy tool to push the contents of any folder to any other branch in your repository. Installing "),Rn=o("code"),lf=a("gh-pages"),pf=a(" is straight forward with npm."),Yl=u(),xe=o("pre"),Bl=u(),ts=o("p"),cf=a("I then added an npm script to make deployment easy -"),$l=u(),je=o("pre"),Gl=u(),G=o("p"),rf=a("If you are deploying a project site, you can remove the "),qn=o("code"),uf=a("-b master"),df=a(" flag from gh-pages command. "),Mn=o("code"),ff=a("gh-pages"),hf=a(" pushes to "),Nn=o("code"),kf=a("gh-pages"),mf=a(" branch by default."),Ul=u(),Te=o("p"),Yn=o("code"),vf=a("gh-pages"),yf=a(" will also push the branch to remote. So if all goes well, you should be able to see your site live after some time."),Fl=u(),st=o("h4"),zt=o("a"),Bn=o("span"),wf=a("Fixing _apps/"),$n=o("em"),bf=a(".js and _apps/"),Ef=a(".css paths returning 404 on the deployed site"),Jl=u(),T=o("p"),gf=a("After you deploy your site by pushing the github branch, you will probably see your site looking a little different to what it looks on your development environment. That’s because some of the js and css is missing. If you open the devtools and then the network tab, a number of js and css files might be returning 404. All of those would be serving files from inside the "),Gn=o("code"),_f=a("__app"),Df=a(" folder. That is because github does not deploy the "),Un=o("code"),Of=a("__app"),Cf=a(" folder. All folders starting with an "),Fn=o("code"),Pf=a("_"),xf=a(" are to be ignored for sites built with "),Ae=o("a"),jf=a("jekyll"),Tf=a(". Read more about it "),Ie=o("a"),Af=a("here"),If=a("."),zl=u(),S=o("p"),Wf=a("To get around the problem, we have to add an empty file named "),Jn=o("code"),Hf=a(".nojekyll"),Sf=a(" to our static folder. "),zn=o("code"),Lf=a("npm run build"),Rf=a(" will then copy that file to the "),Vn=o("code"),qf=a("build"),Mf=a(" folder and "),Kn=o("code"),Nf=a("gh-pages"),Yf=a(" will then push that file to the required github branch."),Vl=u(),C=o("p"),Bf=a("You might find that it still doesn’t work. Mainly because "),Qn=o("code"),$f=a("gh-pages"),Gf=a(" is not pushing the "),Xn=o("code"),Uf=a(".nojekyll"),Ff=a(" file to the github branch, because "),Zn=o("code"),Jf=a("gh-pages"),zf=a(" tool ignores all files starting with a "),to=o("code"),Vf=a("."),Kf=a(" (dot). We can tell the "),eo=o("code"),Qf=a("gh-pages"),Xf=a(" tool to also push dot files from the build folder by using the "),so=o("code"),Zf=a("-t"),th=a(" flag. If you copied the deploy command from above, it’s already there."),Kl=u(),es=o("p"),eh=a("That is it! Go ahead and add a lot of blog posts as markdown files and deploy to your site. I am kidding. Building the blog with svelte kit was fun though."),Ql=u(),We=o("p"),sh=a("Link to final code - "),He=o("a"),ah=a("https://github.com/mukeshsoni/mukeshsoni.github.io/tree/svelte"),this.h()},l(t){b=l(t,"P",{});var c=p(b);W=n(c,"After reading this post, you should be able to make a blog using svelte kit, and host it on github or any other hosting service of your choice. You can write your posts as markdown files."),c.forEach(s),z=d(t),P=l(t,"P",{});var as=p(P);V=n(as,"This post assumes that you know what svelte is and also what hosting a static site means. You can read more about svelte here - "),k=l(as,"A",{href:!0,rel:!0});var Eh=p(k);q=n(Eh,"https://svelte.dev."),Eh.forEach(s),Se=n(as," And more about svelte kit here - "),Zt=l(as,"A",{href:!0,rel:!0});var gh=p(Zt);dp=n(gh,"https://kit.svelte.dev"),gh.forEach(s),fp=n(as,"."),as.forEach(s),co=d(t),Le=l(t,"P",{});var _h=p(Le);hp=n(_h,"I recently moved by teeny tiny unmaintained blog from gatsby to svelte kit. Removing gatsby removed a lot of complexity which comes with gatsby. I no longer understood what was going on under the hood and was too scared to upgrade gatsby."),_h.forEach(s),io=d(t),Re=l(t,"P",{});var Dh=p(Re);kp=n(Dh,"Switching to svelte-kit was relatively straight forward except for a few quirks. The quirks mainly had to do with rendering markdown as html and figuring out how to publish the final site through github."),Dh.forEach(s),ro=d(t),ft=l(t,"P",{});var Xl=p(ft);mp=n(Xl,"If you don’t want to read the whole article, you can checkout the final code here - "),te=l(Xl,"A",{href:!0,rel:!0});var Oh=p(te);vp=n(Oh,"https://github.com/mukeshsoni/mukeshsoni.github.io/tree/svelte"),Oh.forEach(s),yp=n(Xl,"."),Xl.forEach(s),uo=d(t),ht=l(t,"H3",{id:!0});var oh=p(ht);kt=l(oh,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var Ch=p(kt);rs=l(Ch,"SPAN",{class:!0}),p(rs).forEach(s),Ch.forEach(s),wp=n(oh,"Step 1 - Setup svelte kit template"),oh.forEach(s),fo=d(t),mt=l(t,"P",{});var Zl=p(mt);bp=n(Zl,"You can get started with svelte kit template using their "),us=l(Zl,"CODE",{});var Ph=p(us);Ep=n(Ph,"npm init"),Ph.forEach(s),gp=n(Zl," command -"),Zl.forEach(s),ho=d(t),ee=l(t,"PRE",{class:!0});var m1=p(ee);m1.forEach(s),ko=d(t),lt=l(t,"P",{});var ao=p(lt);_p=n(ao,"When you run "),ds=l(ao,"CODE",{});var xh=p(ds);Dp=n(xh,"npm create svelte@latest <your_project_name>"),xh.forEach(s),Op=n(ao,", you will be asked a set of questions. E.g. Do you want to enable typescript in this project? Once you answer all the questions, the command will create a set of files in the "),fs=l(ao,"YOUR_PROJECT_NAME",{});var jh=p(fs);Cp=n(jh,"folder. Think of the command as a helper which chooses the right template for you."),jh.forEach(s),ao.forEach(s),mo=d(t),vt=l(t,"P",{});var tp=p(vt);Pp=n(tp,"Once the "),hs=l(tp,"CODE",{});var Th=p(hs);xp=n(Th,"create"),Th.forEach(s),jp=n(tp," command creates the files, you can go inside the folder and install the npm dependencies. The create command does not install the dependencies. It only specifies the list of dependencies in the package.json file."),tp.forEach(s),vo=d(t),x=l(t,"P",{});var U=p(x);Tp=n(U,"After the dependencies are installed, you can invoke the "),ks=l(U,"CODE",{});var Ah=p(ks);Ap=n(Ah,"dev"),Ah.forEach(s),Ip=n(U," script which is already defined in your "),ms=l(U,"CODE",{});var Ih=p(ms);Wp=n(Ih,"package.json"),Ih.forEach(s),Hp=n(U," file by the "),vs=l(U,"CODE",{});var Wh=p(vs);Sp=n(Wh,"create"),Wh.forEach(s),Lp=n(U," command - "),ys=l(U,"CODE",{});var Hh=p(ys);Rp=n(Hh,"npm run dev -- --open"),Hh.forEach(s),qp=n(U,". This should start a localhost server on port 5273. Whatever port it starts the server on will be shown on the terminal. "),ws=l(U,"CODE",{});var Sh=p(ws);Mp=n(Sh,"sveltekit"),Sh.forEach(s),Np=n(U," uses vite for building and serving the site."),U.forEach(s),yo=d(t),yt=l(t,"H3",{id:!0});var lh=p(yt);wt=l(lh,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var Lh=p(wt);bs=l(Lh,"SPAN",{class:!0}),p(bs).forEach(s),Lh.forEach(s),Yp=n(lh,"Step 2 - Add mdsvex to convert markdown files to html"),lh.forEach(s),wo=d(t),se=l(t,"PRE",{class:!0});var v1=p(se);v1.forEach(s),bo=d(t),Q=l(t,"P",{});var ns=p(Q);Bp=n(ns,"Add "),Es=l(ns,"CODE",{});var Rh=p(Es);$p=n(Rh,"mdsvex"),Rh.forEach(s),Gp=n(ns," preprocessor to your "),gs=l(ns,"CODE",{});var qh=p(gs);Up=n(qh,"svelte.config.js"),qh.forEach(s),Fp=n(ns," file -"),ns.forEach(s),Eo=d(t),ae=l(t,"PRE",{class:!0});var y1=p(ae);y1.forEach(s),go=d(t),qe=l(t,"P",{});var Mh=p(qe);Jp=n(Mh,"You will have to restart the dev server for mdsvex preprocessor to kick in."),Mh.forEach(s),_o=d(t),O=l(t,"P",{});var L=p(O);zp=n(L,"We have also added link to blog post layout in "),_s=l(L,"CODE",{});var Nh=p(_s);Vp=n(Nh,"layout"),Nh.forEach(s),Kp=n(L," option passed to "),Ds=l(L,"CODE",{});var Yh=p(Ds);Qp=n(Yh,"mdsvex"),Yh.forEach(s),Xp=n(L," function. This tells "),Os=l(L,"CODE",{});var Bh=p(Os);Zp=n(Bh,"mdsvex"),Bh.forEach(s),tc=n(L," to use the "),Cs=l(L,"CODE",{});var $h=p(Cs);ec=n($h,"post_layout.svelte"),$h.forEach(s),sc=n(L," layout for all the stuff rendered inside "),Ps=l(L,"CODE",{});var Gh=p(Ps);ac=n(Gh,"blog"),Gh.forEach(s),nc=n(L," route. My "),xs=l(L,"CODE",{});var Uh=p(xs);oc=n(Uh,"post_layout.svelte"),Uh.forEach(s),lc=n(L," file looks like this -"),L.forEach(s),Do=d(t),ne=l(t,"PRE",{class:!0});var w1=p(ne);w1.forEach(s),Oo=d(t),M=l(t,"P",{});var ut=p(M);js=l(ut,"CODE",{});var Fh=p(js);pc=n(Fh,"PostHeader"),Fh.forEach(s),cc=n(ut," and "),Ts=l(ut,"CODE",{});var Jh=p(Ts);ic=n(Jh,"Bio"),Jh.forEach(s),rc=n(ut," are regular svelte component which are present inside "),As=l(ut,"CODE",{});var zh=p(As);uc=n(zh,"src/lib"),zh.forEach(s),dc=n(ut," folder. "),Is=l(ut,"CODE",{});var Vh=p(Is);fc=n(Vh,"<slot/>"),Vh.forEach(s),hc=n(ut," is where the content of our markdown file will be put."),ut.forEach(s),Co=d(t),j=l(t,"P",{});var F=p(j);kc=n(F,"Try adding a markdown file called "),Ws=l(F,"CODE",{});var Kh=p(Ws);mc=n(Kh,"+page.md"),Kh.forEach(s),vc=n(F," somewhere in your "),Hs=l(F,"CODE",{});var Qh=p(Hs);yc=n(Qh,"routes"),Qh.forEach(s),wc=n(F," folder and going to the route pointed by the folder inside the "),Ss=l(F,"CODE",{});var Xh=p(Ss);bc=n(Xh,"routes"),Xh.forEach(s),Ec=n(F," folder. E.g. Add a file "),Ls=l(F,"CODE",{});var Zh=p(Ls);gc=n(Zh,"src/routes/my-awesome-post/+page.md"),Zh.forEach(s),_c=n(F," and put some content in there. You should be able to view that content on "),Rs=l(F,"CODE",{});var tk=p(Rs);Dc=n(tk,"localhost:5173/my-awesome-post"),tk.forEach(s),Oc=n(F,"."),F.forEach(s),Po=d(t),H=l(t,"P",{});var at=p(H);Cc=n(at,"Note that simply adding a markdown file with any name will not work. "),qs=l(at,"CODE",{});var ek=p(qs);Pc=n(ek,"sveltekit"),ek.forEach(s),xc=n(at," after "),Ms=l(at,"CODE",{});var sk=p(Ms);jc=n(sk,"v1.0.0"),sk.forEach(s),Tc=n(at," only treats files starting with "),Ns=l(at,"CODE",{});var ak=p(Ns);Ac=n(ak,"+page"),ak.forEach(s),Ic=n(at," or "),Ys=l(at,"CODE",{});var nk=p(Ys);Wc=n(nk,"+server"),nk.forEach(s),Hc=n(at," for routing purposes. This will give us some problem when trying to render our blog posts dynamically."),at.forEach(s),xo=d(t),bt=l(t,"H3",{id:!0});var ph=p(bt);Et=l(ph,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var ok=p(Et);Bs=l(ok,"SPAN",{class:!0}),p(Bs).forEach(s),ok.forEach(s),Sc=n(ph,"Step 3 - Show a list of all blog posts on home page"),ph.forEach(s),jo=d(t),Me=l(t,"P",{});var lk=p(Me);Lc=n(lk,"We want to collect all our markdown files and show the list of blog posts on the home page or on some other path, so that our users can browse the super amazing content we publish."),lk.forEach(s),To=d(t),X=l(t,"P",{});var os=p(X);Rc=n(os,"We will create an api endpoint to get the list of posts. We will use "),$s=l(os,"CODE",{});var pk=p($s);qc=n(pk,"import.meta.glob"),pk.forEach(s),Mc=n(os," to get the metadata for each of the markdown files. . If we try to get the metadata using a glob pattern in our "),Gs=l(os,"CODE",{});var ck=p(Gs);Nc=n(ck,"routes/+page.svelte"),ck.forEach(s),Yc=n(os," file, it will load all the blog posts upfront too. Which might be a disaster if we have too many blogs posts or our posts are heavy."),os.forEach(s),Ao=d(t),m=l(t,"P",{});var w=p(m);Bc=n(w,`So we create an endpoint which returns the metadata for blogs in
`),Us=l(w,"CODE",{});var ik=p(Us);$c=n(ik,"/src/routes/api/posts/+server.ts"),ik.forEach(s),Gc=n(w," file. Just like sveltekit automatically treats any file called "),Fs=l(w,"CODE",{});var rk=p(Fs);Uc=n(rk,"+page.svelte"),rk.forEach(s),Fc=n(w," as a route file when it’s inside the "),Js=l(w,"CODE",{});var uk=p(Js);Jc=n(uk,"routes"),uk.forEach(s),zc=n(w," folder, it treats "),zs=l(w,"CODE",{});var dk=p(zs);Vc=n(dk,"+server.ts"),dk.forEach(s),Kc=n(w," (or "),Vs=l(w,"CODE",{});var fk=p(Vs);Qc=n(fk,"+server.js"),fk.forEach(s),Xc=n(w,") file as a server endpoint. We can define a function inside this file which might then respond to a "),Ks=l(w,"CODE",{});var hk=p(Ks);Zc=n(hk,"GET"),hk.forEach(s),ti=n(w," or "),Qs=l(w,"CODE",{});var kk=p(Qs);ei=n(kk,"POST"),kk.forEach(s),si=n(w," or "),Xs=l(w,"CODE",{});var mk=p(Xs);ai=n(mk,"DELETE"),mk.forEach(s),ni=n(w," or "),Zs=l(w,"CODE",{});var vk=p(Zs);oi=n(vk,"UPDATE"),vk.forEach(s),li=n(w," http request. In our case we need it to respond to a "),ta=l(w,"CODE",{});var yk=p(ta);pi=n(yk,"GET"),yk.forEach(s),ci=n(w," request."),w.forEach(s),Io=d(t),oe=l(t,"PRE",{class:!0});var b1=p(oe);b1.forEach(s),Wo=d(t),Ne=l(t,"P",{});var wk=p(Ne);ii=n(wk,"A few things to keep in mind for the above endpoint -"),wk.forEach(s),Ho=d(t),gt=l(t,"UL",{});var ep=p(gt);K=l(ep,"LI",{});var Vt=p(K);ri=n(Vt,"We don’t return our object directly but whatever "),ea=l(Vt,"CODE",{});var bk=p(ea);ui=n(bk,"json"),bk.forEach(s),di=n(Vt," function exposed by sveltekit returns. If you look at the docs, it will tell you to return "),sa=l(Vt,"CODE",{});var Ek=p(sa);fi=n(Ek,"new Response('your response')"),Ek.forEach(s),hi=n(Vt,". But that doesn’t work for a json response. The "),aa=l(Vt,"CODE",{});var gk=p(aa);ki=n(gk,"json"),gk.forEach(s),mi=n(Vt," utility makes sure that the right headers are set for json response type."),Vt.forEach(s),vi=d(ep),le=l(ep,"LI",{});var sp=p(le);yi=n(sp,"We make sure that our GET function adheres to "),na=l(sp,"CODE",{});var _k=p(na);wi=n(_k,"RequestHandler"),_k.forEach(s),bi=n(sp," type which helps us catch any type related bugs."),sp.forEach(s),ep.forEach(s),So=d(t),v=l(t,"P",{});var g=p(v);Ei=n(g,"We will now fetch these posts using the endpoint we created. We create a "),oa=l(g,"CODE",{});var Dk=p(oa);gi=n(Dk,"+page.ts"),Dk.forEach(s),_i=n(g," file inside "),la=l(g,"CODE",{});var Ok=p(la);Di=n(Ok,"routes"),Ok.forEach(s),Oi=n(g," folder, which is executed by sveltekit on both server and client before it renders "),pa=l(g,"CODE",{});var Ck=p(pa);Ci=n(Ck,"+page.svelte"),Ck.forEach(s),Pi=n(g," file. The "),ca=l(g,"CODE",{});var Pk=p(ca);xi=n(Pk,"+page.ts"),Pk.forEach(s),ji=n(g," file will export a "),ia=l(g,"CODE",{});var xk=p(ia);Ti=n(xk,"load"),xk.forEach(s),Ai=n(g," function which can return whatever it likes. Whatever is returned from the "),ra=l(g,"CODE",{});var jk=p(ra);Ii=n(jk,"load"),jk.forEach(s),Wi=n(g," function can then be accessed in "),ua=l(g,"CODE",{});var Tk=p(ua);Hi=n(Tk,"+page.svelte"),Tk.forEach(s),Si=n(g," as a variable named "),da=l(g,"CODE",{});var Ak=p(da);Li=n(Ak,"data"),Ak.forEach(s),Ri=n(g," by exporting it - "),fa=l(g,"CODE",{});var Ik=p(fa);qi=n(Ik,"export let data"),Ik.forEach(s),Mi=n(g,"."),g.forEach(s),Lo=d(t),pe=l(t,"PRE",{class:!0});var E1=p(pe);E1.forEach(s),Ro=d(t),Ye=l(t,"P",{});var Wk=p(Ye);Ni=n(Wk,`Does having an endpoint mean that we need a server too? Ans - No. When we run
the build script, which runs the static adapter, the endpoint is called and the
post metadata is resolved before the final output is produced.`),Wk.forEach(s),qo=d(t),Be=l(t,"P",{});var Hk=p(Be);Yi=n(Hk,"Now, posts should have the list of posts with their metadata, as defined by you at the top of each post. E.g. If you have this at the top of a post -"),Hk.forEach(s),Mo=d(t),ce=l(t,"PRE",{class:!0});var g1=p(ce);g1.forEach(s),No=d(t),$e=l(t,"P",{});var Sk=p($e);Bi=n(Sk,"That post’s metadata would be an object and look like this"),Sk.forEach(s),Yo=d(t),ie=l(t,"PRE",{class:!0});var _1=p(ie);_1.forEach(s),Bo=d(t),Ge=l(t,"P",{});var Lk=p(Ge);$i=n(Lk,"You can then render whatever metadata you want to."),Lk.forEach(s),$o=d(t),re=l(t,"PRE",{class:!0});var D1=p(re);D1.forEach(s),Go=d(t),_t=l(t,"P",{});var ap=p(_t);Gi=n(ap,"Inside "),ha=l(ap,"CODE",{});var Rk=p(ha);Ui=n(Rk,"+page.svelte"),Rk.forEach(s),Fi=n(ap," file"),ap.forEach(s),Uo=d(t),ue=l(t,"PRE",{class:!0});var O1=p(ue);O1.forEach(s),Fo=d(t),Dt=l(t,"H3",{id:!0});var ch=p(Dt);Ot=l(ch,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var qk=p(Ot);ka=l(qk,"SPAN",{class:!0}),p(ka).forEach(s),qk.forEach(s),Ji=n(ch,"Step 4 - Add a layout component for the blog"),ch.forEach(s),Jo=d(t),Z=l(t,"P",{});var ls=p(Z);zi=n(ls,"If you have a header which you want to show for each page in the blog/site, you can add that as a layout component. For e.g. adding "),ma=l(ls,"CODE",{});var Mk=p(ma);Vi=n(Mk,"routes/+layout.svelte"),Mk.forEach(s),Ki=n(ls," file, with a "),Y&&Y.l(ls),Qi=n(ls," component in it, will wrap every route content inside this layout component. Example layout component -"),ls.forEach(s),zo=d(t),de=l(t,"PRE",{class:!0});var C1=p(de);C1.forEach(s),Vo=d(t),fe=l(t,"P",{});var ih=p(fe);Xi=n(ih,"You can read more about svelte kit layout components here - "),he=l(ih,"A",{href:!0,rel:!0});var Nk=p(he);Zi=n(Nk,"https://kit.svelte.dev/docs/routing#layout"),Nk.forEach(s),ih.forEach(s),Ko=d(t),Ct=l(t,"H3",{id:!0});var rh=p(Ct);Pt=l(rh,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var Yk=p(Pt);va=l(Yk,"SPAN",{class:!0}),p(va).forEach(s),Yk.forEach(s),tr=n(rh,"Step 5 - Add a layout component for individual blog posts"),rh.forEach(s),Qo=d(t),Ue=l(t,"P",{});var Bk=p(Ue);er=n(Bk,"This was trickier than i thought. At least my first attempt. And when i found the solution, it was not as tricky as i thought. At least not as tricky as trying to read this paragraph."),Bk.forEach(s),Xo=d(t),B=l(t,"P",{});var Kt=p(B);sr=n(Kt,"I thought i would utilize svelte-kit’s layout capability, with "),ya=l(Kt,"CODE",{});var $k=p(ya);ar=n($k,"+layout.svelte"),$k.forEach(s),nr=n(Kt," file in the blog folder. But I wanted the layout component for blog post to take care of the post title. My first attempt was to use the "),wa=l(Kt,"CODE",{});var Gk=p(wa);or=n(Gk,"load"),Gk.forEach(s),lr=n(Kt," function provided by "),ba=l(Kt,"CODE",{});var Uk=p(ba);pr=n(Uk,"svelte-kit"),Uk.forEach(s),cr=n(Kt," and then fetching the metadata for the post by importing that file. That worked during development but didn’t work with static adapter. Since i was importing file dynamically, it needed a server."),Kt.forEach(s),Zo=d(t),pt=l(t,"P",{});var no=p(pt);ir=n(no,"Then i found out about layouts in mdsvex. All i had to do was add a svelte component somewhere, say "),Ea=l(no,"CODE",{});var Fk=p(Ea);rr=n(Fk,"src/routes/blog"),Fk.forEach(s),ur=n(no," folder, and then point mdsvex to that file. That is done in "),ga=l(no,"CODE",{});var Jk=p(ga);dr=n(Jk,"mdsvex.config.cjs"),Jk.forEach(s),no.forEach(s),tl=d(t),ke=l(t,"PRE",{class:!0});var P1=p(ke);P1.forEach(s),el=d(t),xt=l(t,"P",{});var np=p(xt);fr=n(np,"And the "),_a=l(np,"CODE",{});var zk=p(_a);hr=n(zk,"post_layout.svelte"),zk.forEach(s),kr=n(np," component looked like this"),np.forEach(s),sl=d(t),me=l(t,"PRE",{class:!0});var x1=p(me);x1.forEach(s),al=d(t),Fe=l(t,"P",{});var Vk=p(Fe);mr=n(Vk,"Now all my blog posts had a title and date at the top. The layout component also enabled styling the container for each post, if i wanted to."),Vk.forEach(s),nl=d(t),ct=l(t,"P",{});var oo=p(ct);vr=n(oo,"More about "),Da=l(oo,"CODE",{});var Kk=p(Da);yr=n(Kk,"mdsvex"),Kk.forEach(s),wr=n(oo," layout components here - "),ve=l(oo,"A",{href:!0,rel:!0});var Qk=p(ve);br=n(Qk,"https://mdsvex.pngwn.io/docs#layouts"),Qk.forEach(s),oo.forEach(s),ol=d(t),jt=l(t,"H3",{id:!0});var uh=p(jt);Tt=l(uh,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var Xk=p(Tt);Oa=l(Xk,"SPAN",{class:!0}),p(Oa).forEach(s),Xk.forEach(s),Er=n(uh,"Step 6 - Rendering individual blog post"),uh.forEach(s),ll=d(t),E=l(t,"P",{});var A=p(E);gr=n(A,"Let’s say we have 20 odd blog posts on our blog. Each in their own markdown file. And we want to render them on a route like "),Ca=l(A,"CODE",{});var Zk=p(Ca);_r=n(Zk,"<my-site>.com/blog/blog-post-title"),Zk.forEach(s),Dr=n(A,". We cannot just create a file named "),Pa=l(A,"CODE",{});var tm=p(Pa);Or=n(tm,"blog-post-title.md"),tm.forEach(s),Cr=n(A," inside "),xa=l(A,"CODE",{});var em=p(xa);Pr=n(em,"src/routes/blog/"),em.forEach(s),xr=n(A," folder and be done. Because those files will not be treated as routes by "),ja=l(A,"CODE",{});var sm=p(ja);jr=n(sm,"sveltekit"),sm.forEach(s),Tr=n(A,". Remember, "),Ta=l(A,"CODE",{});var am=p(Ta);Ar=n(am,"sveltekit"),am.forEach(s),Ir=n(A," only treats a file as a route if it starts with "),Aa=l(A,"CODE",{});var nm=p(Aa);Wr=n(nm,"+page"),nm.forEach(s),Hr=n(A,". So one way to render our blog posts would be to create one folder per blog post and then create a "),Ia=l(A,"CODE",{});var om=p(Ia);Sr=n(om,"+page.md"),om.forEach(s),Lr=n(A," file inside each of those folders which then contains the post content. E.g."),A.forEach(s),pl=d(t),ye=l(t,"PRE",{class:!0});var j1=p(ye);j1.forEach(s),cl=d(t),tt=l(t,"P",{});var ps=p(tt);Rr=n(ps,"Now we should be able to access "),Wa=l(ps,"CODE",{});var lm=p(Wa);qr=n(lm,"localhost:5173/blog/blog-post-title"),lm.forEach(s),Mr=n(ps," or "),Ha=l(ps,"CODE",{});var pm=p(Ha);Nr=n(pm,"localhost:5173/blog/asinite-personal-details-post"),pm.forEach(s),Yr=n(ps,"."),ps.forEach(s),il=d(t),Je=l(t,"P",{});var cm=p(Je);Br=n(cm,"I actually like this technique since most of us don’t write too many posts. I would bet most of us write less than 10 blog posts in our life time. And this is a perfectly file way to render those mostly asinine posts."),cm.forEach(s),rl=d(t),ze=l(t,"P",{});var im=p(ze);$r=n(im,"But we are certainly taking this much pain to render a super duper simple blog post because we like writing posts. We are doing it because we want to have some fun :). Let’s look at another way to render the same blog posts in a more dynamic way."),im.forEach(s),ul=d(t),At=l(t,"H4",{id:!0});var dh=p(At);It=l(dh,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var rm=p(It);Sa=l(rm,"SPAN",{class:!0}),p(Sa).forEach(s),rm.forEach(s),Gr=n(dh,"Step 6.2 - Rendering blog post dynamically"),dh.forEach(s),dl=d(t),Ve=l(t,"P",{});var um=p(Ve);Ur=n(um,"Here’s what we want to do -"),um.forEach(s),fl=d(t),Wt=l(t,"UL",{});var op=p(Wt);La=l(op,"LI",{});var dm=p(La);Fr=n(dm,"Put all our post related markdown files in one folder"),dm.forEach(s),Jr=d(op),Ra=l(op,"LI",{});var fm=p(Ra);zr=n(fm,"Write a script which then dynamically looks for the required file from the url, picks it up and renders it."),fm.forEach(s),op.forEach(s),hl=d(t),N=l(t,"P",{});var dt=p(N);qa=l(dt,"CODE",{});var hm=p(qa);Vr=n(hm,"sveltekit"),hm.forEach(s),Kr=n(dt," supports something called dynamic routes for scenarios where we don’t have fixed routes like "),Ma=l(dt,"CODE",{});var km=p(Ma);Qr=n(km,"/about"),km.forEach(s),Xr=n(dt," or "),Na=l(dt,"CODE",{});var mm=p(Na);Zr=n(mm,"/home"),mm.forEach(s),tu=n(dt," etc. We want our "),Ya=l(dt,"CODE",{});var vm=p(Ya);eu=n(vm,"/blog/blog-title"),vm.forEach(s),su=n(dt," routes to automagically pick the right content."),dt.forEach(s),kl=d(t),f=l(t,"P",{});var h=p(f);Ba=l(h,"CODE",{});var ym=p(Ba);au=n(ym,"sveltekit"),ym.forEach(s),nu=n(h," allows us to create a folder whose name looks like this "),$a=l(h,"CODE",{});var wm=p($a);ou=n(wm,"[some-name]"),wm.forEach(s),lu=n(h," inside the "),Ga=l(h,"CODE",{});var bm=p(Ga);pu=n(bm,"routes"),bm.forEach(s),cu=n(h," folder. When "),Ua=l(h,"CODE",{});var Em=p(Ua);iu=n(Em,"sveltekit"),Em.forEach(s),ru=n(h," comes across such a folder, it will then forwards all request coming to that path, to the "),Fa=l(h,"CODE",{});var gm=p(Fa);uu=n(gm,"+page.svelte"),gm.forEach(s),du=n(h," file inside that folder. E.g. if we create a folder like "),Ja=l(h,"CODE",{});var _m=p(Ja);fu=n(_m,"src/routes/blog/[slug]/"),_m.forEach(s),hu=n(h," then "),za=l(h,"CODE",{});var Dm=p(za);ku=n(Dm,"sveltekit"),Dm.forEach(s),mu=n(h," will render the "),Va=l(h,"CODE",{});var Om=p(Va);vu=n(Om,"+page.svelte"),Om.forEach(s),yu=n(h," file inside "),Ka=l(h,"CODE",{});var Cm=p(Ka);wu=n(Cm,"src/routes/blog/[slug]/"),Cm.forEach(s),bu=n(h," folder for request to "),Qa=l(h,"CODE",{});var Pm=p(Qa);Eu=n(Pm,"/blog/abc"),Pm.forEach(s),gu=n(h," or "),Xa=l(h,"CODE",{});var xm=p(Xa);_u=n(xm,"/blog/new-post"),xm.forEach(s),Du=n(h,". It will use the name "),Za=l(h,"CODE",{});var jm=p(Za);Ou=n(jm,"slug"),jm.forEach(s),Cu=n(h," inside the square brackets ("),tn=l(h,"CODE",{});var Tm=p(tn);Pu=n(Tm,"[]"),Tm.forEach(s),xu=n(h,") to pass as params property to "),en=l(h,"CODE",{});var Am=p(en);ju=n(Am,"load"),Am.forEach(s),Tu=n(h," function in "),sn=l(h,"CODE",{});var Im=p(sn);Au=n(Im,"+page.ts"),Im.forEach(s),Iu=n(h," file inside "),an=l(h,"CODE",{});var Wm=p(an);Wu=n(Wm,"[slug]"),Wm.forEach(s),Hu=n(h," folder. E.g."),h.forEach(s),ml=d(t),we=l(t,"PRE",{class:!0});var T1=p(we);T1.forEach(s),vl=d(t),et=l(t,"P",{});var cs=p(et);Su=n(cs,"We will now use the "),nn=l(cs,"CODE",{});var Hm=p(nn);Lu=n(Hm,"load"),Hm.forEach(s),Ru=n(cs," function in "),on=l(cs,"CODE",{});var Sm=p(on);qu=n(Sm,"+page.ts"),Sm.forEach(s),Mu=n(cs," to load the blog post asked for"),cs.forEach(s),yl=d(t),be=l(t,"PRE",{class:!0});var A1=p(be);A1.forEach(s),wl=d(t),Ht=l(t,"P",{});var lp=p(Ht);Nu=n(lp,"We use "),ln=l(lp,"CODE",{});var Lm=p(ln);Yu=n(Lm,"import"),Lm.forEach(s),Bu=n(lp," to import the intended blog post. If we don’t file it in our file system, we return an error and hopefully also render an error page."),lp.forEach(s),bl=d(t),Ke=l(t,"P",{});var Rm=p(Ke);$u=n(Rm,"A few things to note above -"),Rm.forEach(s),El=d(t),St=l(t,"UL",{});var pp=p(St);D=l(pp,"LI",{});var I=p(D);Gu=n(I,"One very weird thing happened when i had the "),pn=l(I,"CODE",{});var qm=p(pn);Uu=n(qm,"import"),qm.forEach(s),Fu=n(I," for the "),cn=l(I,"CODE",{});var Mm=p(cn);Ju=n(Mm,"md"),Mm.forEach(s),zu=n(I," file for the "),rn=l(I,"CODE",{});var Nm=p(rn);Vu=n(Nm,"slug"),Nm.forEach(s),Ku=n(I," inside a try-catch block. The "),un=l(I,"CODE",{});var Ym=p(un);Qu=n(Ym,"adapter-static"),Ym.forEach(s),Xu=n(I," could not figure out that it needed to prerender the "),dn=l(I,"CODE",{});var Bm=p(dn);Zu=n(Bm,"md"),Bm.forEach(s),td=n(I," file and would try to load the "),fn=l(I,"CODE",{});var $m=p(fn);ed=n($m,"md"),$m.forEach(s),sd=n(I," file from the route with a "),hn=l(I,"CODE",{});var Gm=p(hn);ad=n(Gm,"GET"),Gm.forEach(s),nd=n(I," request. That would fail with a 404 http code. I removed the try-catch as seen in code above, and adapter-static started doing it’s work perfectly."),I.forEach(s),od=d(pp),it=l(pp,"LI",{});var is=p(it);ld=n(is,"You will see in the above import is that i have a "),kn=l(is,"CODE",{});var Um=p(kn);pd=n(Um,"post-"),Um.forEach(s),cd=n(is," prefix before the "),mn=l(is,"CODE",{});var Fm=p(mn);id=n(Fm,"${slug}.md"),Fm.forEach(s),rd=n(is," part of the file name for the blog post. We need that because otherwise vite complains that it’s not able to resolve the dynamic import. It needs some prefix to narrow down the list of files to look at inside the folder."),is.forEach(s),pp.forEach(s),gl=d(t),y=l(t,"P",{});var _=p(y);ud=n(_,"When use use "),vn=l(_,"CODE",{});var Jm=p(vn);dd=n(Jm,"import"),Jm.forEach(s),fd=n(_," to get our "),yn=l(_,"CODE",{});var zm=p(yn);hd=n(zm,"md"),zm.forEach(s),kd=n(_," file, it is automatically passed through "),wn=l(_,"CODE",{});var Vm=p(wn);md=n(Vm,"mdsvex"),Vm.forEach(s),vd=n(_," which then returns a svelte component for the imported "),bn=l(_,"CODE",{});var Km=p(bn);yd=n(Km,"md"),Km.forEach(s),wd=n(_," file. We return that svelte component as "),En=l(_,"CODE",{});var Qm=p(En);bd=n(Qm,"content"),Qm.forEach(s),Ed=n(_," property from whatever object is returned from "),gn=l(_,"CODE",{});var Xm=p(gn);gd=n(Xm,"load"),Xm.forEach(s),_d=n(_," function. This "),_n=l(_,"CODE",{});var Zm=p(_n);Dd=n(Zm,"svelte"),Zm.forEach(s),Od=n(_," component returned by "),Dn=l(_,"CODE",{});var tv=p(Dn);Cd=n(tv,"import"),tv.forEach(s),Pd=n(_," cannot be render directly. We need to use "),On=l(_,"CODE",{});var ev=p(On);xd=n(ev,"<svelte:compoennt>"),ev.forEach(s),jd=n(_," directive to render a svelte component dynamically."),_.forEach(s),_l=d(t),Lt=l(t,"P",{});var cp=p(Lt);Td=n(cp,"We do that inside "),Cn=l(cp,"CODE",{});var sv=p(Cn);Ad=n(sv,"src/blog/[slug]/+page.svelte"),sv.forEach(s),Id=n(cp," file -"),cp.forEach(s),Dl=d(t),Ee=l(t,"PRE",{class:!0});var I1=p(Ee);I1.forEach(s),Ol=d(t),Qe=l(t,"P",{});var av=p(Qe);Wd=n(av,"Now we should be in a good place to render all our blog posts dynamically. Not that it matters."),av.forEach(s),Cl=d(t),Rt=l(t,"H3",{id:!0});var fh=p(Rt);qt=l(fh,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var nv=p(qt);Pn=l(nv,"SPAN",{class:!0}),p(Pn).forEach(s),nv.forEach(s),Hd=n(fh,"Step 7 - Hosting the blog on github"),fh.forEach(s),Pl=d(t),Mt=l(t,"P",{});var ip=p(Mt);Sd=n(ip,"Github allows static site hosting in 2 ways - either as a user site or as a project site. You can read more about github hosting "),ge=l(ip,"A",{href:!0,rel:!0});var ov=p(ge);Ld=n(ov,"here"),ov.forEach(s),Rd=n(ip,". I have my site hosted as a user site. Which meant i had to push the output of the static adapter to my master branch. But what is this static adapter thingy?"),ip.forEach(s),xl=d(t),_e=l(t,"P",{});var hh=p(_e);qd=n(hh,"svelte kit provides various adapters to convert your site in ways which are suited for your deployment environemnt. In our case, we want the site to be hosted on github (or netlify etc.) as a static site. No server. Just html pages with some css and js. For that, we use the "),De=l(hh,"A",{href:!0,rel:!0});var lv=p(De);Md=n(lv,"svelte-kit static adapter"),lv.forEach(s),hh.forEach(s),jl=d(t),Nt=l(t,"H4",{id:!0});var kh=p(Nt);Yt=l(kh,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var pv=p(Yt);xn=l(pv,"SPAN",{class:!0}),p(xn).forEach(s),pv.forEach(s),Nd=n(kh,"Install svelte static adapter"),kh.forEach(s),Tl=d(t),Xe=l(t,"P",{});var cv=p(Xe);Yd=n(cv,"We can install the static adapter from npm."),cv.forEach(s),Al=d(t),Oe=l(t,"PRE",{class:!0});var W1=p(Oe);W1.forEach(s),Il=d(t),Ze=l(t,"P",{});var iv=p(Ze);Bd=n(iv,"We then have to change the svelte config to tell it to use static adapter -"),iv.forEach(s),Wl=d(t),Ce=l(t,"PRE",{class:!0});var H1=p(Ce);H1.forEach(s),Hl=d(t),Bt=l(t,"H4",{id:!0});var mh=p(Bt);$t=l(mh,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var rv=p($t);jn=l(rv,"SPAN",{class:!0}),p(jn).forEach(s),rv.forEach(s),$d=n(mh,"Generate content to host as static site"),mh.forEach(s),Sl=d(t),Gt=l(t,"P",{});var rp=p(Gt);Gd=n(rp,"Once we have setup the static adapter, calling "),Tn=l(rp,"CODE",{});var uv=p(Tn);Ud=n(uv,"npm run build"),uv.forEach(s),Fd=n(rp," on the terminal should generate the build folder."),rp.forEach(s),Ll=d(t),Pe=l(t,"PRE",{class:!0});var S1=p(Pe);S1.forEach(s),Rl=d(t),$=l(t,"P",{});var Qt=p($);Jd=n(Qt,"We can test the build by going inside the build folder and using "),An=l(Qt,"CODE",{});var dv=p(An);zd=n(dv,"serve"),dv.forEach(s),Vd=n(Qt," or any other server to serve the files. "),In=l(Qt,"CODE",{});var fv=p(In);Kd=n(fv,"serve"),fv.forEach(s),Qd=n(Qt," starts a server on "),Wn=l(Qt,"CODE",{});var hv=p(Wn);Xd=n(hv,"localhost:5000"),hv.forEach(s),Zd=n(Qt," by default."),Qt.forEach(s),ql=d(t),Ut=l(t,"H4",{id:!0});var vh=p(Ut);Ft=l(vh,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var kv=p(Ft);Hn=l(kv,"SPAN",{class:!0}),p(Hn).forEach(s),kv.forEach(s),tf=n(vh,"Install gh-pages and deploy site"),vh.forEach(s),Ml=d(t),Jt=l(t,"P",{});var up=p(Jt);ef=n(up,"Now that we have the built files, we have to push them to the master branch, for user site, or to the "),Sn=l(up,"CODE",{});var mv=p(Sn);sf=n(mv,"gh-pages"),mv.forEach(s),af=n(up," branch for a project site. Once we update the branch and push to github, github will then deploy the files for us and we should be able to see our site come alive."),up.forEach(s),Nl=d(t),rt=l(t,"P",{});var lo=p(rt);Ln=l(lo,"CODE",{});var vv=p(Ln);nf=n(vv,"gh-pages"),vv.forEach(s),of=n(lo," is a handy tool to push the contents of any folder to any other branch in your repository. Installing "),Rn=l(lo,"CODE",{});var yv=p(Rn);lf=n(yv,"gh-pages"),yv.forEach(s),pf=n(lo," is straight forward with npm."),lo.forEach(s),Yl=d(t),xe=l(t,"PRE",{class:!0});var L1=p(xe);L1.forEach(s),Bl=d(t),ts=l(t,"P",{});var wv=p(ts);cf=n(wv,"I then added an npm script to make deployment easy -"),wv.forEach(s),$l=d(t),je=l(t,"PRE",{class:!0});var R1=p(je);R1.forEach(s),Gl=d(t),G=l(t,"P",{});var Xt=p(G);rf=n(Xt,"If you are deploying a project site, you can remove the "),qn=l(Xt,"CODE",{});var bv=p(qn);uf=n(bv,"-b master"),bv.forEach(s),df=n(Xt," flag from gh-pages command. "),Mn=l(Xt,"CODE",{});var Ev=p(Mn);ff=n(Ev,"gh-pages"),Ev.forEach(s),hf=n(Xt," pushes to "),Nn=l(Xt,"CODE",{});var gv=p(Nn);kf=n(gv,"gh-pages"),gv.forEach(s),mf=n(Xt," branch by default."),Xt.forEach(s),Ul=d(t),Te=l(t,"P",{});var yh=p(Te);Yn=l(yh,"CODE",{});var _v=p(Yn);vf=n(_v,"gh-pages"),_v.forEach(s),yf=n(yh," will also push the branch to remote. So if all goes well, you should be able to see your site live after some time."),yh.forEach(s),Fl=d(t),st=l(t,"H4",{id:!0});var po=p(st);zt=l(po,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var Dv=p(zt);Bn=l(Dv,"SPAN",{class:!0}),p(Bn).forEach(s),Dv.forEach(s),wf=n(po,"Fixing _apps/"),$n=l(po,"EM",{});var Ov=p($n);bf=n(Ov,".js and _apps/"),Ov.forEach(s),Ef=n(po,".css paths returning 404 on the deployed site"),po.forEach(s),Jl=d(t),T=l(t,"P",{});var J=p(T);gf=n(J,"After you deploy your site by pushing the github branch, you will probably see your site looking a little different to what it looks on your development environment. That’s because some of the js and css is missing. If you open the devtools and then the network tab, a number of js and css files might be returning 404. All of those would be serving files from inside the "),Gn=l(J,"CODE",{});var Cv=p(Gn);_f=n(Cv,"__app"),Cv.forEach(s),Df=n(J," folder. That is because github does not deploy the "),Un=l(J,"CODE",{});var Pv=p(Un);Of=n(Pv,"__app"),Pv.forEach(s),Cf=n(J," folder. All folders starting with an "),Fn=l(J,"CODE",{});var xv=p(Fn);Pf=n(xv,"_"),xv.forEach(s),xf=n(J," are to be ignored for sites built with "),Ae=l(J,"A",{href:!0,rel:!0});var jv=p(Ae);jf=n(jv,"jekyll"),jv.forEach(s),Tf=n(J,". Read more about it "),Ie=l(J,"A",{href:!0,rel:!0});var Tv=p(Ie);Af=n(Tv,"here"),Tv.forEach(s),If=n(J,"."),J.forEach(s),zl=d(t),S=l(t,"P",{});var nt=p(S);Wf=n(nt,"To get around the problem, we have to add an empty file named "),Jn=l(nt,"CODE",{});var Av=p(Jn);Hf=n(Av,".nojekyll"),Av.forEach(s),Sf=n(nt," to our static folder. "),zn=l(nt,"CODE",{});var Iv=p(zn);Lf=n(Iv,"npm run build"),Iv.forEach(s),Rf=n(nt," will then copy that file to the "),Vn=l(nt,"CODE",{});var Wv=p(Vn);qf=n(Wv,"build"),Wv.forEach(s),Mf=n(nt," folder and "),Kn=l(nt,"CODE",{});var Hv=p(Kn);Nf=n(Hv,"gh-pages"),Hv.forEach(s),Yf=n(nt," will then push that file to the required github branch."),nt.forEach(s),Vl=d(t),C=l(t,"P",{});var R=p(C);Bf=n(R,"You might find that it still doesn’t work. Mainly because "),Qn=l(R,"CODE",{});var Sv=p(Qn);$f=n(Sv,"gh-pages"),Sv.forEach(s),Gf=n(R," is not pushing the "),Xn=l(R,"CODE",{});var Lv=p(Xn);Uf=n(Lv,".nojekyll"),Lv.forEach(s),Ff=n(R," file to the github branch, because "),Zn=l(R,"CODE",{});var Rv=p(Zn);Jf=n(Rv,"gh-pages"),Rv.forEach(s),zf=n(R," tool ignores all files starting with a "),to=l(R,"CODE",{});var qv=p(to);Vf=n(qv,"."),qv.forEach(s),Kf=n(R," (dot). We can tell the "),eo=l(R,"CODE",{});var Mv=p(eo);Qf=n(Mv,"gh-pages"),Mv.forEach(s),Xf=n(R," tool to also push dot files from the build folder by using the "),so=l(R,"CODE",{});var Nv=p(so);Zf=n(Nv,"-t"),Nv.forEach(s),th=n(R," flag. If you copied the deploy command from above, it’s already there."),R.forEach(s),Kl=d(t),es=l(t,"P",{});var Yv=p(es);eh=n(Yv,"That is it! Go ahead and add a lot of blog posts as markdown files and deploy to your site. I am kidding. Building the blog with svelte kit was fun though."),Yv.forEach(s),Ql=d(t),We=l(t,"P",{});var wh=p(We);sh=n(wh,"Link to final code - "),He=l(wh,"A",{href:!0,rel:!0});var Bv=p(He);ah=n(Bv,"https://github.com/mukeshsoni/mukeshsoni.github.io/tree/svelte"),Bv.forEach(s),wh.forEach(s),this.h()},h(){r(k,"href","https://svelte.dev."),r(k,"rel","nofollow"),r(Zt,"href","https://kit.svelte.dev"),r(Zt,"rel","nofollow"),r(te,"href","https://github.com/mukeshsoni/mukeshsoni.github.io/tree/svelte"),r(te,"rel","nofollow"),r(rs,"class","icon icon-link"),r(kt,"aria-hidden","true"),r(kt,"tabindex","-1"),r(kt,"href","#step-1---setup-svelte-kit-template"),r(ht,"id","step-1---setup-svelte-kit-template"),r(ee,"class","language-bash"),r(bs,"class","icon icon-link"),r(wt,"aria-hidden","true"),r(wt,"tabindex","-1"),r(wt,"href","#step-2---add-mdsvex-to-convert-markdown-files-to-html"),r(yt,"id","step-2---add-mdsvex-to-convert-markdown-files-to-html"),r(se,"class","language-bash"),r(ae,"class","language-javascript"),r(ne,"class","language-svelte"),r(Bs,"class","icon icon-link"),r(Et,"aria-hidden","true"),r(Et,"tabindex","-1"),r(Et,"href","#step-3---show-a-list-of-all-blog-posts-on-home-page"),r(bt,"id","step-3---show-a-list-of-all-blog-posts-on-home-page"),r(oe,"class","language-typescript"),r(pe,"class","language-typescript"),r(ce,"class","language-md"),r(ie,"class","language-json"),r(re,"class","language-html"),r(ue,"class","language-svelte"),r(ka,"class","icon icon-link"),r(Ot,"aria-hidden","true"),r(Ot,"tabindex","-1"),r(Ot,"href","#step-4---add-a-layout-component-for-the-blog"),r(Dt,"id","step-4---add-a-layout-component-for-the-blog"),r(de,"class","language-html"),r(he,"href","https://kit.svelte.dev/docs/routing#layout"),r(he,"rel","nofollow"),r(va,"class","icon icon-link"),r(Pt,"aria-hidden","true"),r(Pt,"tabindex","-1"),r(Pt,"href","#step-5---add-a-layout-component-for-individual-blog-posts"),r(Ct,"id","step-5---add-a-layout-component-for-individual-blog-posts"),r(ke,"class","language-javascript"),r(me,"class","language-html"),r(ve,"href","https://mdsvex.pngwn.io/docs#layouts"),r(ve,"rel","nofollow"),r(Oa,"class","icon icon-link"),r(Tt,"aria-hidden","true"),r(Tt,"tabindex","-1"),r(Tt,"href","#step-6---rendering-individual-blog-post"),r(jt,"id","step-6---rendering-individual-blog-post"),r(ye,"class","language-undefined"),r(Sa,"class","icon icon-link"),r(It,"aria-hidden","true"),r(It,"tabindex","-1"),r(It,"href","#step-62---rendering-blog-post-dynamically"),r(At,"id","step-62---rendering-blog-post-dynamically"),r(we,"class","language-typescript"),r(be,"class","language-typescript"),r(Ee,"class","language-svelte"),r(Pn,"class","icon icon-link"),r(qt,"aria-hidden","true"),r(qt,"tabindex","-1"),r(qt,"href","#step-7---hosting-the-blog-on-github"),r(Rt,"id","step-7---hosting-the-blog-on-github"),r(ge,"href","https://docs.github.com/en/pages/getting-started-with-github-pages/about-github-pages"),r(ge,"rel","nofollow"),r(De,"href","https://github.com/sveltejs/kit/tree/master/packages/adapter-static"),r(De,"rel","nofollow"),r(xn,"class","icon icon-link"),r(Yt,"aria-hidden","true"),r(Yt,"tabindex","-1"),r(Yt,"href","#install-svelte-static-adapter"),r(Nt,"id","install-svelte-static-adapter"),r(Oe,"class","language-bash"),r(Ce,"class","language-javascript"),r(jn,"class","icon icon-link"),r($t,"aria-hidden","true"),r($t,"tabindex","-1"),r($t,"href","#generate-content-to-host-as-static-site"),r(Bt,"id","generate-content-to-host-as-static-site"),r(Pe,"class","language-undefined"),r(Hn,"class","icon icon-link"),r(Ft,"aria-hidden","true"),r(Ft,"tabindex","-1"),r(Ft,"href","#install-gh-pages-and-deploy-site"),r(Ut,"id","install-gh-pages-and-deploy-site"),r(xe,"class","language-bash"),r(je,"class","language-json"),r(Bn,"class","icon icon-link"),r(zt,"aria-hidden","true"),r(zt,"tabindex","-1"),r(zt,"href","#fixing-_appsjs-and-_appscss-paths-returning-404-on-the-deployed-site"),r(st,"id","fixing-_appsjs-and-_appscss-paths-returning-404-on-the-deployed-site"),r(Ae,"href","https://jekyllrb.com/docs/"),r(Ae,"rel","nofollow"),r(Ie,"href","https://github.blog/2009-12-29-bypassing-jekyll-on-github-pages/"),r(Ie,"rel","nofollow"),r(He,"href","https://github.com/mukeshsoni/mukeshsoni.github.io/tree/svelte"),r(He,"rel","nofollow")},m(t,c){i(t,b,c),e(b,W),i(t,z,c),i(t,P,c),e(P,V),e(P,k),e(k,q),e(P,Se),e(P,Zt),e(Zt,dp),e(P,fp),i(t,co,c),i(t,Le,c),e(Le,hp),i(t,io,c),i(t,Re,c),e(Re,kp),i(t,ro,c),i(t,ft,c),e(ft,mp),e(ft,te),e(te,vp),e(ft,yp),i(t,uo,c),i(t,ht,c),e(ht,kt),e(kt,rs),e(ht,wp),i(t,fo,c),i(t,mt,c),e(mt,bp),e(mt,us),e(us,Ep),e(mt,gp),i(t,ho,c),i(t,ee,c),ee.innerHTML=zv,i(t,ko,c),i(t,lt,c),e(lt,_p),e(lt,ds),e(ds,Dp),e(lt,Op),e(lt,fs),e(fs,Cp),i(t,mo,c),i(t,vt,c),e(vt,Pp),e(vt,hs),e(hs,xp),e(vt,jp),i(t,vo,c),i(t,x,c),e(x,Tp),e(x,ks),e(ks,Ap),e(x,Ip),e(x,ms),e(ms,Wp),e(x,Hp),e(x,vs),e(vs,Sp),e(x,Lp),e(x,ys),e(ys,Rp),e(x,qp),e(x,ws),e(ws,Mp),e(x,Np),i(t,yo,c),i(t,yt,c),e(yt,wt),e(wt,bs),e(yt,Yp),i(t,wo,c),i(t,se,c),se.innerHTML=Vv,i(t,bo,c),i(t,Q,c),e(Q,Bp),e(Q,Es),e(Es,$p),e(Q,Gp),e(Q,gs),e(gs,Up),e(Q,Fp),i(t,Eo,c),i(t,ae,c),ae.innerHTML=Kv,i(t,go,c),i(t,qe,c),e(qe,Jp),i(t,_o,c),i(t,O,c),e(O,zp),e(O,_s),e(_s,Vp),e(O,Kp),e(O,Ds),e(Ds,Qp),e(O,Xp),e(O,Os),e(Os,Zp),e(O,tc),e(O,Cs),e(Cs,ec),e(O,sc),e(O,Ps),e(Ps,ac),e(O,nc),e(O,xs),e(xs,oc),e(O,lc),i(t,Do,c),i(t,ne,c),ne.innerHTML=Qv,i(t,Oo,c),i(t,M,c),e(M,js),e(js,pc),e(M,cc),e(M,Ts),e(Ts,ic),e(M,rc),e(M,As),e(As,uc),e(M,dc),e(M,Is),e(Is,fc),e(M,hc),i(t,Co,c),i(t,j,c),e(j,kc),e(j,Ws),e(Ws,mc),e(j,vc),e(j,Hs),e(Hs,yc),e(j,wc),e(j,Ss),e(Ss,bc),e(j,Ec),e(j,Ls),e(Ls,gc),e(j,_c),e(j,Rs),e(Rs,Dc),e(j,Oc),i(t,Po,c),i(t,H,c),e(H,Cc),e(H,qs),e(qs,Pc),e(H,xc),e(H,Ms),e(Ms,jc),e(H,Tc),e(H,Ns),e(Ns,Ac),e(H,Ic),e(H,Ys),e(Ys,Wc),e(H,Hc),i(t,xo,c),i(t,bt,c),e(bt,Et),e(Et,Bs),e(bt,Sc),i(t,jo,c),i(t,Me,c),e(Me,Lc),i(t,To,c),i(t,X,c),e(X,Rc),e(X,$s),e($s,qc),e(X,Mc),e(X,Gs),e(Gs,Nc),e(X,Yc),i(t,Ao,c),i(t,m,c),e(m,Bc),e(m,Us),e(Us,$c),e(m,Gc),e(m,Fs),e(Fs,Uc),e(m,Fc),e(m,Js),e(Js,Jc),e(m,zc),e(m,zs),e(zs,Vc),e(m,Kc),e(m,Vs),e(Vs,Qc),e(m,Xc),e(m,Ks),e(Ks,Zc),e(m,ti),e(m,Qs),e(Qs,ei),e(m,si),e(m,Xs),e(Xs,ai),e(m,ni),e(m,Zs),e(Zs,oi),e(m,li),e(m,ta),e(ta,pi),e(m,ci),i(t,Io,c),i(t,oe,c),oe.innerHTML=Xv,i(t,Wo,c),i(t,Ne,c),e(Ne,ii),i(t,Ho,c),i(t,gt,c),e(gt,K),e(K,ri),e(K,ea),e(ea,ui),e(K,di),e(K,sa),e(sa,fi),e(K,hi),e(K,aa),e(aa,ki),e(K,mi),e(gt,vi),e(gt,le),e(le,yi),e(le,na),e(na,wi),e(le,bi),i(t,So,c),i(t,v,c),e(v,Ei),e(v,oa),e(oa,gi),e(v,_i),e(v,la),e(la,Di),e(v,Oi),e(v,pa),e(pa,Ci),e(v,Pi),e(v,ca),e(ca,xi),e(v,ji),e(v,ia),e(ia,Ti),e(v,Ai),e(v,ra),e(ra,Ii),e(v,Wi),e(v,ua),e(ua,Hi),e(v,Si),e(v,da),e(da,Li),e(v,Ri),e(v,fa),e(fa,qi),e(v,Mi),i(t,Lo,c),i(t,pe,c),pe.innerHTML=Zv,i(t,Ro,c),i(t,Ye,c),e(Ye,Ni),i(t,qo,c),i(t,Be,c),e(Be,Yi),i(t,Mo,c),i(t,ce,c),ce.innerHTML=t1,i(t,No,c),i(t,$e,c),e($e,Bi),i(t,Yo,c),i(t,ie,c),ie.innerHTML=e1,i(t,Bo,c),i(t,Ge,c),e(Ge,$i),i(t,$o,c),i(t,re,c),re.innerHTML=s1,i(t,Go,c),i(t,_t,c),e(_t,Gi),e(_t,ha),e(ha,Ui),e(_t,Fi),i(t,Uo,c),i(t,ue,c),ue.innerHTML=a1,i(t,Fo,c),i(t,Dt,c),e(Dt,Ot),e(Ot,ka),e(Dt,Ji),i(t,Jo,c),i(t,Z,c),e(Z,zi),e(Z,ma),e(ma,Vi),e(Z,Ki),Y&&Y.m(Z,null),e(Z,Qi),i(t,zo,c),i(t,de,c),de.innerHTML=n1,i(t,Vo,c),i(t,fe,c),e(fe,Xi),e(fe,he),e(he,Zi),i(t,Ko,c),i(t,Ct,c),e(Ct,Pt),e(Pt,va),e(Ct,tr),i(t,Qo,c),i(t,Ue,c),e(Ue,er),i(t,Xo,c),i(t,B,c),e(B,sr),e(B,ya),e(ya,ar),e(B,nr),e(B,wa),e(wa,or),e(B,lr),e(B,ba),e(ba,pr),e(B,cr),i(t,Zo,c),i(t,pt,c),e(pt,ir),e(pt,Ea),e(Ea,rr),e(pt,ur),e(pt,ga),e(ga,dr),i(t,tl,c),i(t,ke,c),ke.innerHTML=o1,i(t,el,c),i(t,xt,c),e(xt,fr),e(xt,_a),e(_a,hr),e(xt,kr),i(t,sl,c),i(t,me,c),me.innerHTML=l1,i(t,al,c),i(t,Fe,c),e(Fe,mr),i(t,nl,c),i(t,ct,c),e(ct,vr),e(ct,Da),e(Da,yr),e(ct,wr),e(ct,ve),e(ve,br),i(t,ol,c),i(t,jt,c),e(jt,Tt),e(Tt,Oa),e(jt,Er),i(t,ll,c),i(t,E,c),e(E,gr),e(E,Ca),e(Ca,_r),e(E,Dr),e(E,Pa),e(Pa,Or),e(E,Cr),e(E,xa),e(xa,Pr),e(E,xr),e(E,ja),e(ja,jr),e(E,Tr),e(E,Ta),e(Ta,Ar),e(E,Ir),e(E,Aa),e(Aa,Wr),e(E,Hr),e(E,Ia),e(Ia,Sr),e(E,Lr),i(t,pl,c),i(t,ye,c),ye.innerHTML=p1,i(t,cl,c),i(t,tt,c),e(tt,Rr),e(tt,Wa),e(Wa,qr),e(tt,Mr),e(tt,Ha),e(Ha,Nr),e(tt,Yr),i(t,il,c),i(t,Je,c),e(Je,Br),i(t,rl,c),i(t,ze,c),e(ze,$r),i(t,ul,c),i(t,At,c),e(At,It),e(It,Sa),e(At,Gr),i(t,dl,c),i(t,Ve,c),e(Ve,Ur),i(t,fl,c),i(t,Wt,c),e(Wt,La),e(La,Fr),e(Wt,Jr),e(Wt,Ra),e(Ra,zr),i(t,hl,c),i(t,N,c),e(N,qa),e(qa,Vr),e(N,Kr),e(N,Ma),e(Ma,Qr),e(N,Xr),e(N,Na),e(Na,Zr),e(N,tu),e(N,Ya),e(Ya,eu),e(N,su),i(t,kl,c),i(t,f,c),e(f,Ba),e(Ba,au),e(f,nu),e(f,$a),e($a,ou),e(f,lu),e(f,Ga),e(Ga,pu),e(f,cu),e(f,Ua),e(Ua,iu),e(f,ru),e(f,Fa),e(Fa,uu),e(f,du),e(f,Ja),e(Ja,fu),e(f,hu),e(f,za),e(za,ku),e(f,mu),e(f,Va),e(Va,vu),e(f,yu),e(f,Ka),e(Ka,wu),e(f,bu),e(f,Qa),e(Qa,Eu),e(f,gu),e(f,Xa),e(Xa,_u),e(f,Du),e(f,Za),e(Za,Ou),e(f,Cu),e(f,tn),e(tn,Pu),e(f,xu),e(f,en),e(en,ju),e(f,Tu),e(f,sn),e(sn,Au),e(f,Iu),e(f,an),e(an,Wu),e(f,Hu),i(t,ml,c),i(t,we,c),we.innerHTML=c1,i(t,vl,c),i(t,et,c),e(et,Su),e(et,nn),e(nn,Lu),e(et,Ru),e(et,on),e(on,qu),e(et,Mu),i(t,yl,c),i(t,be,c),be.innerHTML=i1,i(t,wl,c),i(t,Ht,c),e(Ht,Nu),e(Ht,ln),e(ln,Yu),e(Ht,Bu),i(t,bl,c),i(t,Ke,c),e(Ke,$u),i(t,El,c),i(t,St,c),e(St,D),e(D,Gu),e(D,pn),e(pn,Uu),e(D,Fu),e(D,cn),e(cn,Ju),e(D,zu),e(D,rn),e(rn,Vu),e(D,Ku),e(D,un),e(un,Qu),e(D,Xu),e(D,dn),e(dn,Zu),e(D,td),e(D,fn),e(fn,ed),e(D,sd),e(D,hn),e(hn,ad),e(D,nd),e(St,od),e(St,it),e(it,ld),e(it,kn),e(kn,pd),e(it,cd),e(it,mn),e(mn,id),e(it,rd),i(t,gl,c),i(t,y,c),e(y,ud),e(y,vn),e(vn,dd),e(y,fd),e(y,yn),e(yn,hd),e(y,kd),e(y,wn),e(wn,md),e(y,vd),e(y,bn),e(bn,yd),e(y,wd),e(y,En),e(En,bd),e(y,Ed),e(y,gn),e(gn,gd),e(y,_d),e(y,_n),e(_n,Dd),e(y,Od),e(y,Dn),e(Dn,Cd),e(y,Pd),e(y,On),e(On,xd),e(y,jd),i(t,_l,c),i(t,Lt,c),e(Lt,Td),e(Lt,Cn),e(Cn,Ad),e(Lt,Id),i(t,Dl,c),i(t,Ee,c),Ee.innerHTML=r1,i(t,Ol,c),i(t,Qe,c),e(Qe,Wd),i(t,Cl,c),i(t,Rt,c),e(Rt,qt),e(qt,Pn),e(Rt,Hd),i(t,Pl,c),i(t,Mt,c),e(Mt,Sd),e(Mt,ge),e(ge,Ld),e(Mt,Rd),i(t,xl,c),i(t,_e,c),e(_e,qd),e(_e,De),e(De,Md),i(t,jl,c),i(t,Nt,c),e(Nt,Yt),e(Yt,xn),e(Nt,Nd),i(t,Tl,c),i(t,Xe,c),e(Xe,Yd),i(t,Al,c),i(t,Oe,c),Oe.innerHTML=u1,i(t,Il,c),i(t,Ze,c),e(Ze,Bd),i(t,Wl,c),i(t,Ce,c),Ce.innerHTML=d1,i(t,Hl,c),i(t,Bt,c),e(Bt,$t),e($t,jn),e(Bt,$d),i(t,Sl,c),i(t,Gt,c),e(Gt,Gd),e(Gt,Tn),e(Tn,Ud),e(Gt,Fd),i(t,Ll,c),i(t,Pe,c),Pe.innerHTML=f1,i(t,Rl,c),i(t,$,c),e($,Jd),e($,An),e(An,zd),e($,Vd),e($,In),e(In,Kd),e($,Qd),e($,Wn),e(Wn,Xd),e($,Zd),i(t,ql,c),i(t,Ut,c),e(Ut,Ft),e(Ft,Hn),e(Ut,tf),i(t,Ml,c),i(t,Jt,c),e(Jt,ef),e(Jt,Sn),e(Sn,sf),e(Jt,af),i(t,Nl,c),i(t,rt,c),e(rt,Ln),e(Ln,nf),e(rt,of),e(rt,Rn),e(Rn,lf),e(rt,pf),i(t,Yl,c),i(t,xe,c),xe.innerHTML=h1,i(t,Bl,c),i(t,ts,c),e(ts,cf),i(t,$l,c),i(t,je,c),je.innerHTML=k1,i(t,Gl,c),i(t,G,c),e(G,rf),e(G,qn),e(qn,uf),e(G,df),e(G,Mn),e(Mn,ff),e(G,hf),e(G,Nn),e(Nn,kf),e(G,mf),i(t,Ul,c),i(t,Te,c),e(Te,Yn),e(Yn,vf),e(Te,yf),i(t,Fl,c),i(t,st,c),e(st,zt),e(zt,Bn),e(st,wf),e(st,$n),e($n,bf),e(st,Ef),i(t,Jl,c),i(t,T,c),e(T,gf),e(T,Gn),e(Gn,_f),e(T,Df),e(T,Un),e(Un,Of),e(T,Cf),e(T,Fn),e(Fn,Pf),e(T,xf),e(T,Ae),e(Ae,jf),e(T,Tf),e(T,Ie),e(Ie,Af),e(T,If),i(t,zl,c),i(t,S,c),e(S,Wf),e(S,Jn),e(Jn,Hf),e(S,Sf),e(S,zn),e(zn,Lf),e(S,Rf),e(S,Vn),e(Vn,qf),e(S,Mf),e(S,Kn),e(Kn,Nf),e(S,Yf),i(t,Vl,c),i(t,C,c),e(C,Bf),e(C,Qn),e(Qn,$f),e(C,Gf),e(C,Xn),e(Xn,Uf),e(C,Ff),e(C,Zn),e(Zn,Jf),e(C,zf),e(C,to),e(to,Vf),e(C,Kf),e(C,eo),e(eo,Qf),e(C,Xf),e(C,so),e(so,Zf),e(C,th),i(t,Kl,c),i(t,es,c),e(es,eh),i(t,Ql,c),i(t,We,c),e(We,sh),e(We,He),e(He,ah),ss=!0},p(t,c){Y&&Y.p&&(!ss||c&4)&&z1(Y,nh,t,t[2],ss?K1(nh,t[2],c,null):V1(t[2]),null)},i(t){ss||(Fv(Y,t),ss=!0)},o(t){Jv(Y,t),ss=!1},d(t){t&&s(b),t&&s(z),t&&s(P),t&&s(co),t&&s(Le),t&&s(io),t&&s(Re),t&&s(ro),t&&s(ft),t&&s(uo),t&&s(ht),t&&s(fo),t&&s(mt),t&&s(ho),t&&s(ee),t&&s(ko),t&&s(lt),t&&s(mo),t&&s(vt),t&&s(vo),t&&s(x),t&&s(yo),t&&s(yt),t&&s(wo),t&&s(se),t&&s(bo),t&&s(Q),t&&s(Eo),t&&s(ae),t&&s(go),t&&s(qe),t&&s(_o),t&&s(O),t&&s(Do),t&&s(ne),t&&s(Oo),t&&s(M),t&&s(Co),t&&s(j),t&&s(Po),t&&s(H),t&&s(xo),t&&s(bt),t&&s(jo),t&&s(Me),t&&s(To),t&&s(X),t&&s(Ao),t&&s(m),t&&s(Io),t&&s(oe),t&&s(Wo),t&&s(Ne),t&&s(Ho),t&&s(gt),t&&s(So),t&&s(v),t&&s(Lo),t&&s(pe),t&&s(Ro),t&&s(Ye),t&&s(qo),t&&s(Be),t&&s(Mo),t&&s(ce),t&&s(No),t&&s($e),t&&s(Yo),t&&s(ie),t&&s(Bo),t&&s(Ge),t&&s($o),t&&s(re),t&&s(Go),t&&s(_t),t&&s(Uo),t&&s(ue),t&&s(Fo),t&&s(Dt),t&&s(Jo),t&&s(Z),Y&&Y.d(t),t&&s(zo),t&&s(de),t&&s(Vo),t&&s(fe),t&&s(Ko),t&&s(Ct),t&&s(Qo),t&&s(Ue),t&&s(Xo),t&&s(B),t&&s(Zo),t&&s(pt),t&&s(tl),t&&s(ke),t&&s(el),t&&s(xt),t&&s(sl),t&&s(me),t&&s(al),t&&s(Fe),t&&s(nl),t&&s(ct),t&&s(ol),t&&s(jt),t&&s(ll),t&&s(E),t&&s(pl),t&&s(ye),t&&s(cl),t&&s(tt),t&&s(il),t&&s(Je),t&&s(rl),t&&s(ze),t&&s(ul),t&&s(At),t&&s(dl),t&&s(Ve),t&&s(fl),t&&s(Wt),t&&s(hl),t&&s(N),t&&s(kl),t&&s(f),t&&s(ml),t&&s(we),t&&s(vl),t&&s(et),t&&s(yl),t&&s(be),t&&s(wl),t&&s(Ht),t&&s(bl),t&&s(Ke),t&&s(El),t&&s(St),t&&s(gl),t&&s(y),t&&s(_l),t&&s(Lt),t&&s(Dl),t&&s(Ee),t&&s(Ol),t&&s(Qe),t&&s(Cl),t&&s(Rt),t&&s(Pl),t&&s(Mt),t&&s(xl),t&&s(_e),t&&s(jl),t&&s(Nt),t&&s(Tl),t&&s(Xe),t&&s(Al),t&&s(Oe),t&&s(Il),t&&s(Ze),t&&s(Wl),t&&s(Ce),t&&s(Hl),t&&s(Bt),t&&s(Sl),t&&s(Gt),t&&s(Ll),t&&s(Pe),t&&s(Rl),t&&s($),t&&s(ql),t&&s(Ut),t&&s(Ml),t&&s(Jt),t&&s(Nl),t&&s(rt),t&&s(Yl),t&&s(xe),t&&s(Bl),t&&s(ts),t&&s($l),t&&s(je),t&&s(Gl),t&&s(G),t&&s(Ul),t&&s(Te),t&&s(Fl),t&&s(st),t&&s(Jl),t&&s(T),t&&s(zl),t&&s(S),t&&s(Vl),t&&s(C),t&&s(Kl),t&&s(es),t&&s(Ql),t&&s(We)}}}function Z1(ot){let b,W,z;const P=[ot[0],Uv];let V={$$slots:{default:[X1]},$$scope:{ctx:ot}};for(let k=0;k<P.length;k+=1)V=bh(V,P[k]);return W=new Q1({props:V}),{c(){b=u(),Y1(W.$$.fragment),this.h()},l(k){B1("svelte-b5ev1l",document.head).forEach(s),b=d(k),$1(W.$$.fragment,k),this.h()},h(){document.title="Make a blog with svelte kit and host on github (Updated on Feb 7 - 2023)"},m(k,q){i(k,b,q),G1(W,k,q),z=!0},p(k,[q]){const Se=q&1?U1(P,[q&1&&$v(k[0]),q&0&&$v(Uv)]):{};q&4&&(Se.$$scope={dirty:q,ctx:k}),W.$set(Se)},i(k){z||(Fv(W.$$.fragment,k),z=!0)},o(k){Jv(W.$$.fragment,k),z=!1},d(k){k&&s(b),F1(W,k)}}}const Uv={title:"Make a blog with svelte kit and host on github (Updated on Feb 7 - 2023)",created:"2021-05-18",slug:"2021-05-81-make-blog-with-sveltekit"};function ty(ot,b,W){let{$$slots:z={},$$scope:P}=b;return ot.$$set=V=>{W(0,b=bh(bh({},b),Gv(V))),"$$scope"in V&&W(2,P=V.$$scope)},b=Gv(b),[b,z,P]}class ay extends q1{constructor(b){super(),M1(this,b,ty,Z1,N1,{})}}export{ay as default,Uv as metadata};
