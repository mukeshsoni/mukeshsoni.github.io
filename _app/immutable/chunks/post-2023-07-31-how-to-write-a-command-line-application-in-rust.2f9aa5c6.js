import{S as Qt,i as Xt,s as Yt,R as jn,a as u,z as Zt,O as se,h as a,c as i,A as ae,b as e,B as ne,T as te,U as Et,g as ee,d as pe,C as oe,V as yt,k as l,r as p,l as r,m as c,u as o,p as f,G as n,n as le}from"./index.bc8fed38.js";import{P as re}from"./post_layout.75190885.js";function ce(Z){let m,h,E,d,N,k,v,ss,ks,Pa,Ca,as,Ta,Oa,Is,Ns,Us,ns,La,$s,ts,Da,js,U,Pt=`<code class="language-bash"><span class="token function">cargo</span> new add-machine
<span class="token builtin class-name">cd</span> add-machine
<span class="token function">cargo</span> run</code>`,As,T,Ha,fs,Ma,xa,Ss,es,Ra,Bs,$,Ct=`<code class="language-bash">add-machine <span class="token number">2</span> <span class="token number">3</span>
// prints <span class="token number">5</span></code>`,Vs,j,Wa,ms,Ia,zs,A,Tt=`<code class="language-bash"><span class="token function">cargo</span> run <span class="token number">2</span> <span class="token number">3</span>
// prints <span class="token number">5</span></code>`,Fs,b,Na,ds,Ua,$a,hs,ja,Aa,ws,Sa,Ba,qs,S,Ot=`<code class="language-rust"><span class="token comment">// file src/main.rs</span>
<span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span></span>env<span class="token punctuation">;</span> <span class="token comment">// bring the env module in scope</span>

<span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">let</span> args<span class="token punctuation">:</span> <span class="token class-name">Vec</span><span class="token operator">&lt;</span><span class="token class-name">String</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token namespace">std<span class="token punctuation">::</span></span>args<span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"&#123;:?&#125;"</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code>`,Gs,ps,Va,Js,os,za,Ks,B,Lt=`<code class="language-bash"><span class="token function">cargo</span> run <span class="token number">2</span> <span class="token number">3</span>
<span class="token punctuation">[</span><span class="token string">"target/debug/rust-cli"</span>, <span class="token string">"2"</span>, <span class="token string">"3"</span><span class="token punctuation">]</span></code>`,Qs,ls,Fa,Xs,V,Dt=`<code class="language-rust"><span class="token comment">// file src/main.rs</span>
<span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span></span>env<span class="token punctuation">;</span>

<span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">let</span> args<span class="token punctuation">:</span> <span class="token class-name">Vec</span><span class="token operator">&lt;</span><span class="token class-name">String</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token namespace">env<span class="token punctuation">::</span></span><span class="token function">args</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 1. Get the arguments which start from 1st index</span>
    <span class="token comment">// 2. Map over the arguments and parse the strings into numbers</span>
    <span class="token comment">// 3. TODO: User's might input non-numbers. Or less than 2 arguments. Hanlde those</span>
    <span class="token comment">// error cases later.</span>
    <span class="token keyword">let</span> nums<span class="token punctuation">:</span> <span class="token class-name">Vec</span><span class="token operator">&lt;</span><span class="token keyword">i32</span><span class="token operator">></span> <span class="token operator">=</span> args<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">..</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">iter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>x<span class="token closure-punctuation punctuation">|</span></span> x<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"&#123;:?&#125; &#123;:?&#125;"</span><span class="token punctuation">,</span>  args<span class="token punctuation">,</span> nums<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code>`,Ys,rs,qa,Zs,z,Ht=`<code class="language-rust"><span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"The sum of &#123;&#125; and &#123;&#125; is &#123;&#125;"</span><span class="token punctuation">,</span>  nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code>`,sa,cs,Ga,aa,F,Mt=`<code class="language-bash"><span class="token function">cargo</span> run <span class="token number">2</span> <span class="token number">3</span>
// should print <span class="token string">"The sum of 2 and 3 is 5"</span></code>`,na,C,O,vs,Ja,bs,Ka,ta,L,Qa,q,_s,Xa,Ya,ea,y,Za,Es,sn,an,ys,nn,tn,pa,G,xt='<code class="language-bash"><span class="token function">cargo</span> <span class="token function">add</span> clap <span class="token parameter variable">--feature</span> derive</code>',oa,g,en,gs,pn,on,Ps,ln,rn,la,D,cn,Cs,un,kn,ra,J,Rt=`<code class="language-rust"><span class="token keyword">use</span> <span class="token namespace">clap<span class="token punctuation">::</span></span><span class="token class-name">Parser</span><span class="token punctuation">;</span>

<span class="token attribute attr-name">#[derive(Debug, Parser)]</span>
<span class="token keyword">struct</span> <span class="token type-definition class-name">Cli</span> <span class="token punctuation">&#123;</span>
    num1<span class="token punctuation">:</span> <span class="token keyword">i32</span><span class="token punctuation">,</span>
    num2<span class="token punctuation">:</span> <span class="token keyword">i32</span><span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">let</span> args <span class="token operator">=</span> <span class="token class-name">Cli</span><span class="token punctuation">::</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"&#123;:?&#125;"</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"The sum of &#123;&#125; and &#123;&#125; is &#123;&#125;"</span><span class="token punctuation">,</span> args<span class="token punctuation">.</span>num1<span class="token punctuation">,</span> args<span class="token punctuation">.</span>num2<span class="token punctuation">,</span> args<span class="token punctuation">.</span>num1 <span class="token operator">+</span> args<span class="token punctuation">.</span>num2<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code>`,ca,w,fn,Ts,mn,dn,Os,hn,wn,Ls,vn,bn,Ds,_n,En,ua,H,yn,Hs,gn,Pn,ia,K,Wt=`<code class="language-bash"><span class="token function">cargo</span> run <span class="token number">2</span> <span class="token number">3</span>
// should print <span class="token string">"The sum of 2 and 3 is 5"</span></code>`,ka,M,Cn,Ms,Tn,On,fa,Q,It=`<code class="language-bash">% <span class="token function">cargo</span> run -- <span class="token parameter variable">--help</span>
    Finished dev <span class="token punctuation">[</span>unoptimized + debuginfo<span class="token punctuation">]</span> target<span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token keyword">in</span> <span class="token number">0</span>.07s
     Running <span class="token variable"><span class="token variable">&#96;</span>target/debug/rust-cli <span class="token parameter variable">--help</span><span class="token variable">&#96;</span></span>
Usage: rust-cli <span class="token operator">&lt;</span>NUM<span class="token operator"><span class="token file-descriptor important">1</span>></span> <span class="token operator">&lt;</span>NUM<span class="token operator"><span class="token file-descriptor important">2</span>></span>

Arguments:
  <span class="token operator">&lt;</span>NUM<span class="token operator"><span class="token file-descriptor important">1</span>></span>
  <span class="token operator">&lt;</span>NUM<span class="token operator"><span class="token file-descriptor important">2</span>></span>

Options:
  -h, <span class="token parameter variable">--help</span>  Print <span class="token builtin class-name">help</span></code>`,ma,x,Ln,xs,Dn,Hn,da,X,Nt=`<code class="language-bash">% <span class="token function">cargo</span> run <span class="token number">2</span> three
    Finished dev <span class="token punctuation">[</span>unoptimized + debuginfo<span class="token punctuation">]</span> target<span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token keyword">in</span> <span class="token number">0</span>.02s
     Running <span class="token variable"><span class="token variable">&#96;</span>target/debug/rust-cli <span class="token number">2</span> three<span class="token variable">&#96;</span></span>
error: invalid value <span class="token string">'three'</span> <span class="token keyword">for</span> <span class="token string">'&lt;NUM2>'</span><span class="token builtin class-name">:</span> invalid digit found <span class="token keyword">in</span> string

For <span class="token function">more</span> information, try <span class="token string">'--help'</span><span class="token builtin class-name">.</span></code>`,ha,_,Mn,Rs,xn,Rn,Ws,Wn,In,Y,Nn,Un;return{c(){m=l("p"),h=p("Writing a command line application in rust in not that hard. Mainly because of the library ecosystem for writing CLI apps in rust."),E=u(),d=l("p"),N=p("Before we get started, make sure you have "),k=l("code"),v=p("rustc"),ss=p(" and "),ks=l("code"),Pa=p("cargo"),Ca=p(" installed on your machine. If you don’t know how to do that, check this "),as=l("a"),Ta=p("link"),Oa=p("."),Is=u(),Ns=l("hr"),Us=u(),ns=l("p"),La=p("Let’s build a small CLI app which takes 2 numbers as inputs and prints the sum of the numbers. We will not use any library for this one."),$s=u(),ts=l("p"),Da=p("Let’s create our rust app first -"),js=u(),U=l("pre"),As=u(),T=l("p"),Ha=p("When we build a "),fs=l("code"),Ma=p("rust"),xa=p(" app, it’s already a CLI app. The app we created above just prints “Hello, world!“. But it’s a CLI app nevertheless, i.e. it’s an executable which can be run in a shell."),Ss=u(),es=l("p"),Ra=p("We want to finally call our app like this -"),Bs=u(),$=l("pre"),Vs=u(),j=l("p"),Wa=p("During development we will run the same app with "),ms=l("code"),Ia=p("cargo"),zs=u(),A=l("pre"),Fs=u(),b=l("p"),Na=p("The first step is to get the input from the terminal from the user inside our program. "),ds=l("code"),Ua=p("rust"),$a=p(" standard library has a "),hs=l("code"),ja=p("env"),Aa=p(" module which has an "),ws=l("code"),Sa=p("args"),Ba=p(" function which can provide us the input after the command as a list of strings."),qs=u(),S=l("pre"),Gs=u(),ps=l("p"),Va=p("This program when run should print a vector whose first value is the path to the program itself and the rest of the values are all the arguments we pass to the command (separated by space)."),Js=u(),os=l("p"),za=p("Something like this"),Ks=u(),B=l("pre"),Qs=u(),ls=l("p"),Fa=p("Now that we have the input from the user, we need to first transform them from strings to numbers."),Xs=u(),V=l("pre"),Ys=u(),rs=l("p"),qa=p("We have gotten hold of the arguments. Let’s add them up and print it out."),Zs=u(),z=l("pre"),sa=u(),cs=l("p"),Ga=p("Our program should now be able to add 2 numbers -"),aa=u(),F=l("pre"),na=u(),C=l("h3"),O=l("a"),vs=l("span"),Ja=p("Using a library to build our CLI application - "),bs=l("code"),Ka=p("clap"),ta=u(),L=l("p"),Qa=p("Let’s build the same application using a library called "),q=l("a"),_s=l("code"),Xa=p("clap"),Ya=p(", which helps with a lot more than just parsing the arguments."),ea=u(),y=l("p"),Za=p("We will use "),Es=l("code"),sn=p("cargo-edit"),an=p(" to add the library instead of directly editing "),ys=l("code"),nn=p("Cargo.toml"),tn=p(" file."),pa=u(),G=l("pre"),oa=u(),g=l("p"),en=p("Our "),gs=l("code"),pn=p("Cargo.toml"),on=p(" should now have an entry for the "),Ps=l("code"),ln=p("clap"),rn=p(" library and it’s ready to use in our program."),la=u(),D=l("p"),cn=p("Now we will use "),Cs=l("code"),un=p("clap"),kn=p(" to parse the arguments we pass to our app/program -"),ra=u(),J=l("pre"),ca=u(),w=l("p"),fn=p("In the above program, we create a struct where we define 2 properties where we will hold our numbers to be added. We annotate the struct with "),Ts=l("code"),mn=p("#[derive(Parser)]"),dn=p(" attribute. That piece of code will enhance our "),Os=l("code"),hn=p("Cli"),wn=p(" struct with the ability to read our command line arguments and parse them as per our type definitions for "),Ls=l("code"),vn=p("num1"),bn=p(" and "),Ds=l("code"),_n=p("num2"),En=p(". This seems like magic and probably is."),ua=u(),H=l("p"),yn=p("This program should now work exactly as our program without "),Hs=l("code"),gn=p("clap"),Pn=p("."),ia=u(),K=l("pre"),ka=u(),M=l("p"),Cn=p("The great thing about using "),Ms=l("code"),Tn=p("clap"),On=p(" is that we now get free help instructions for our program."),fa=u(),Q=l("pre"),ma=u(),x=l("p"),Ln=p("Not just that, we also get some free error handling. What if the user who invokes our command provides something other than a number as input? The "),xs=l("code"),Dn=p("clap"),Hn=p(" parser will catch it and let the user know -"),da=u(),X=l("pre"),ha=u(),_=l("p"),Mn=p("Of course "),Rs=l("code"),xn=p("clap"),Rn=p(" provides much more than this. Head over to "),Ws=l("code"),Wn=p("clap's"),In=p(" crate page for details on how cool it is - "),Y=l("a"),Nn=p("https://docs.rs/clap/latest/clap/"),Un=p("."),this.h()},l(s){m=r(s,"P",{});var t=c(m);h=o(t,"Writing a command line application in rust in not that hard. Mainly because of the library ecosystem for writing CLI apps in rust."),t.forEach(a),E=i(s),d=r(s,"P",{});var R=c(d);N=o(R,"Before we get started, make sure you have "),k=r(R,"CODE",{});var An=c(k);v=o(An,"rustc"),An.forEach(a),ss=o(R," and "),ks=r(R,"CODE",{});var Sn=c(ks);Pa=o(Sn,"cargo"),Sn.forEach(a),Ca=o(R," installed on your machine. If you don’t know how to do that, check this "),as=r(R,"A",{href:!0});var Bn=c(as);Ta=o(Bn,"link"),Bn.forEach(a),Oa=o(R,"."),R.forEach(a),Is=i(s),Ns=r(s,"HR",{}),Us=i(s),ns=r(s,"P",{});var Vn=c(ns);La=o(Vn,"Let’s build a small CLI app which takes 2 numbers as inputs and prints the sum of the numbers. We will not use any library for this one."),Vn.forEach(a),$s=i(s),ts=r(s,"P",{});var zn=c(ts);Da=o(zn,"Let’s create our rust app first -"),zn.forEach(a),js=i(s),U=r(s,"PRE",{class:!0});var Ut=c(U);Ut.forEach(a),As=i(s),T=r(s,"P",{});var wa=c(T);Ha=o(wa,"When we build a "),fs=r(wa,"CODE",{});var Fn=c(fs);Ma=o(Fn,"rust"),Fn.forEach(a),xa=o(wa," app, it’s already a CLI app. The app we created above just prints “Hello, world!“. But it’s a CLI app nevertheless, i.e. it’s an executable which can be run in a shell."),wa.forEach(a),Ss=i(s),es=r(s,"P",{});var qn=c(es);Ra=o(qn,"We want to finally call our app like this -"),qn.forEach(a),Bs=i(s),$=r(s,"PRE",{class:!0});var $t=c($);$t.forEach(a),Vs=i(s),j=r(s,"P",{});var $n=c(j);Wa=o($n,"During development we will run the same app with "),ms=r($n,"CODE",{});var Gn=c(ms);Ia=o(Gn,"cargo"),Gn.forEach(a),$n.forEach(a),zs=i(s),A=r(s,"PRE",{class:!0});var jt=c(A);jt.forEach(a),Fs=i(s),b=r(s,"P",{});var W=c(b);Na=o(W,"The first step is to get the input from the terminal from the user inside our program. "),ds=r(W,"CODE",{});var Jn=c(ds);Ua=o(Jn,"rust"),Jn.forEach(a),$a=o(W," standard library has a "),hs=r(W,"CODE",{});var Kn=c(hs);ja=o(Kn,"env"),Kn.forEach(a),Aa=o(W," module which has an "),ws=r(W,"CODE",{});var Qn=c(ws);Sa=o(Qn,"args"),Qn.forEach(a),Ba=o(W," function which can provide us the input after the command as a list of strings."),W.forEach(a),qs=i(s),S=r(s,"PRE",{class:!0});var At=c(S);At.forEach(a),Gs=i(s),ps=r(s,"P",{});var Xn=c(ps);Va=o(Xn,"This program when run should print a vector whose first value is the path to the program itself and the rest of the values are all the arguments we pass to the command (separated by space)."),Xn.forEach(a),Js=i(s),os=r(s,"P",{});var Yn=c(os);za=o(Yn,"Something like this"),Yn.forEach(a),Ks=i(s),B=r(s,"PRE",{class:!0});var St=c(B);St.forEach(a),Qs=i(s),ls=r(s,"P",{});var Zn=c(ls);Fa=o(Zn,"Now that we have the input from the user, we need to first transform them from strings to numbers."),Zn.forEach(a),Xs=i(s),V=r(s,"PRE",{class:!0});var Bt=c(V);Bt.forEach(a),Ys=i(s),rs=r(s,"P",{});var st=c(rs);qa=o(st,"We have gotten hold of the arguments. Let’s add them up and print it out."),st.forEach(a),Zs=i(s),z=r(s,"PRE",{class:!0});var Vt=c(z);Vt.forEach(a),sa=i(s),cs=r(s,"P",{});var at=c(cs);Ga=o(at,"Our program should now be able to add 2 numbers -"),at.forEach(a),aa=i(s),F=r(s,"PRE",{class:!0});var zt=c(F);zt.forEach(a),na=i(s),C=r(s,"H3",{id:!0});var va=c(C);O=r(va,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var nt=c(O);vs=r(nt,"SPAN",{class:!0}),c(vs).forEach(a),nt.forEach(a),Ja=o(va,"Using a library to build our CLI application - "),bs=r(va,"CODE",{});var tt=c(bs);Ka=o(tt,"clap"),tt.forEach(a),va.forEach(a),ta=i(s),L=r(s,"P",{});var ba=c(L);Qa=o(ba,"Let’s build the same application using a library called "),q=r(ba,"A",{href:!0,rel:!0});var et=c(q);_s=r(et,"CODE",{});var pt=c(_s);Xa=o(pt,"clap"),pt.forEach(a),et.forEach(a),Ya=o(ba,", which helps with a lot more than just parsing the arguments."),ba.forEach(a),ea=i(s),y=r(s,"P",{});var us=c(y);Za=o(us,"We will use "),Es=r(us,"CODE",{});var ot=c(Es);sn=o(ot,"cargo-edit"),ot.forEach(a),an=o(us," to add the library instead of directly editing "),ys=r(us,"CODE",{});var lt=c(ys);nn=o(lt,"Cargo.toml"),lt.forEach(a),tn=o(us," file."),us.forEach(a),pa=i(s),G=r(s,"PRE",{class:!0});var Ft=c(G);Ft.forEach(a),oa=i(s),g=r(s,"P",{});var is=c(g);en=o(is,"Our "),gs=r(is,"CODE",{});var rt=c(gs);pn=o(rt,"Cargo.toml"),rt.forEach(a),on=o(is," should now have an entry for the "),Ps=r(is,"CODE",{});var ct=c(Ps);ln=o(ct,"clap"),ct.forEach(a),rn=o(is," library and it’s ready to use in our program."),is.forEach(a),la=i(s),D=r(s,"P",{});var _a=c(D);cn=o(_a,"Now we will use "),Cs=r(_a,"CODE",{});var ut=c(Cs);un=o(ut,"clap"),ut.forEach(a),kn=o(_a," to parse the arguments we pass to our app/program -"),_a.forEach(a),ra=i(s),J=r(s,"PRE",{class:!0});var qt=c(J);qt.forEach(a),ca=i(s),w=r(s,"P",{});var P=c(w);fn=o(P,"In the above program, we create a struct where we define 2 properties where we will hold our numbers to be added. We annotate the struct with "),Ts=r(P,"CODE",{});var it=c(Ts);mn=o(it,"#[derive(Parser)]"),it.forEach(a),dn=o(P," attribute. That piece of code will enhance our "),Os=r(P,"CODE",{});var kt=c(Os);hn=o(kt,"Cli"),kt.forEach(a),wn=o(P," struct with the ability to read our command line arguments and parse them as per our type definitions for "),Ls=r(P,"CODE",{});var ft=c(Ls);vn=o(ft,"num1"),ft.forEach(a),bn=o(P," and "),Ds=r(P,"CODE",{});var mt=c(Ds);_n=o(mt,"num2"),mt.forEach(a),En=o(P,". This seems like magic and probably is."),P.forEach(a),ua=i(s),H=r(s,"P",{});var Ea=c(H);yn=o(Ea,"This program should now work exactly as our program without "),Hs=r(Ea,"CODE",{});var dt=c(Hs);gn=o(dt,"clap"),dt.forEach(a),Pn=o(Ea,"."),Ea.forEach(a),ia=i(s),K=r(s,"PRE",{class:!0});var Gt=c(K);Gt.forEach(a),ka=i(s),M=r(s,"P",{});var ya=c(M);Cn=o(ya,"The great thing about using "),Ms=r(ya,"CODE",{});var ht=c(Ms);Tn=o(ht,"clap"),ht.forEach(a),On=o(ya," is that we now get free help instructions for our program."),ya.forEach(a),fa=i(s),Q=r(s,"PRE",{class:!0});var Jt=c(Q);Jt.forEach(a),ma=i(s),x=r(s,"P",{});var ga=c(x);Ln=o(ga,"Not just that, we also get some free error handling. What if the user who invokes our command provides something other than a number as input? The "),xs=r(ga,"CODE",{});var wt=c(xs);Dn=o(wt,"clap"),wt.forEach(a),Hn=o(ga," parser will catch it and let the user know -"),ga.forEach(a),da=i(s),X=r(s,"PRE",{class:!0});var Kt=c(X);Kt.forEach(a),ha=i(s),_=r(s,"P",{});var I=c(_);Mn=o(I,"Of course "),Rs=r(I,"CODE",{});var vt=c(Rs);xn=o(vt,"clap"),vt.forEach(a),Rn=o(I," provides much more than this. Head over to "),Ws=r(I,"CODE",{});var bt=c(Ws);Wn=o(bt,"clap's"),bt.forEach(a),In=o(I," crate page for details on how cool it is - "),Y=r(I,"A",{href:!0,rel:!0});var _t=c(Y);Nn=o(_t,"https://docs.rs/clap/latest/clap/"),_t.forEach(a),Un=o(I,"."),I.forEach(a),this.h()},h(){f(as,"href","/blog/2023-07-31-rust-quick-setup-macos"),f(U,"class","language-bash"),f($,"class","language-bash"),f(A,"class","language-bash"),f(S,"class","language-rust"),f(B,"class","language-bash"),f(V,"class","language-rust"),f(z,"class","language-rust"),f(F,"class","language-bash"),f(vs,"class","icon icon-link"),f(O,"aria-hidden","true"),f(O,"tabindex","-1"),f(O,"href","#using-a-library-to-build-our-cli-application---clap"),f(C,"id","using-a-library-to-build-our-cli-application---clap"),f(q,"href","https://docs.rs/clap/latest/clap/"),f(q,"rel","nofollow"),f(G,"class","language-bash"),f(J,"class","language-rust"),f(K,"class","language-bash"),f(Q,"class","language-bash"),f(X,"class","language-bash"),f(Y,"href","https://docs.rs/clap/latest/clap/"),f(Y,"rel","nofollow")},m(s,t){e(s,m,t),n(m,h),e(s,E,t),e(s,d,t),n(d,N),n(d,k),n(k,v),n(d,ss),n(d,ks),n(ks,Pa),n(d,Ca),n(d,as),n(as,Ta),n(d,Oa),e(s,Is,t),e(s,Ns,t),e(s,Us,t),e(s,ns,t),n(ns,La),e(s,$s,t),e(s,ts,t),n(ts,Da),e(s,js,t),e(s,U,t),U.innerHTML=Pt,e(s,As,t),e(s,T,t),n(T,Ha),n(T,fs),n(fs,Ma),n(T,xa),e(s,Ss,t),e(s,es,t),n(es,Ra),e(s,Bs,t),e(s,$,t),$.innerHTML=Ct,e(s,Vs,t),e(s,j,t),n(j,Wa),n(j,ms),n(ms,Ia),e(s,zs,t),e(s,A,t),A.innerHTML=Tt,e(s,Fs,t),e(s,b,t),n(b,Na),n(b,ds),n(ds,Ua),n(b,$a),n(b,hs),n(hs,ja),n(b,Aa),n(b,ws),n(ws,Sa),n(b,Ba),e(s,qs,t),e(s,S,t),S.innerHTML=Ot,e(s,Gs,t),e(s,ps,t),n(ps,Va),e(s,Js,t),e(s,os,t),n(os,za),e(s,Ks,t),e(s,B,t),B.innerHTML=Lt,e(s,Qs,t),e(s,ls,t),n(ls,Fa),e(s,Xs,t),e(s,V,t),V.innerHTML=Dt,e(s,Ys,t),e(s,rs,t),n(rs,qa),e(s,Zs,t),e(s,z,t),z.innerHTML=Ht,e(s,sa,t),e(s,cs,t),n(cs,Ga),e(s,aa,t),e(s,F,t),F.innerHTML=Mt,e(s,na,t),e(s,C,t),n(C,O),n(O,vs),n(C,Ja),n(C,bs),n(bs,Ka),e(s,ta,t),e(s,L,t),n(L,Qa),n(L,q),n(q,_s),n(_s,Xa),n(L,Ya),e(s,ea,t),e(s,y,t),n(y,Za),n(y,Es),n(Es,sn),n(y,an),n(y,ys),n(ys,nn),n(y,tn),e(s,pa,t),e(s,G,t),G.innerHTML=xt,e(s,oa,t),e(s,g,t),n(g,en),n(g,gs),n(gs,pn),n(g,on),n(g,Ps),n(Ps,ln),n(g,rn),e(s,la,t),e(s,D,t),n(D,cn),n(D,Cs),n(Cs,un),n(D,kn),e(s,ra,t),e(s,J,t),J.innerHTML=Rt,e(s,ca,t),e(s,w,t),n(w,fn),n(w,Ts),n(Ts,mn),n(w,dn),n(w,Os),n(Os,hn),n(w,wn),n(w,Ls),n(Ls,vn),n(w,bn),n(w,Ds),n(Ds,_n),n(w,En),e(s,ua,t),e(s,H,t),n(H,yn),n(H,Hs),n(Hs,gn),n(H,Pn),e(s,ia,t),e(s,K,t),K.innerHTML=Wt,e(s,ka,t),e(s,M,t),n(M,Cn),n(M,Ms),n(Ms,Tn),n(M,On),e(s,fa,t),e(s,Q,t),Q.innerHTML=It,e(s,ma,t),e(s,x,t),n(x,Ln),n(x,xs),n(xs,Dn),n(x,Hn),e(s,da,t),e(s,X,t),X.innerHTML=Nt,e(s,ha,t),e(s,_,t),n(_,Mn),n(_,Rs),n(Rs,xn),n(_,Rn),n(_,Ws),n(Ws,Wn),n(_,In),n(_,Y),n(Y,Nn),n(_,Un)},p:le,d(s){s&&a(m),s&&a(E),s&&a(d),s&&a(Is),s&&a(Ns),s&&a(Us),s&&a(ns),s&&a($s),s&&a(ts),s&&a(js),s&&a(U),s&&a(As),s&&a(T),s&&a(Ss),s&&a(es),s&&a(Bs),s&&a($),s&&a(Vs),s&&a(j),s&&a(zs),s&&a(A),s&&a(Fs),s&&a(b),s&&a(qs),s&&a(S),s&&a(Gs),s&&a(ps),s&&a(Js),s&&a(os),s&&a(Ks),s&&a(B),s&&a(Qs),s&&a(ls),s&&a(Xs),s&&a(V),s&&a(Ys),s&&a(rs),s&&a(Zs),s&&a(z),s&&a(sa),s&&a(cs),s&&a(aa),s&&a(F),s&&a(na),s&&a(C),s&&a(ta),s&&a(L),s&&a(ea),s&&a(y),s&&a(pa),s&&a(G),s&&a(oa),s&&a(g),s&&a(la),s&&a(D),s&&a(ra),s&&a(J),s&&a(ca),s&&a(w),s&&a(ua),s&&a(H),s&&a(ia),s&&a(K),s&&a(ka),s&&a(M),s&&a(fa),s&&a(Q),s&&a(ma),s&&a(x),s&&a(da),s&&a(X),s&&a(ha),s&&a(_)}}}function ue(Z){let m,h,E;const d=[Z[0],gt];let N={$$slots:{default:[ce]},$$scope:{ctx:Z}};for(let k=0;k<d.length;k+=1)N=jn(N,d[k]);return h=new re({props:N}),{c(){m=u(),Zt(h.$$.fragment),this.h()},l(k){se("svelte-xvt9is",document.head).forEach(a),m=i(k),ae(h.$$.fragment,k),this.h()},h(){document.title="How to write a command line application in rust"},m(k,v){e(k,m,v),ne(h,k,v),E=!0},p(k,[v]){const ss=v&1?te(d,[v&1&&Et(k[0]),v&0&&Et(gt)]):{};v&2&&(ss.$$scope={dirty:v,ctx:k}),h.$set(ss)},i(k){E||(ee(h.$$.fragment,k),E=!0)},o(k){pe(h.$$.fragment,k),E=!1},d(k){k&&a(m),oe(h,k)}}}const gt={title:"How to write a command line application in rust",created:"2023-07-31",slug:"2023-07-31-how-to-write-a-command-line-application-in-rust",categories:["rust","beginner","command line application","cli","clap"]};function ie(Z,m,h){return Z.$$set=E=>{h(0,m=jn(jn({},m),yt(E)))},m=yt(m),[m]}class me extends Qt{constructor(m){super(),Xt(this,m,ie,ue,Yt,{})}}export{me as default,gt as metadata};
