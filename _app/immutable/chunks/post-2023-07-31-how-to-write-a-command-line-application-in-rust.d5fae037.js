import{S as Bt,i as Vt,s as zt,R as Rn,a as u,z as Ft,O as qt,h as a,c as i,A as Gt,b as e,B as Jt,T as Kt,U as ft,g as Qt,d as Xt,C as Yt,V as mt,k as l,r as p,l as r,m as c,u as o,p as f,G as n,n as Zt}from"./index.bc8fed38.js";import{P as se}from"./post_layout.75190885.js";function ae(X){let m,h,_,d,I,k,v,Y,us,ya,ga,Z,Pa,Ca,xs,Rs,Ws,ss,Ta,Is,as,Oa,Ns,N,ht=`<code class="language-bash"><span class="token function">cargo</span> new add-machine
<span class="token builtin class-name">cd</span> add-machine
<span class="token function">cargo</span> run</code>`,Us,C,La,is,Da,Ma,$s,ns,Ha,js,U,wt=`<code class="language-bash">add-machine <span class="token number">2</span> <span class="token number">3</span>
// prints <span class="token number">5</span></code>`,Ss,$,xa,ks,Ra,As,j,vt=`<code class="language-bash"><span class="token function">cargo</span> run <span class="token number">2</span> <span class="token number">3</span>
// prints <span class="token number">5</span></code>`,Bs,b,Wa,fs,Ia,Na,ms,Ua,$a,ds,ja,Sa,Vs,S,bt=`<code class="language-rust"><span class="token comment">// file src/main.rs</span>
<span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span></span>env<span class="token punctuation">;</span> <span class="token comment">// bring the env module in scope</span>

<span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">let</span> args<span class="token punctuation">:</span> <span class="token class-name">Vec</span><span class="token operator">&lt;</span><span class="token class-name">String</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token namespace">std<span class="token punctuation">::</span></span>args<span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"&#123;:?&#125;"</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code>`,zs,ts,Aa,Fs,es,Ba,qs,A,_t=`<code class="language-bash"><span class="token function">cargo</span> run <span class="token number">2</span> <span class="token number">3</span>
<span class="token punctuation">[</span><span class="token string">"target/debug/rust-cli"</span>, <span class="token string">"2"</span>, <span class="token string">"3"</span><span class="token punctuation">]</span></code>`,Gs,ps,Va,Js,B,Et=`<code class="language-rust"><span class="token comment">// file src/main.rs</span>
<span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span></span>env<span class="token punctuation">;</span>

<span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">let</span> args<span class="token punctuation">:</span> <span class="token class-name">Vec</span><span class="token operator">&lt;</span><span class="token class-name">String</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token namespace">env<span class="token punctuation">::</span></span><span class="token function">args</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 1. Get the arguments which start from 1st index</span>
    <span class="token comment">// 2. Map over the arguments and parse the strings into numbers</span>
    <span class="token comment">// 3. TODO: User's might input non-numbers. Or less than 2 arguments. Hanlde those</span>
    <span class="token comment">// error cases later.</span>
    <span class="token keyword">let</span> nums<span class="token punctuation">:</span> <span class="token class-name">Vec</span><span class="token operator">&lt;</span><span class="token keyword">i32</span><span class="token operator">></span> <span class="token operator">=</span> args<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">..</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">iter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>x<span class="token closure-punctuation punctuation">|</span></span> x<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"&#123;:?&#125; &#123;:?&#125;"</span><span class="token punctuation">,</span>  args<span class="token punctuation">,</span> nums<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code>`,Ks,os,za,Qs,V,yt=`<code class="language-rust"><span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"The sum of &#123;&#125; and &#123;&#125; is &#123;&#125;"</span><span class="token punctuation">,</span>  nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code>`,Xs,ls,Fa,Ys,z,gt=`<code class="language-bash"><span class="token function">cargo</span> run <span class="token number">2</span> <span class="token number">3</span>
// should print <span class="token string">"The sum of 2 and 3 is 5"</span></code>`,Zs,P,T,hs,qa,ws,Ga,sa,O,Ja,F,vs,Ka,Qa,aa,E,Xa,bs,Ya,Za,_s,sn,an,na,q,Pt='<code class="language-bash"><span class="token function">cargo</span> <span class="token function">add</span> clap <span class="token parameter variable">--feature</span> derive</code>',ta,y,nn,Es,tn,en,ys,pn,on,ea,L,ln,gs,rn,cn,pa,G,Ct=`<code class="language-rust"><span class="token keyword">use</span> <span class="token namespace">clap<span class="token punctuation">::</span></span><span class="token class-name">Parser</span><span class="token punctuation">;</span>

<span class="token attribute attr-name">#[derive(Debug, Parser)]</span>
<span class="token keyword">struct</span> <span class="token type-definition class-name">Cli</span> <span class="token punctuation">&#123;</span>
    num1<span class="token punctuation">:</span> <span class="token keyword">i32</span><span class="token punctuation">,</span>
    num2<span class="token punctuation">:</span> <span class="token keyword">i32</span><span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">let</span> args <span class="token operator">=</span> <span class="token class-name">Cli</span><span class="token punctuation">::</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"&#123;:?&#125;"</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"The sum of &#123;&#125; and &#123;&#125; is &#123;&#125;"</span><span class="token punctuation">,</span> args<span class="token punctuation">.</span>num1<span class="token punctuation">,</span> args<span class="token punctuation">.</span>num2<span class="token punctuation">,</span> args<span class="token punctuation">.</span>num1 <span class="token operator">+</span> args<span class="token punctuation">.</span>num2<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code>`,oa,w,un,Ps,kn,fn,Cs,mn,dn,Ts,hn,wn,Os,vn,bn,la,D,_n,Ls,En,yn,ra,J,Tt=`<code class="language-bash"><span class="token function">cargo</span> run <span class="token number">2</span> <span class="token number">3</span>
// should print <span class="token string">"The sum of 2 and 3 is 5"</span></code>`,ca,M,gn,Ds,Pn,Cn,ua,K,Ot=`<code class="language-bash">% <span class="token function">cargo</span> run -- <span class="token parameter variable">--help</span>
    Finished dev <span class="token punctuation">[</span>unoptimized + debuginfo<span class="token punctuation">]</span> target<span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token keyword">in</span> <span class="token number">0</span>.07s
     Running <span class="token variable"><span class="token variable">&#96;</span>target/debug/rust-cli <span class="token parameter variable">--help</span><span class="token variable">&#96;</span></span>
Usage: rust-cli <span class="token operator">&lt;</span>NUM<span class="token operator"><span class="token file-descriptor important">1</span>></span> <span class="token operator">&lt;</span>NUM<span class="token operator"><span class="token file-descriptor important">2</span>></span>

Arguments:
  <span class="token operator">&lt;</span>NUM<span class="token operator"><span class="token file-descriptor important">1</span>></span>
  <span class="token operator">&lt;</span>NUM<span class="token operator"><span class="token file-descriptor important">2</span>></span>

Options:
  -h, <span class="token parameter variable">--help</span>  Print <span class="token builtin class-name">help</span></code>`,ia,H,Tn,Ms,On,Ln,ka,Q,Lt=`<code class="language-bash">% <span class="token function">cargo</span> run <span class="token number">2</span> three
    Finished dev <span class="token punctuation">[</span>unoptimized + debuginfo<span class="token punctuation">]</span> target<span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token keyword">in</span> <span class="token number">0</span>.02s
     Running <span class="token variable"><span class="token variable">&#96;</span>target/debug/rust-cli <span class="token number">2</span> three<span class="token variable">&#96;</span></span>
error: invalid value <span class="token string">'three'</span> <span class="token keyword">for</span> <span class="token string">'&lt;NUM2>'</span><span class="token builtin class-name">:</span> invalid digit found <span class="token keyword">in</span> string

For <span class="token function">more</span> information, try <span class="token string">'--help'</span><span class="token builtin class-name">.</span></code>`,fa,x,Dn,Hs,Mn,Hn;return{c(){m=l("p"),h=p("Writing a command line application in rust in not that hard. Mainly because of the library ecosystem for writing CLI apps in rust."),_=u(),d=l("p"),I=p("Before we get started, make sure you have "),k=l("code"),v=p("rustc"),Y=p(" and "),us=l("code"),ya=p("cargo"),ga=p(" installed on your machine. If you don’t know how to do that, check this "),Z=l("a"),Pa=p("link"),Ca=p("."),xs=u(),Rs=l("hr"),Ws=u(),ss=l("p"),Ta=p("Let’s build a small CLI app which takes 2 numbers as inputs and prints the sum of the numbers. We will not use any library for this one."),Is=u(),as=l("p"),Oa=p("Let’s create our rust app first -"),Ns=u(),N=l("pre"),Us=u(),C=l("p"),La=p("When we build a "),is=l("code"),Da=p("rust"),Ma=p(" app, it’s already a CLI app. The app we created above just prints “Hello, world!“. But it’s a CLI app nevertheless, i.e. it’s an executable which can be run in a shell."),$s=u(),ns=l("p"),Ha=p("We want to finally call our app like this -"),js=u(),U=l("pre"),Ss=u(),$=l("p"),xa=p("During development we will run the same app with "),ks=l("code"),Ra=p("cargo"),As=u(),j=l("pre"),Bs=u(),b=l("p"),Wa=p("The first step is to get the input from the terminal from the user inside our program. "),fs=l("code"),Ia=p("rust"),Na=p(" standard library has a "),ms=l("code"),Ua=p("env"),$a=p(" module which has an "),ds=l("code"),ja=p("args"),Sa=p(" function which can provide us the input after the command as a list of strings."),Vs=u(),S=l("pre"),zs=u(),ts=l("p"),Aa=p("This program when run should print a vector whose first value is the path to the program itself and the rest of the values are all the arguments we pass to the command (separated by space)."),Fs=u(),es=l("p"),Ba=p("Something like this"),qs=u(),A=l("pre"),Gs=u(),ps=l("p"),Va=p("Now that we have the input from the user, we need to first transform them from strings to numbers."),Js=u(),B=l("pre"),Ks=u(),os=l("p"),za=p("We have gotten hold of the arguments. Let’s add them up and print it out."),Qs=u(),V=l("pre"),Xs=u(),ls=l("p"),Fa=p("Our program should now be able to add 2 numbers -"),Ys=u(),z=l("pre"),Zs=u(),P=l("h3"),T=l("a"),hs=l("span"),qa=p("Using a library to build our CLI application - "),ws=l("code"),Ga=p("clap"),sa=u(),O=l("p"),Ja=p("Let’s build the same application using a library called "),F=l("a"),vs=l("code"),Ka=p("clap"),Qa=p(", which helps with a lot more than just parsing the arguments."),aa=u(),E=l("p"),Xa=p("We will use "),bs=l("code"),Ya=p("cargo-edit"),Za=p(" to add the library instead of directly editing "),_s=l("code"),sn=p("Cargo.toml"),an=p(" file."),na=u(),q=l("pre"),ta=u(),y=l("p"),nn=p("Our "),Es=l("code"),tn=p("Cargo.toml"),en=p(" should now have an entry for the "),ys=l("code"),pn=p("clap"),on=p(" library and it’s ready to use in our program."),ea=u(),L=l("p"),ln=p("Now we will use "),gs=l("code"),rn=p("clap"),cn=p(" to parse the arguments we pass to our app/program -"),pa=u(),G=l("pre"),oa=u(),w=l("p"),un=p("In the above program, we create a struct where we define 2 properties where we will hold our numbers to be added. We annotate the struct with "),Ps=l("code"),kn=p("#[derive(Parser)]"),fn=p(" attribute. That piece of code will enhance our "),Cs=l("code"),mn=p("Cli"),dn=p(" struct with the ability to read our command line arguments and parse them as per our type definitions for "),Ts=l("code"),hn=p("num1"),wn=p(" and "),Os=l("code"),vn=p("num2"),bn=p(". This seems like magic and probably is."),la=u(),D=l("p"),_n=p("This program should now work exactly as our program without "),Ls=l("code"),En=p("clap"),yn=p("."),ra=u(),J=l("pre"),ca=u(),M=l("p"),gn=p("The great thing about using "),Ds=l("code"),Pn=p("clap"),Cn=p(" is that we now get free help instructions for our program."),ua=u(),K=l("pre"),ia=u(),H=l("p"),Tn=p("Not just that, we also get some free error handling. What if the user who invokes our command provides something other than a number as input? The "),Ms=l("code"),On=p("clap"),Ln=p(" parser will catch it and let the user know -"),ka=u(),Q=l("pre"),fa=u(),x=l("p"),Dn=p("Of course "),Hs=l("code"),Mn=p("clap"),Hn=p(" provides much more than this."),this.h()},l(s){m=r(s,"P",{});var t=c(m);h=o(t,"Writing a command line application in rust in not that hard. Mainly because of the library ecosystem for writing CLI apps in rust."),t.forEach(a),_=i(s),d=r(s,"P",{});var R=c(d);I=o(R,"Before we get started, make sure you have "),k=r(R,"CODE",{});var Wn=c(k);v=o(Wn,"rustc"),Wn.forEach(a),Y=o(R," and "),us=r(R,"CODE",{});var In=c(us);ya=o(In,"cargo"),In.forEach(a),ga=o(R," installed on your machine. If you don’t know how to do that, check this "),Z=r(R,"A",{href:!0});var Nn=c(Z);Pa=o(Nn,"link"),Nn.forEach(a),Ca=o(R,"."),R.forEach(a),xs=i(s),Rs=r(s,"HR",{}),Ws=i(s),ss=r(s,"P",{});var Un=c(ss);Ta=o(Un,"Let’s build a small CLI app which takes 2 numbers as inputs and prints the sum of the numbers. We will not use any library for this one."),Un.forEach(a),Is=i(s),as=r(s,"P",{});var $n=c(as);Oa=o($n,"Let’s create our rust app first -"),$n.forEach(a),Ns=i(s),N=r(s,"PRE",{class:!0});var Dt=c(N);Dt.forEach(a),Us=i(s),C=r(s,"P",{});var ma=c(C);La=o(ma,"When we build a "),is=r(ma,"CODE",{});var jn=c(is);Da=o(jn,"rust"),jn.forEach(a),Ma=o(ma," app, it’s already a CLI app. The app we created above just prints “Hello, world!“. But it’s a CLI app nevertheless, i.e. it’s an executable which can be run in a shell."),ma.forEach(a),$s=i(s),ns=r(s,"P",{});var Sn=c(ns);Ha=o(Sn,"We want to finally call our app like this -"),Sn.forEach(a),js=i(s),U=r(s,"PRE",{class:!0});var Mt=c(U);Mt.forEach(a),Ss=i(s),$=r(s,"P",{});var xn=c($);xa=o(xn,"During development we will run the same app with "),ks=r(xn,"CODE",{});var An=c(ks);Ra=o(An,"cargo"),An.forEach(a),xn.forEach(a),As=i(s),j=r(s,"PRE",{class:!0});var Ht=c(j);Ht.forEach(a),Bs=i(s),b=r(s,"P",{});var W=c(b);Wa=o(W,"The first step is to get the input from the terminal from the user inside our program. "),fs=r(W,"CODE",{});var Bn=c(fs);Ia=o(Bn,"rust"),Bn.forEach(a),Na=o(W," standard library has a "),ms=r(W,"CODE",{});var Vn=c(ms);Ua=o(Vn,"env"),Vn.forEach(a),$a=o(W," module which has an "),ds=r(W,"CODE",{});var zn=c(ds);ja=o(zn,"args"),zn.forEach(a),Sa=o(W," function which can provide us the input after the command as a list of strings."),W.forEach(a),Vs=i(s),S=r(s,"PRE",{class:!0});var xt=c(S);xt.forEach(a),zs=i(s),ts=r(s,"P",{});var Fn=c(ts);Aa=o(Fn,"This program when run should print a vector whose first value is the path to the program itself and the rest of the values are all the arguments we pass to the command (separated by space)."),Fn.forEach(a),Fs=i(s),es=r(s,"P",{});var qn=c(es);Ba=o(qn,"Something like this"),qn.forEach(a),qs=i(s),A=r(s,"PRE",{class:!0});var Rt=c(A);Rt.forEach(a),Gs=i(s),ps=r(s,"P",{});var Gn=c(ps);Va=o(Gn,"Now that we have the input from the user, we need to first transform them from strings to numbers."),Gn.forEach(a),Js=i(s),B=r(s,"PRE",{class:!0});var Wt=c(B);Wt.forEach(a),Ks=i(s),os=r(s,"P",{});var Jn=c(os);za=o(Jn,"We have gotten hold of the arguments. Let’s add them up and print it out."),Jn.forEach(a),Qs=i(s),V=r(s,"PRE",{class:!0});var It=c(V);It.forEach(a),Xs=i(s),ls=r(s,"P",{});var Kn=c(ls);Fa=o(Kn,"Our program should now be able to add 2 numbers -"),Kn.forEach(a),Ys=i(s),z=r(s,"PRE",{class:!0});var Nt=c(z);Nt.forEach(a),Zs=i(s),P=r(s,"H3",{id:!0});var da=c(P);T=r(da,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var Qn=c(T);hs=r(Qn,"SPAN",{class:!0}),c(hs).forEach(a),Qn.forEach(a),qa=o(da,"Using a library to build our CLI application - "),ws=r(da,"CODE",{});var Xn=c(ws);Ga=o(Xn,"clap"),Xn.forEach(a),da.forEach(a),sa=i(s),O=r(s,"P",{});var ha=c(O);Ja=o(ha,"Let’s build the same application using a library called "),F=r(ha,"A",{href:!0,rel:!0});var Yn=c(F);vs=r(Yn,"CODE",{});var Zn=c(vs);Ka=o(Zn,"clap"),Zn.forEach(a),Yn.forEach(a),Qa=o(ha,", which helps with a lot more than just parsing the arguments."),ha.forEach(a),aa=i(s),E=r(s,"P",{});var rs=c(E);Xa=o(rs,"We will use "),bs=r(rs,"CODE",{});var st=c(bs);Ya=o(st,"cargo-edit"),st.forEach(a),Za=o(rs," to add the library instead of directly editing "),_s=r(rs,"CODE",{});var at=c(_s);sn=o(at,"Cargo.toml"),at.forEach(a),an=o(rs," file."),rs.forEach(a),na=i(s),q=r(s,"PRE",{class:!0});var Ut=c(q);Ut.forEach(a),ta=i(s),y=r(s,"P",{});var cs=c(y);nn=o(cs,"Our "),Es=r(cs,"CODE",{});var nt=c(Es);tn=o(nt,"Cargo.toml"),nt.forEach(a),en=o(cs," should now have an entry for the "),ys=r(cs,"CODE",{});var tt=c(ys);pn=o(tt,"clap"),tt.forEach(a),on=o(cs," library and it’s ready to use in our program."),cs.forEach(a),ea=i(s),L=r(s,"P",{});var wa=c(L);ln=o(wa,"Now we will use "),gs=r(wa,"CODE",{});var et=c(gs);rn=o(et,"clap"),et.forEach(a),cn=o(wa," to parse the arguments we pass to our app/program -"),wa.forEach(a),pa=i(s),G=r(s,"PRE",{class:!0});var $t=c(G);$t.forEach(a),oa=i(s),w=r(s,"P",{});var g=c(w);un=o(g,"In the above program, we create a struct where we define 2 properties where we will hold our numbers to be added. We annotate the struct with "),Ps=r(g,"CODE",{});var pt=c(Ps);kn=o(pt,"#[derive(Parser)]"),pt.forEach(a),fn=o(g," attribute. That piece of code will enhance our "),Cs=r(g,"CODE",{});var ot=c(Cs);mn=o(ot,"Cli"),ot.forEach(a),dn=o(g," struct with the ability to read our command line arguments and parse them as per our type definitions for "),Ts=r(g,"CODE",{});var lt=c(Ts);hn=o(lt,"num1"),lt.forEach(a),wn=o(g," and "),Os=r(g,"CODE",{});var rt=c(Os);vn=o(rt,"num2"),rt.forEach(a),bn=o(g,". This seems like magic and probably is."),g.forEach(a),la=i(s),D=r(s,"P",{});var va=c(D);_n=o(va,"This program should now work exactly as our program without "),Ls=r(va,"CODE",{});var ct=c(Ls);En=o(ct,"clap"),ct.forEach(a),yn=o(va,"."),va.forEach(a),ra=i(s),J=r(s,"PRE",{class:!0});var jt=c(J);jt.forEach(a),ca=i(s),M=r(s,"P",{});var ba=c(M);gn=o(ba,"The great thing about using "),Ds=r(ba,"CODE",{});var ut=c(Ds);Pn=o(ut,"clap"),ut.forEach(a),Cn=o(ba," is that we now get free help instructions for our program."),ba.forEach(a),ua=i(s),K=r(s,"PRE",{class:!0});var St=c(K);St.forEach(a),ia=i(s),H=r(s,"P",{});var _a=c(H);Tn=o(_a,"Not just that, we also get some free error handling. What if the user who invokes our command provides something other than a number as input? The "),Ms=r(_a,"CODE",{});var it=c(Ms);On=o(it,"clap"),it.forEach(a),Ln=o(_a," parser will catch it and let the user know -"),_a.forEach(a),ka=i(s),Q=r(s,"PRE",{class:!0});var At=c(Q);At.forEach(a),fa=i(s),x=r(s,"P",{});var Ea=c(x);Dn=o(Ea,"Of course "),Hs=r(Ea,"CODE",{});var kt=c(Hs);Mn=o(kt,"clap"),kt.forEach(a),Hn=o(Ea," provides much more than this."),Ea.forEach(a),this.h()},h(){f(Z,"href","/blog/2023-07-31-rust-quick-setup-macos"),f(N,"class","language-bash"),f(U,"class","language-bash"),f(j,"class","language-bash"),f(S,"class","language-rust"),f(A,"class","language-bash"),f(B,"class","language-rust"),f(V,"class","language-rust"),f(z,"class","language-bash"),f(hs,"class","icon icon-link"),f(T,"aria-hidden","true"),f(T,"tabindex","-1"),f(T,"href","#using-a-library-to-build-our-cli-application---clap"),f(P,"id","using-a-library-to-build-our-cli-application---clap"),f(F,"href","https://docs.rs/clap/latest/clap/"),f(F,"rel","nofollow"),f(q,"class","language-bash"),f(G,"class","language-rust"),f(J,"class","language-bash"),f(K,"class","language-bash"),f(Q,"class","language-bash")},m(s,t){e(s,m,t),n(m,h),e(s,_,t),e(s,d,t),n(d,I),n(d,k),n(k,v),n(d,Y),n(d,us),n(us,ya),n(d,ga),n(d,Z),n(Z,Pa),n(d,Ca),e(s,xs,t),e(s,Rs,t),e(s,Ws,t),e(s,ss,t),n(ss,Ta),e(s,Is,t),e(s,as,t),n(as,Oa),e(s,Ns,t),e(s,N,t),N.innerHTML=ht,e(s,Us,t),e(s,C,t),n(C,La),n(C,is),n(is,Da),n(C,Ma),e(s,$s,t),e(s,ns,t),n(ns,Ha),e(s,js,t),e(s,U,t),U.innerHTML=wt,e(s,Ss,t),e(s,$,t),n($,xa),n($,ks),n(ks,Ra),e(s,As,t),e(s,j,t),j.innerHTML=vt,e(s,Bs,t),e(s,b,t),n(b,Wa),n(b,fs),n(fs,Ia),n(b,Na),n(b,ms),n(ms,Ua),n(b,$a),n(b,ds),n(ds,ja),n(b,Sa),e(s,Vs,t),e(s,S,t),S.innerHTML=bt,e(s,zs,t),e(s,ts,t),n(ts,Aa),e(s,Fs,t),e(s,es,t),n(es,Ba),e(s,qs,t),e(s,A,t),A.innerHTML=_t,e(s,Gs,t),e(s,ps,t),n(ps,Va),e(s,Js,t),e(s,B,t),B.innerHTML=Et,e(s,Ks,t),e(s,os,t),n(os,za),e(s,Qs,t),e(s,V,t),V.innerHTML=yt,e(s,Xs,t),e(s,ls,t),n(ls,Fa),e(s,Ys,t),e(s,z,t),z.innerHTML=gt,e(s,Zs,t),e(s,P,t),n(P,T),n(T,hs),n(P,qa),n(P,ws),n(ws,Ga),e(s,sa,t),e(s,O,t),n(O,Ja),n(O,F),n(F,vs),n(vs,Ka),n(O,Qa),e(s,aa,t),e(s,E,t),n(E,Xa),n(E,bs),n(bs,Ya),n(E,Za),n(E,_s),n(_s,sn),n(E,an),e(s,na,t),e(s,q,t),q.innerHTML=Pt,e(s,ta,t),e(s,y,t),n(y,nn),n(y,Es),n(Es,tn),n(y,en),n(y,ys),n(ys,pn),n(y,on),e(s,ea,t),e(s,L,t),n(L,ln),n(L,gs),n(gs,rn),n(L,cn),e(s,pa,t),e(s,G,t),G.innerHTML=Ct,e(s,oa,t),e(s,w,t),n(w,un),n(w,Ps),n(Ps,kn),n(w,fn),n(w,Cs),n(Cs,mn),n(w,dn),n(w,Ts),n(Ts,hn),n(w,wn),n(w,Os),n(Os,vn),n(w,bn),e(s,la,t),e(s,D,t),n(D,_n),n(D,Ls),n(Ls,En),n(D,yn),e(s,ra,t),e(s,J,t),J.innerHTML=Tt,e(s,ca,t),e(s,M,t),n(M,gn),n(M,Ds),n(Ds,Pn),n(M,Cn),e(s,ua,t),e(s,K,t),K.innerHTML=Ot,e(s,ia,t),e(s,H,t),n(H,Tn),n(H,Ms),n(Ms,On),n(H,Ln),e(s,ka,t),e(s,Q,t),Q.innerHTML=Lt,e(s,fa,t),e(s,x,t),n(x,Dn),n(x,Hs),n(Hs,Mn),n(x,Hn)},p:Zt,d(s){s&&a(m),s&&a(_),s&&a(d),s&&a(xs),s&&a(Rs),s&&a(Ws),s&&a(ss),s&&a(Is),s&&a(as),s&&a(Ns),s&&a(N),s&&a(Us),s&&a(C),s&&a($s),s&&a(ns),s&&a(js),s&&a(U),s&&a(Ss),s&&a($),s&&a(As),s&&a(j),s&&a(Bs),s&&a(b),s&&a(Vs),s&&a(S),s&&a(zs),s&&a(ts),s&&a(Fs),s&&a(es),s&&a(qs),s&&a(A),s&&a(Gs),s&&a(ps),s&&a(Js),s&&a(B),s&&a(Ks),s&&a(os),s&&a(Qs),s&&a(V),s&&a(Xs),s&&a(ls),s&&a(Ys),s&&a(z),s&&a(Zs),s&&a(P),s&&a(sa),s&&a(O),s&&a(aa),s&&a(E),s&&a(na),s&&a(q),s&&a(ta),s&&a(y),s&&a(ea),s&&a(L),s&&a(pa),s&&a(G),s&&a(oa),s&&a(w),s&&a(la),s&&a(D),s&&a(ra),s&&a(J),s&&a(ca),s&&a(M),s&&a(ua),s&&a(K),s&&a(ia),s&&a(H),s&&a(ka),s&&a(Q),s&&a(fa),s&&a(x)}}}function ne(X){let m,h,_;const d=[X[0],dt];let I={$$slots:{default:[ae]},$$scope:{ctx:X}};for(let k=0;k<d.length;k+=1)I=Rn(I,d[k]);return h=new se({props:I}),{c(){m=u(),Ft(h.$$.fragment),this.h()},l(k){qt("svelte-xvt9is",document.head).forEach(a),m=i(k),Gt(h.$$.fragment,k),this.h()},h(){document.title="How to write a command line application in rust"},m(k,v){e(k,m,v),Jt(h,k,v),_=!0},p(k,[v]){const Y=v&1?Kt(d,[v&1&&ft(k[0]),v&0&&ft(dt)]):{};v&2&&(Y.$$scope={dirty:v,ctx:k}),h.$set(Y)},i(k){_||(Qt(h.$$.fragment,k),_=!0)},o(k){Xt(h.$$.fragment,k),_=!1},d(k){k&&a(m),Yt(h,k)}}}const dt={title:"How to write a command line application in rust",created:"2023-07-31",slug:"2023-07-31-how-to-write-a-command-line-application-in-rust",categories:["rust","beginner","command line application","cli","clap"]};function te(X,m,h){return X.$$set=_=>{h(0,m=Rn(Rn({},m),mt(_)))},m=mt(m),[m]}class oe extends Bt{constructor(m){super(),Vt(this,m,te,ne,zt,{})}}export{oe as default,dt as metadata};
